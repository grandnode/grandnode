@model ProductDetailsModel.AddToCartModel
@if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId))
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" />

}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{

    if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification text-danger w-100 mb-2">@Model.MinimumQuantityNotification</div>
    }
    if (!Model.DisableBuyButton)
    {
        if (Model.AllowedQuantities.Any())
        {
            <select asp-for="EnteredQuantity" asp-items="Model.AllowedQuantities" class="col-xs-2 custom-select form-control qty-dropdown"></select>
        }
        else
        {
            <div class="pr-2">
                <label class="sr-only" for="addtocart_@(Model.ProductId)_EnteredQuantity">@Model.ProductId</label>
                <input asp-for="EnteredQuantity" class="form-control qty-input text-center" />
            </div>
            if (!String.IsNullOrEmpty(Model.MeasureUnit))
            {
                <div class="pr-2">
                    <span class="btn btn-secondary input-group-addon qty-unit">
                        @Model.MeasureUnit
                    </span>
                </div>
            }

        }
        var addToCartText = "";
        if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId) && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
        {
            addToCartText = T("ShoppingCart.AddToCart.Update").Text;
        }
        else
        {
            addToCartText = T("ShoppingCart.AddToCart").Text;
            if (Model.IsReservation)
            {
                addToCartText = T("ShoppingCart.Reservation").Text;
            }
            if (Model.AvailableForPreOrder)
            {
                addToCartText = T("ShoppingCart.PreOrder").Text;
            }
        }

        <script asp-location="Footer">
                    $(document).ready(function () {
                        $("#@Html.IdFor(model => model.EnteredQuantity)").keydown(function (event) {
                            if (event.keyCode == 13) {
                                $("#add-to-cart-button-@Model.ProductId").trigger("click");
                                return false;
                            }
                        });
                    });
        </script>
            <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn btn btn-info add-to-cart-button d-flex align-items-center" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
                <span class="mdi mdi-cart"></span> @T("ShoppingCart.AddToCart").Text
            </button>
    }

    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_add_info", additionalData = Model.ProductId })

}
