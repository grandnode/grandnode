@model ProductOverviewModel
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    string addtowishlistlink = "";
    string quickviewurl = Url.RouteUrl("QuickView-Product", new { productId = Model.Id });

    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (!Model.ShowQty)
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    }
    else
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist });
    }
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="card rowHelper col-12 px-0 mb-0 pb-0 featured-product" data-productid="@Model.Id">
    <div class="prod-list">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <picture>
                <source media="(max-width: 480px)" picture-id="@Model.DefaultPictureModel.Id" picture-size="200" />
                <img class="img-fluid" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"
                     @if (!string.IsNullOrEmpty(Model.SecondPictureModel.ImageUrl)) { <text>
                     onmouseover="this.src='@Model.SecondPictureModel.ImageUrl';" onmouseout="this.src='@Model.DefaultPictureModel.ImageUrl';"
                     </text> } />
            </picture>
        </a>
            @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                 @if (!string.IsNullOrEmpty(Model.Flag))
                 {
                     <span class="new-product-label with-promo bg-info text-white">@Model.Flag</span>
                 }
                 <span class="change-percent bg-success text-white">
                    <span>-@(Convert.ToInt32((1 - Model.ProductPrice.PriceValue / Model.ProductPrice.OldPriceValue) * 100))%</span>
                 </span>
            }
            else
            {
                 @if (!string.IsNullOrEmpty(Model.Flag))
                 {
                     <span class="new-product-label bg-info text-white">@Model.Flag</span>
                 }
            }
            <div class="card-body text-left">
                <h5 class="card-title mt-0">
                    <strong><a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a></strong>
                    @if (Model.ShowSku && !string.IsNullOrEmpty(Model.Sku))
                    {
                        <span class="d-block py-1">@Model.Sku</span>
                    }
                </h5>
                @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                {
                    int ratingPercent = 0;
                    if (Model.ReviewOverviewModel.TotalReviews != 0)
                    {
                        ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                    }
                    <div class="product-rating-box list-group" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                        <div class="rating">
                            <div class="rating-ghost">
                                &#x2606;&#x2606;&#x2606;&#x2606;&#x2606;
                            </div>
                            <div class="rating-real" style="width: @(ratingPercent)%">
                                &#9733;&#9733;&#9733;&#9733;&#9733;
                            </div>
                        </div>
                    </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })
                <ul class="d-inline-flex flex-wrap pl-0 mb-0">

                    @if (Model.ProductType != ProductType.Auction)
                    {
                        <li class="price actual-price d-inline-flex">@Model.ProductPrice.Price</li>
                    }
                    else
                    {
                        <li class="price actual-price d-inline-flex">@(Model.ProductPrice.HighestBidValue > 0 ? Model.ProductPrice.HighestBid : Model.ProductPrice.StartPrice)</li>
                    }
                    @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <li class="d-inline-flex ml-2">
                            <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                        </li>
                    }

                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = Model.TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <li class="">
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <li class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </li>
                    }

                </ul>
                @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })
                <div class="d-lg-flex d-none justify-content-center card-buttons">
                    <div class="btn-group">
                        @if (Model.ShowQty)
                        {
                            var qtyId = "addtocart_" + @Model.Id + "_EnteredQuantity";
                            <input class="form-control input-group-addon catalog-quantity"
                                   type="number" id="@qtyId" name="@qtyId" value="1">
                        }
                        <button type="button" value="@T("Products.QuickView")" title="@T("Products.QuickView")" class="btn btn-secondary btn-quick-view" data-toggle="modal" data-target="ModalQuickView" onclick="AjaxCart.quickview_product('@quickviewurl')">
                            <span class="sr-only">@T("Products.QuickView")</span>
                            <span class="mdi mdi-magnify"></span>
                        </button>
                        @if (!Model.ProductPrice.DisableAddToCompareListButton && Model.ProductType == ProductType.SimpleProduct)
                        {
                            <button type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="btn btn-secondary" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">
                                <span class="sr-only">AddToCompareList</span>
                                <span class="mdi mdi-repeat"></span>
                            </button>
                        }
                        @if (!Model.ProductPrice.DisableWishlistButton && Model.ProductType == ProductType.SimpleProduct)
                        {
                            <button type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="btn btn-secondary" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink', '@Model.ShowQty', '@Model.Id');return false;">
                                <span class="mdi mdi-heart-outline"></span>
                                <span class="sr-only">AddToWishlist</span>
                            </button>

                        }

                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
            </div>
    </div>
</div>
