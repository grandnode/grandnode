{"version":3,"sources":["kendo.color.js"],"names":["f","define","$","parseFloat","parseInt","parseColor","color","nothrow","m","ret","_Color","toLowerCase","namedColorRegexp","exec","_RGB","Color","namedColors","match","_Bytes","Error","hex","n","width","pad","toString","length","hue2rgb","p","q","t","i","_HSV","_HSL","value","re","processor","parts","channels","this","formats","arguments","resolveColor","process","r","g","b","normalizeByte","prototype","toHex","padDigit","charAt","substr","replace","isNaN","brightness","round","Math","percBrightness","sqrt","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hasOwnProperty","push","RegExp","join","kendo","Class","extend","toHSV","toRGB","toBytes","toCss","toCssRgba","rgb","a","toFixed","toDisplay","support","browser","msie","version","equals","c","diff","c2","NaN","c1","pow","clone","init","h","s","min","max","v","delta","toHSL","d","l","floor","fromBytes","fromRGB","fromHSV","fromHSL","window","jQuery","amd","a1","a2","a3"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;CAwBC,SAAUA,EAAGC,QACVA,OAAO,eAAgB,cAAeD,IACxC,YASG,SAAUE,EAAGC,EAAYC,GAsPtB,QAASC,GAAWC,EAAOC,GACvB,GAAIC,GAAGC,CACP,IAAa,MAATH,GAA0B,QAATA,EACjB,MAAO,KAEX,IAAIA,YAAiBI,GACjB,MAAOJ,EAGX,IADAA,EAAQA,EAAMK,cACVH,EAAII,EAAiBC,KAAKP,GAO1B,MALIA,GADQ,eAARE,EAAE,GACM,GAAIM,GAAK,EAAG,EAAG,EAAG,GAElBT,EAAWU,EAAMC,YAAYR,EAAE,IAAKD,GAEhDD,EAAMW,OAAST,EAAE,IACVF,CAeX,KAbIE,EAAI,gDAAgDK,KAAKP,IACzDG,EAAM,GAAIS,GAAOd,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAK,IACtEA,EAAI,uCAAuCK,KAAKP,IACvDG,EAAM,GAAIS,GAAOd,EAASI,EAAE,GAAKA,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAKA,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAKA,EAAE,GAAI,IAAK,IAC3FA,EAAI,uDAAuDK,KAAKP,IACvEG,EAAM,GAAIS,GAAOd,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAK,IACtEA,EAAI,wEAAwEK,KAAKP,IACxFG,EAAM,GAAIS,GAAOd,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAKJ,EAASI,EAAE,GAAI,IAAKL,EAAWK,EAAE,MACnFA,EAAI,qFAAqFK,KAAKP,IACrGG,EAAM,GAAIK,GAAKX,EAAWK,EAAE,IAAM,IAAKL,EAAWK,EAAE,IAAM,IAAKL,EAAWK,EAAE,IAAM,IAAK,IAChFA,EAAI,sGAAsGK,KAAKP,MACtHG,EAAM,GAAIK,GAAKX,EAAWK,EAAE,IAAM,IAAKL,EAAWK,EAAE,IAAM,IAAKL,EAAWK,EAAE,IAAM,IAAKL,EAAWK,EAAE,MAEpGC,EACAA,EAAIQ,MAAQT,MACT,KAAKD,EACR,KAAUY,OAAM,uBAAyBb,EAE7C,OAAOG,GAEX,QAASW,GAAIC,EAAGC,EAAOC,GAKnB,IAJKA,IACDA,EAAM,KAEVF,EAAIA,EAAEG,SAAS,IACRF,EAAQD,EAAEI,QACbJ,EAAI,IAAMA,CAEd,OAAOA,GAEX,QAASK,GAAQC,EAAGC,EAAGC,GAOnB,MANQ,GAAJA,IACAA,GAAK,GAELA,EAAI,IACJA,GAAK,GAED,EAAI,EAARA,EACOF,EAAc,GAATC,EAAID,GAASE,EAErB,GAAJA,EACOD,EAEH,EAAI,EAARC,EACOF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAEhCF,EAtTd,GA+OOf,GACKkB,EAwELpB,EA6CAI,EAkEAI,EAuBAa,EA6DAC,EA1fAjB,EAAQ,SAAUkB,GAClB,GAA2CC,GAAIC,EAAWC,EAAON,EAAGO,EAAhE/B,EAAQgC,KAAMC,EAAUxB,EAAMwB,OAClC,IAAyB,IAArBC,UAAUf,OAEV,IADAQ,EAAQ3B,EAAMmC,aAAaR,GACtBH,EAAI,EAAOS,EAAQd,OAAZK,EAAoBA,IAC5BI,EAAKK,EAAQT,GAAGI,GAChBC,EAAYI,EAAQT,GAAGY,QACvBN,EAAQF,EAAGrB,KAAKoB,GACZG,IACAC,EAAWF,EAAUC,GACrB9B,EAAMqC,EAAIN,EAAS,GACnB/B,EAAMsC,EAAIP,EAAS,GACnB/B,EAAMuC,EAAIR,EAAS,QAI3B/B,GAAMqC,EAAIH,UAAU,GACpBlC,EAAMsC,EAAIJ,UAAU,GACpBlC,EAAMuC,EAAIL,UAAU,EAExBlC,GAAMqC,EAAIrC,EAAMwC,cAAcxC,EAAMqC,GACpCrC,EAAMsC,EAAItC,EAAMwC,cAAcxC,EAAMsC,GACpCtC,EAAMuC,EAAIvC,EAAMwC,cAAcxC,EAAMuC,GAExC9B,GAAMgC,WACFC,MAAO,WACH,GAAI1C,GAAQgC,KAAMf,EAAMjB,EAAM2C,SAAUN,EAAIrC,EAAMqC,EAAEnB,SAAS,IAAKoB,EAAItC,EAAMsC,EAAEpB,SAAS,IAAKqB,EAAIvC,EAAMuC,EAAErB,SAAS,GACjH,OAAO,IAAMD,EAAIoB,GAAKpB,EAAIqB,GAAKrB,EAAIsB,IAEvCJ,aAAc,SAAUR,GAQpB,MAPAA,GAAQA,GAAS,QACM,KAAnBA,EAAMiB,OAAO,KACbjB,EAAQA,EAAMkB,OAAO,EAAG,IAE5BlB,EAAQA,EAAMmB,QAAQ,KAAM,IAC5BnB,EAAQA,EAAMtB,cACdsB,EAAQlB,EAAMC,YAAYiB,IAAUA,GAGxCa,cAAe,SAAUb,GACrB,MAAe,GAARA,GAAaoB,MAAMpB,GAAS,EAAIA,EAAQ,IAAM,IAAMA,GAE/DgB,SAAU,SAAUhB,GAChB,MAAwB,KAAjBA,EAAMR,OAAe,IAAMQ,EAAQA,GAE9CqB,WAAY,SAAUrB,GAClB,GAAI3B,GAAQgC,KAAMiB,EAAQC,KAAKD,KAI/B,OAHAjD,GAAMqC,EAAIY,EAAMjD,EAAMwC,cAAcxC,EAAMqC,EAAIV,IAC9C3B,EAAMsC,EAAIW,EAAMjD,EAAMwC,cAAcxC,EAAMsC,EAAIX,IAC9C3B,EAAMuC,EAAIU,EAAMjD,EAAMwC,cAAcxC,EAAMuC,EAAIZ,IACvC3B,GAEXmD,eAAgB,WACZ,GAAInD,GAAQgC,IACZ,OAAOkB,MAAKE,KAAK,KAAQpD,EAAMqC,EAAIrC,EAAMqC,EAAI,KAAQrC,EAAMsC,EAAItC,EAAMsC,EAAI,KAAQtC,EAAMuC,EAAIvC,EAAMuC,KAGzG9B,EAAMwB,UAEEL,GAAI,+CACJQ,QAAS,SAAUN,GACf,OACIhC,EAASgC,EAAM,GAAI,IACnBhC,EAASgC,EAAM,GAAI,IACnBhC,EAASgC,EAAM,GAAI,QAK3BF,GAAI,0BACJQ,QAAS,SAAUN,GACf,OACIhC,EAASgC,EAAM,GAAI,IACnBhC,EAASgC,EAAM,GAAI,IACnBhC,EAASgC,EAAM,GAAI,QAK3BF,GAAI,0BACJQ,QAAS,SAAUN,GACf,OACIhC,EAASgC,EAAM,GAAKA,EAAM,GAAI,IAC9BhC,EAASgC,EAAM,GAAKA,EAAM,GAAI,IAC9BhC,EAASgC,EAAM,GAAKA,EAAM,GAAI,QAK9CrB,EAAMC,aACF2C,UAAW,SACXC,aAAc,SACdC,KAAM,SACNC,WAAY,SACZC,MAAO,SACPC,MAAO,SACPC,OAAQ,SACRC,MAAO,SACPC,eAAgB,SAChBC,KAAM,SACNC,WAAY,SACZC,MAAO,SACPC,UAAW,SACXC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,MAAO,SACPC,eAAgB,SAChBC,SAAU,SACVC,QAAS,SACTC,KAAM,SACNC,SAAU,SACVC,SAAU,SACVC,cAAe,SACfC,SAAU,SACVC,SAAU,SACVC,UAAW,SACXC,UAAW,SACXC,YAAa,SACbC,eAAgB,SAChBC,WAAY,SACZC,WAAY,SACZC,QAAS,SACTC,WAAY,SACZC,aAAc,SACdC,cAAe,SACfC,cAAe,SACfC,cAAe,SACfC,cAAe,SACfC,WAAY,SACZC,SAAU,SACVC,YAAa,SACbC,QAAS,SACTC,QAAS,SACTC,WAAY,SACZC,UAAW,SACXC,YAAa,SACbC,YAAa,SACbC,QAAS,SACTC,UAAW,SACXC,WAAY,SACZC,KAAM,SACNC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,MAAO,SACPC,YAAa,SACbC,SAAU,SACVC,QAAS,SACTC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,SAAU,SACVC,cAAe,SACfC,UAAW,SACXC,aAAc,SACdC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,qBAAsB,SACtBC,UAAW,SACXC,UAAW,SACXC,WAAY,SACZC,UAAW,SACXC,YAAa,SACbC,cAAe,SACfC,aAAc,SACdC,eAAgB,SAChBC,eAAgB,SAChBC,eAAgB,SAChBC,YAAa,SACbC,KAAM,SACNC,UAAW,SACXC,MAAO,SACPC,QAAS,SACTC,OAAQ,SACRC,iBAAkB,SAClBC,WAAY,SACZC,aAAc,SACdC,aAAc,SACdC,eAAgB,SAChBC,gBAAiB,SACjBC,kBAAmB,SACnBC,gBAAiB,SACjBC,gBAAiB,SACjBC,aAAc,SACdC,UAAW,SACXC,UAAW,SACXC,SAAU,SACVC,YAAa,SACbC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,UAAW,SACXC,OAAQ,SACRC,UAAW,SACXC,OAAQ,SACRC,cAAe,SACfC,UAAW,SACXC,cAAe,SACfC,cAAe,SACfC,WAAY,SACZC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,WAAY,SACZC,OAAQ,SACRC,IAAK,SACLC,UAAW,SACXC,UAAW,SACXC,YAAa,SACbC,OAAQ,SACRC,WAAY,SACZC,SAAU,SACVC,SAAU,SACVC,OAAQ,SACRC,OAAQ,SACRC,QAAS,SACTC,UAAW,SACXC,UAAW,SACXC,UAAW,SACXC,KAAM,SACNC,YAAa,SACbC,UAAW,SACXC,IAAK,SACLC,KAAM,SACNC,QAAS,SACTC,OAAQ,SACRC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,WAAY,SACZC,OAAQ,SACRC,YAAa,UAEbjM,GAAoB,cACxB,KAASkB,IAAKf,GAAMC,YACZD,EAAMC,YAAY8L,eAAehL,IACjClB,EAAiBmM,KAAKjL,EAG9BlB,GAAuBoM,OAAO,KAAOpM,EAAiBqM,KAAK,KAAO,WAAY,KAmE1EvM,EAASwM,MAAMC,MAAMC,QACrBC,MAAO,WACH,MAAO/K,OAEXgL,MAAO,WACH,MAAOhL,OAEXU,MAAO,WACH,MAAOV,MAAKiL,UAAUvK,SAE1BuK,QAAS,WACL,MAAOjL,OAEXkL,MAAO,WACH,MAAO,IAAMlL,KAAKU,SAEtByK,UAAW,WACP,GAAIC,GAAMpL,KAAKiL,SACf,OAAO,QAAUG,EAAI/K,EAAI,KAAO+K,EAAI9K,EAAI,KAAO8K,EAAI7K,EAAI,KAAO1C,IAAamC,KAAKqL,GAAGC,QAAQ,IAAM,KAErGC,UAAW,WACP,MAAIX,OAAMY,QAAQC,QAAQC,MAAQd,MAAMY,QAAQC,QAAQE,QAAU,EACvD3L,KAAKkL,QAETlL,KAAKmL,aAEhBS,OAAQ,SAAUC,GACd,MAAOA,KAAM7L,MAAc,OAAN6L,GAAc7L,KAAKmL,aAAepN,EAAW8N,GAAGV,aAEzEW,KAAM,SAAUC,GACZ,GAAU,MAANA,EACA,MAAOC,IAEX,IAAIC,GAAKjM,KAAKiL,SAEd,OADAc,GAAKA,EAAGd,UACD/J,KAAKE,KAAKF,KAAKgL,IAAoB,IAAfD,EAAG5L,EAAI0L,EAAG1L,GAAU,GAAKa,KAAKgL,IAAoB,KAAfD,EAAG3L,EAAIyL,EAAGzL,GAAW,GAAKY,KAAKgL,IAAoB,KAAfD,EAAG1L,EAAIwL,EAAGxL,GAAW,KAE3H4L,MAAO,WACH,GAAIN,GAAI7L,KAAKiL,SAIb,OAHIY,KAAM7L,OACN6L,EAAI,GAAIjN,GAAOiN,EAAExL,EAAGwL,EAAEvL,EAAGuL,EAAEtL,EAAGsL,EAAER,IAE7BQ,KAGXrN,EAAOJ,EAAO0M,QACdsB,KAAM,SAAU/L,EAAGC,EAAGC,EAAG8K,GACrBrL,KAAKK,EAAIA,EACTL,KAAKM,EAAIA,EACTN,KAAKO,EAAIA,EACTP,KAAKqL,EAAIA,GAEbN,MAAO,WAAA,GACkBsB,GAAGC,EACpBjM,EAAIL,KAAKK,EAAGC,EAAIN,KAAKM,EAAGC,EAAIP,KAAKO,EADjCgM,EAEErL,KAAKqL,IAAIlM,EAAGC,EAAGC,GAFZiM,EAGHtL,KAAKsL,IAAInM,EAAGC,EAAGC,GAHMkM,EAIvBD,EAJUE,EAKNF,EAAMD,CACd,OAAc,KAAVG,EACO,GAAIjN,GAAK,EAAG,EAAGgN,EAAGzM,KAAKqL,IAEtB,IAARmB,GACAF,EAAII,EAAQF,EAERH,EADAhM,GAAKmM,GACAlM,EAAIC,GAAKmM,EACPpM,GAAKkM,EACR,GAAKjM,EAAIF,GAAKqM,EAEd,GAAKrM,EAAIC,GAAKoM,EAEtBL,GAAK,GACG,EAAJA,IACAA,GAAK,OAGTC,EAAI,EACJD,EAAI,IAED,GAAI5M,GAAK4M,EAAGC,EAAGG,EAAGzM,KAAKqL,KAElCsB,MAAO,WAAA,GAGCN,GAAGC,EAICM,EANJvM,EAAIL,KAAKK,EAAGC,EAAIN,KAAKM,EAAGC,EAAIP,KAAKO,EACjCiM,EAAMtL,KAAKsL,IAAInM,EAAGC,EAAGC,GAAIgM,EAAMrL,KAAKqL,IAAIlM,EAAGC,EAAGC,GACxCsM,GAAKL,EAAMD,GAAO,CAC5B,IAAIC,GAAOD,EACPF,EAAIC,EAAI,MACL,CAGH,OAFIM,EAAIJ,EAAMD,EACdD,EAAIO,EAAI,GAAMD,GAAK,EAAIJ,EAAMD,GAAOK,GAAKJ,EAAMD,GACvCC,GACR,IAAKnM,GACDgM,GAAK/L,EAAIC,GAAKqM,GAASrM,EAAJD,EAAQ,EAAI,EAC/B,MACJ,KAAKA,GACD+L,GAAK9L,EAAIF,GAAKuM,EAAI,CAClB,MACJ,KAAKrM,GACD8L,GAAKhM,EAAIC,GAAKsM,EAAI,EAGtBP,GAAK,GACLC,GAAK,IACLO,GAAK,IAET,MAAO,IAAInN,GAAK2M,EAAGC,EAAGO,EAAG7M,KAAKqL,IAElCJ,QAAS,WACL,MAAO,IAAIrM,GAAgB,IAAToB,KAAKK,EAAkB,IAATL,KAAKM,EAAkB,IAATN,KAAKO,EAASP,KAAKqL,MAGrEzM,EAASJ,EAAKsM,QACdsB,KAAM,SAAU/L,EAAGC,EAAGC,EAAG8K,GACrBrL,KAAKK,EAAIa,KAAKD,MAAMZ,GACpBL,KAAKM,EAAIY,KAAKD,MAAMX,GACpBN,KAAKO,EAAIW,KAAKD,MAAMV,GACpBP,KAAKqL,EAAIA,GAEbL,MAAO,WACH,MAAO,IAAIxM,GAAKwB,KAAKK,EAAI,IAAKL,KAAKM,EAAI,IAAKN,KAAKO,EAAI,IAAKP,KAAKqL,IAEnEN,MAAO,WACH,MAAO/K,MAAKgL,QAAQD,SAExB4B,MAAO,WACH,MAAO3M,MAAKgL,QAAQ2B,SAExBjM,MAAO,WACH,MAAO5B,GAAIkB,KAAKK,EAAG,GAAKvB,EAAIkB,KAAKM,EAAG,GAAKxB,EAAIkB,KAAKO,EAAG,IAEzD0K,QAAS,WACL,MAAOjL,SAGXP,EAAOrB,EAAO0M,QACdsB,KAAM,SAAUC,EAAGC,EAAGG,EAAGpB,GACrBrL,KAAKqM,EAAIA,EACTrM,KAAKsM,EAAIA,EACTtM,KAAKyM,EAAIA,EACTzM,KAAKqL,EAAIA,GAEbL,MAAO,WAAA,GAECxL,GAAGa,EAAGC,EAAGC,EAAG7C,EAAG2B,EAAGC,EAAGC,EADrB8M,EAAIrM,KAAKqM,EAAGC,EAAItM,KAAKsM,EAAGG,EAAIzM,KAAKyM,CAErC,IAAU,IAANH,EACAjM,EAAIC,EAAIC,EAAIkM,MAQZ,QANAJ,GAAK,GACL7M,EAAI0B,KAAK4L,MAAMT,GACf3O,EAAI2O,EAAI7M,EACRH,EAAIoN,GAAK,EAAIH,GACbhN,EAAImN,GAAK,EAAIH,EAAI5O,GACjB6B,EAAIkN,GAAK,EAAIH,GAAK,EAAI5O,IACd8B,GACR,IAAK,GACDa,EAAIoM,EACJnM,EAAIf,EACJgB,EAAIlB,CACJ,MACJ,KAAK,GACDgB,EAAIf,EACJgB,EAAImM,EACJlM,EAAIlB,CACJ,MACJ,KAAK,GACDgB,EAAIhB,EACJiB,EAAImM,EACJlM,EAAIhB,CACJ,MACJ,KAAK,GACDc,EAAIhB,EACJiB,EAAIhB,EACJiB,EAAIkM,CACJ,MACJ,KAAK,GACDpM,EAAId,EACJe,EAAIjB,EACJkB,EAAIkM,CACJ,MACJ,SACIpM,EAAIoM,EACJnM,EAAIjB,EACJkB,EAAIjB,EAIZ,MAAO,IAAId,GAAK6B,EAAGC,EAAGC,EAAGP,KAAKqL,IAElCsB,MAAO,WACH,MAAO3M,MAAKgL,QAAQ2B,SAExB1B,QAAS,WACL,MAAOjL,MAAKgL,QAAQC,aAGxBvL,EAAOtB,EAAO0M,QACdsB,KAAM,SAAUC,EAAGC,EAAGO,EAAGxB,GACrBrL,KAAKqM,EAAIA,EACTrM,KAAKsM,EAAIA,EACTtM,KAAK6M,EAAIA,EACT7M,KAAKqL,EAAIA,GAEbL,MAAO,WAAA,GAEC3K,GAAGC,EAAGC,EAOFjB,EACAD,EATJgN,EAAIrM,KAAKqM,EAAGC,EAAItM,KAAKsM,EAAGO,EAAI7M,KAAK6M,CAcrC,OAZU,KAANP,EACAjM,EAAIC,EAAIC,EAAIsM,GAEZR,GAAK,IACLC,GAAK,IACLO,GAAK,IACDvN,EAAQ,GAAJuN,EAAUA,GAAK,EAAIP,GAAKO,EAAIP,EAAIO,EAAIP,EACxCjN,EAAI,EAAIwN,EAAIvN,EAChBe,EAAIjB,EAAQC,EAAGC,EAAG+M,EAAI,EAAI,GAC1B/L,EAAIlB,EAAQC,EAAGC,EAAG+M,GAClB9L,EAAInB,EAAQC,EAAGC,EAAG+M,EAAI,EAAI,IAEvB,GAAI7N,GAAK6B,EAAGC,EAAGC,EAAGP,KAAKqL,IAElCN,MAAO,WACH,MAAO/K,MAAKgL,QAAQD,SAExBE,QAAS,WACL,MAAOjL,MAAKgL,QAAQC,aAG5BxM,EAAMsO,UAAY,SAAU1M,EAAGC,EAAGC,EAAG8K,GACjC,MAAO,IAAIzM,GAAOyB,EAAGC,EAAGC,EAAQ,MAAL8K,EAAYA,EAAI,IAE/C5M,EAAMuO,QAAU,SAAU3M,EAAGC,EAAGC,EAAG8K,GAC/B,MAAO,IAAI7M,GAAK6B,EAAGC,EAAGC,EAAQ,MAAL8K,EAAYA,EAAI,IAE7C5M,EAAMwO,QAAU,SAAUZ,EAAGC,EAAGG,EAAGpB,GAC/B,MAAO,IAAI5L,GAAK4M,EAAGC,EAAGG,EAAQ,MAALpB,EAAYA,EAAI,IAE7C5M,EAAMyO,QAAU,SAAUb,EAAGC,EAAGO,EAAGxB,GAC/B,MAAO,IAAI3L,GAAK2M,EAAGC,EAAGO,EAAQ,MAALxB,EAAYA,EAAI,IAE7CT,MAAMnM,MAAQA,EACdmM,MAAM7M,WAAaA,GACrBoP,OAAOvC,MAAMwC,OAAQvP,WAAYC,WACnB,kBAAVH,SAAwBA,OAAO0P,IAAM1P,OAAS,SAAU2P,EAAIC,EAAIC,IACrEA,GAAMD","file":"kendo.color.min.js","sourcesContent":["/*!\n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n\n*/\n(function (f, define) {\n    define('kendo.color', ['kendo.core'], f);\n}(function () {\n    var __meta__ = {\n        id: 'color',\n        name: 'Color utils',\n        category: 'framework',\n        advanced: true,\n        description: 'Color utilities used across components',\n        depends: ['core']\n    };\n    (function ($, parseFloat, parseInt) {\n        var Color = function (value) {\n            var color = this, formats = Color.formats, re, processor, parts, i, channels;\n            if (arguments.length === 1) {\n                value = color.resolveColor(value);\n                for (i = 0; i < formats.length; i++) {\n                    re = formats[i].re;\n                    processor = formats[i].process;\n                    parts = re.exec(value);\n                    if (parts) {\n                        channels = processor(parts);\n                        color.r = channels[0];\n                        color.g = channels[1];\n                        color.b = channels[2];\n                    }\n                }\n            } else {\n                color.r = arguments[0];\n                color.g = arguments[1];\n                color.b = arguments[2];\n            }\n            color.r = color.normalizeByte(color.r);\n            color.g = color.normalizeByte(color.g);\n            color.b = color.normalizeByte(color.b);\n        };\n        Color.prototype = {\n            toHex: function () {\n                var color = this, pad = color.padDigit, r = color.r.toString(16), g = color.g.toString(16), b = color.b.toString(16);\n                return '#' + pad(r) + pad(g) + pad(b);\n            },\n            resolveColor: function (value) {\n                value = value || 'black';\n                if (value.charAt(0) == '#') {\n                    value = value.substr(1, 6);\n                }\n                value = value.replace(/ /g, '');\n                value = value.toLowerCase();\n                value = Color.namedColors[value] || value;\n                return value;\n            },\n            normalizeByte: function (value) {\n                return value < 0 || isNaN(value) ? 0 : value > 255 ? 255 : value;\n            },\n            padDigit: function (value) {\n                return value.length === 1 ? '0' + value : value;\n            },\n            brightness: function (value) {\n                var color = this, round = Math.round;\n                color.r = round(color.normalizeByte(color.r * value));\n                color.g = round(color.normalizeByte(color.g * value));\n                color.b = round(color.normalizeByte(color.b * value));\n                return color;\n            },\n            percBrightness: function () {\n                var color = this;\n                return Math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n            }\n        };\n        Color.formats = [\n            {\n                re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n                process: function (parts) {\n                    return [\n                        parseInt(parts[1], 10),\n                        parseInt(parts[2], 10),\n                        parseInt(parts[3], 10)\n                    ];\n                }\n            },\n            {\n                re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n                process: function (parts) {\n                    return [\n                        parseInt(parts[1], 16),\n                        parseInt(parts[2], 16),\n                        parseInt(parts[3], 16)\n                    ];\n                }\n            },\n            {\n                re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n                process: function (parts) {\n                    return [\n                        parseInt(parts[1] + parts[1], 16),\n                        parseInt(parts[2] + parts[2], 16),\n                        parseInt(parts[3] + parts[3], 16)\n                    ];\n                }\n            }\n        ];\n        Color.namedColors = {\n            aliceblue: 'f0f8ff',\n            antiquewhite: 'faebd7',\n            aqua: '00ffff',\n            aquamarine: '7fffd4',\n            azure: 'f0ffff',\n            beige: 'f5f5dc',\n            bisque: 'ffe4c4',\n            black: '000000',\n            blanchedalmond: 'ffebcd',\n            blue: '0000ff',\n            blueviolet: '8a2be2',\n            brown: 'a52a2a',\n            burlywood: 'deb887',\n            cadetblue: '5f9ea0',\n            chartreuse: '7fff00',\n            chocolate: 'd2691e',\n            coral: 'ff7f50',\n            cornflowerblue: '6495ed',\n            cornsilk: 'fff8dc',\n            crimson: 'dc143c',\n            cyan: '00ffff',\n            darkblue: '00008b',\n            darkcyan: '008b8b',\n            darkgoldenrod: 'b8860b',\n            darkgray: 'a9a9a9',\n            darkgrey: 'a9a9a9',\n            darkgreen: '006400',\n            darkkhaki: 'bdb76b',\n            darkmagenta: '8b008b',\n            darkolivegreen: '556b2f',\n            darkorange: 'ff8c00',\n            darkorchid: '9932cc',\n            darkred: '8b0000',\n            darksalmon: 'e9967a',\n            darkseagreen: '8fbc8f',\n            darkslateblue: '483d8b',\n            darkslategray: '2f4f4f',\n            darkslategrey: '2f4f4f',\n            darkturquoise: '00ced1',\n            darkviolet: '9400d3',\n            deeppink: 'ff1493',\n            deepskyblue: '00bfff',\n            dimgray: '696969',\n            dimgrey: '696969',\n            dodgerblue: '1e90ff',\n            firebrick: 'b22222',\n            floralwhite: 'fffaf0',\n            forestgreen: '228b22',\n            fuchsia: 'ff00ff',\n            gainsboro: 'dcdcdc',\n            ghostwhite: 'f8f8ff',\n            gold: 'ffd700',\n            goldenrod: 'daa520',\n            gray: '808080',\n            grey: '808080',\n            green: '008000',\n            greenyellow: 'adff2f',\n            honeydew: 'f0fff0',\n            hotpink: 'ff69b4',\n            indianred: 'cd5c5c',\n            indigo: '4b0082',\n            ivory: 'fffff0',\n            khaki: 'f0e68c',\n            lavender: 'e6e6fa',\n            lavenderblush: 'fff0f5',\n            lawngreen: '7cfc00',\n            lemonchiffon: 'fffacd',\n            lightblue: 'add8e6',\n            lightcoral: 'f08080',\n            lightcyan: 'e0ffff',\n            lightgoldenrodyellow: 'fafad2',\n            lightgray: 'd3d3d3',\n            lightgrey: 'd3d3d3',\n            lightgreen: '90ee90',\n            lightpink: 'ffb6c1',\n            lightsalmon: 'ffa07a',\n            lightseagreen: '20b2aa',\n            lightskyblue: '87cefa',\n            lightslategray: '778899',\n            lightslategrey: '778899',\n            lightsteelblue: 'b0c4de',\n            lightyellow: 'ffffe0',\n            lime: '00ff00',\n            limegreen: '32cd32',\n            linen: 'faf0e6',\n            magenta: 'ff00ff',\n            maroon: '800000',\n            mediumaquamarine: '66cdaa',\n            mediumblue: '0000cd',\n            mediumorchid: 'ba55d3',\n            mediumpurple: '9370d8',\n            mediumseagreen: '3cb371',\n            mediumslateblue: '7b68ee',\n            mediumspringgreen: '00fa9a',\n            mediumturquoise: '48d1cc',\n            mediumvioletred: 'c71585',\n            midnightblue: '191970',\n            mintcream: 'f5fffa',\n            mistyrose: 'ffe4e1',\n            moccasin: 'ffe4b5',\n            navajowhite: 'ffdead',\n            navy: '000080',\n            oldlace: 'fdf5e6',\n            olive: '808000',\n            olivedrab: '6b8e23',\n            orange: 'ffa500',\n            orangered: 'ff4500',\n            orchid: 'da70d6',\n            palegoldenrod: 'eee8aa',\n            palegreen: '98fb98',\n            paleturquoise: 'afeeee',\n            palevioletred: 'd87093',\n            papayawhip: 'ffefd5',\n            peachpuff: 'ffdab9',\n            peru: 'cd853f',\n            pink: 'ffc0cb',\n            plum: 'dda0dd',\n            powderblue: 'b0e0e6',\n            purple: '800080',\n            red: 'ff0000',\n            rosybrown: 'bc8f8f',\n            royalblue: '4169e1',\n            saddlebrown: '8b4513',\n            salmon: 'fa8072',\n            sandybrown: 'f4a460',\n            seagreen: '2e8b57',\n            seashell: 'fff5ee',\n            sienna: 'a0522d',\n            silver: 'c0c0c0',\n            skyblue: '87ceeb',\n            slateblue: '6a5acd',\n            slategray: '708090',\n            slategrey: '708090',\n            snow: 'fffafa',\n            springgreen: '00ff7f',\n            steelblue: '4682b4',\n            tan: 'd2b48c',\n            teal: '008080',\n            thistle: 'd8bfd8',\n            tomato: 'ff6347',\n            turquoise: '40e0d0',\n            violet: 'ee82ee',\n            wheat: 'f5deb3',\n            white: 'ffffff',\n            whitesmoke: 'f5f5f5',\n            yellow: 'ffff00',\n            yellowgreen: '9acd32'\n        };\n        var namedColorRegexp = ['transparent'];\n        for (var i in Color.namedColors) {\n            if (Color.namedColors.hasOwnProperty(i)) {\n                namedColorRegexp.push(i);\n            }\n        }\n        namedColorRegexp = new RegExp('^(' + namedColorRegexp.join('|') + ')(\\\\W|$)', 'i');\n        function parseColor(color, nothrow) {\n            var m, ret;\n            if (color == null || color == 'none') {\n                return null;\n            }\n            if (color instanceof _Color) {\n                return color;\n            }\n            color = color.toLowerCase();\n            if (m = namedColorRegexp.exec(color)) {\n                if (m[1] == 'transparent') {\n                    color = new _RGB(1, 1, 1, 0);\n                } else {\n                    color = parseColor(Color.namedColors[m[1]], nothrow);\n                }\n                color.match = [m[1]];\n                return color;\n            }\n            if (m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\\b/i.exec(color)) {\n                ret = new _Bytes(parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), 1);\n            } else if (m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\\b/i.exec(color)) {\n                ret = new _Bytes(parseInt(m[1] + m[1], 16), parseInt(m[2] + m[2], 16), parseInt(m[3] + m[3], 16), 1);\n            } else if (m = /^rgb\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*\\)/.exec(color)) {\n                ret = new _Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), 1);\n            } else if (m = /^rgba\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color)) {\n                ret = new _Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), parseFloat(m[4]));\n            } else if (m = /^rgb\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*\\)/.exec(color)) {\n                ret = new _RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, 1);\n            } else if (m = /^rgba\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color)) {\n                ret = new _RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, parseFloat(m[4]));\n            }\n            if (ret) {\n                ret.match = m;\n            } else if (!nothrow) {\n                throw new Error('Cannot parse color: ' + color);\n            }\n            return ret;\n        }\n        function hex(n, width, pad) {\n            if (!pad) {\n                pad = '0';\n            }\n            n = n.toString(16);\n            while (width > n.length) {\n                n = '0' + n;\n            }\n            return n;\n        }\n        function hue2rgb(p, q, t) {\n            if (t < 0) {\n                t += 1;\n            }\n            if (t > 1) {\n                t -= 1;\n            }\n            if (t < 1 / 6) {\n                return p + (q - p) * 6 * t;\n            }\n            if (t < 1 / 2) {\n                return q;\n            }\n            if (t < 2 / 3) {\n                return p + (q - p) * (2 / 3 - t) * 6;\n            }\n            return p;\n        }\n        var _Color = kendo.Class.extend({\n            toHSV: function () {\n                return this;\n            },\n            toRGB: function () {\n                return this;\n            },\n            toHex: function () {\n                return this.toBytes().toHex();\n            },\n            toBytes: function () {\n                return this;\n            },\n            toCss: function () {\n                return '#' + this.toHex();\n            },\n            toCssRgba: function () {\n                var rgb = this.toBytes();\n                return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat((+this.a).toFixed(3)) + ')';\n            },\n            toDisplay: function () {\n                if (kendo.support.browser.msie && kendo.support.browser.version < 9) {\n                    return this.toCss();\n                }\n                return this.toCssRgba();\n            },\n            equals: function (c) {\n                return c === this || c !== null && this.toCssRgba() == parseColor(c).toCssRgba();\n            },\n            diff: function (c2) {\n                if (c2 == null) {\n                    return NaN;\n                }\n                var c1 = this.toBytes();\n                c2 = c2.toBytes();\n                return Math.sqrt(Math.pow((c1.r - c2.r) * 0.3, 2) + Math.pow((c1.g - c2.g) * 0.59, 2) + Math.pow((c1.b - c2.b) * 0.11, 2));\n            },\n            clone: function () {\n                var c = this.toBytes();\n                if (c === this) {\n                    c = new _Bytes(c.r, c.g, c.b, c.a);\n                }\n                return c;\n            }\n        });\n        var _RGB = _Color.extend({\n            init: function (r, g, b, a) {\n                this.r = r;\n                this.g = g;\n                this.b = b;\n                this.a = a;\n            },\n            toHSV: function () {\n                var min, max, delta, h, s, v;\n                var r = this.r, g = this.g, b = this.b;\n                min = Math.min(r, g, b);\n                max = Math.max(r, g, b);\n                v = max;\n                delta = max - min;\n                if (delta === 0) {\n                    return new _HSV(0, 0, v, this.a);\n                }\n                if (max !== 0) {\n                    s = delta / max;\n                    if (r == max) {\n                        h = (g - b) / delta;\n                    } else if (g == max) {\n                        h = 2 + (b - r) / delta;\n                    } else {\n                        h = 4 + (r - g) / delta;\n                    }\n                    h *= 60;\n                    if (h < 0) {\n                        h += 360;\n                    }\n                } else {\n                    s = 0;\n                    h = -1;\n                }\n                return new _HSV(h, s, v, this.a);\n            },\n            toHSL: function () {\n                var r = this.r, g = this.g, b = this.b;\n                var max = Math.max(r, g, b), min = Math.min(r, g, b);\n                var h, s, l = (max + min) / 2;\n                if (max == min) {\n                    h = s = 0;\n                } else {\n                    var d = max - min;\n                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                    switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                    }\n                    h *= 60;\n                    s *= 100;\n                    l *= 100;\n                }\n                return new _HSL(h, s, l, this.a);\n            },\n            toBytes: function () {\n                return new _Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);\n            }\n        });\n        var _Bytes = _RGB.extend({\n            init: function (r, g, b, a) {\n                this.r = Math.round(r);\n                this.g = Math.round(g);\n                this.b = Math.round(b);\n                this.a = a;\n            },\n            toRGB: function () {\n                return new _RGB(this.r / 255, this.g / 255, this.b / 255, this.a);\n            },\n            toHSV: function () {\n                return this.toRGB().toHSV();\n            },\n            toHSL: function () {\n                return this.toRGB().toHSL();\n            },\n            toHex: function () {\n                return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);\n            },\n            toBytes: function () {\n                return this;\n            }\n        });\n        var _HSV = _Color.extend({\n            init: function (h, s, v, a) {\n                this.h = h;\n                this.s = s;\n                this.v = v;\n                this.a = a;\n            },\n            toRGB: function () {\n                var h = this.h, s = this.s, v = this.v;\n                var i, r, g, b, f, p, q, t;\n                if (s === 0) {\n                    r = g = b = v;\n                } else {\n                    h /= 60;\n                    i = Math.floor(h);\n                    f = h - i;\n                    p = v * (1 - s);\n                    q = v * (1 - s * f);\n                    t = v * (1 - s * (1 - f));\n                    switch (i) {\n                    case 0:\n                        r = v;\n                        g = t;\n                        b = p;\n                        break;\n                    case 1:\n                        r = q;\n                        g = v;\n                        b = p;\n                        break;\n                    case 2:\n                        r = p;\n                        g = v;\n                        b = t;\n                        break;\n                    case 3:\n                        r = p;\n                        g = q;\n                        b = v;\n                        break;\n                    case 4:\n                        r = t;\n                        g = p;\n                        b = v;\n                        break;\n                    default:\n                        r = v;\n                        g = p;\n                        b = q;\n                        break;\n                    }\n                }\n                return new _RGB(r, g, b, this.a);\n            },\n            toHSL: function () {\n                return this.toRGB().toHSL();\n            },\n            toBytes: function () {\n                return this.toRGB().toBytes();\n            }\n        });\n        var _HSL = _Color.extend({\n            init: function (h, s, l, a) {\n                this.h = h;\n                this.s = s;\n                this.l = l;\n                this.a = a;\n            },\n            toRGB: function () {\n                var h = this.h, s = this.s, l = this.l;\n                var r, g, b;\n                if (s === 0) {\n                    r = g = b = l;\n                } else {\n                    h /= 360;\n                    s /= 100;\n                    l /= 100;\n                    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                    var p = 2 * l - q;\n                    r = hue2rgb(p, q, h + 1 / 3);\n                    g = hue2rgb(p, q, h);\n                    b = hue2rgb(p, q, h - 1 / 3);\n                }\n                return new _RGB(r, g, b, this.a);\n            },\n            toHSV: function () {\n                return this.toRGB().toHSV();\n            },\n            toBytes: function () {\n                return this.toRGB().toBytes();\n            }\n        });\n        Color.fromBytes = function (r, g, b, a) {\n            return new _Bytes(r, g, b, a != null ? a : 1);\n        };\n        Color.fromRGB = function (r, g, b, a) {\n            return new _RGB(r, g, b, a != null ? a : 1);\n        };\n        Color.fromHSV = function (h, s, v, a) {\n            return new _HSV(h, s, v, a != null ? a : 1);\n        };\n        Color.fromHSL = function (h, s, l, a) {\n            return new _HSL(h, s, l, a != null ? a : 1);\n        };\n        kendo.Color = Color;\n        kendo.parseColor = parseColor;\n    }(window.kendo.jQuery, parseFloat, parseInt));\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));"],"sourceRoot":"/source/"}