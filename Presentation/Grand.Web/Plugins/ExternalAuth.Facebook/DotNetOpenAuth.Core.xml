<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.Core</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.Assumes">
            <summary>
            Internal state consistency checks that throw an internal error exception when they fail.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.True(System.Boolean,System.String)">
            <summary>
            Validates some expression describing the acceptable condition evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an internal error exception.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Validates some expression describing the acceptable condition evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an internal error exception.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.Fail(System.String)">
            <summary>
            Throws an internal error exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.NotReachable">
            <summary>
            Throws an internal error exception.
            </summary>
            <returns>Nothing.  This method always throws.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Assumes.InternalErrorException">
            <summary>
            An internal error exception that should never be caught.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.InternalErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Assumes.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.InternalErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Assumes.InternalErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Assumes.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Assumes.InternalErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Base64WebEncoder">
            <summary>
            A message part encoder that translates between <c>byte[]</c> and base64web encoded strings.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder">
            <summary>
            An interface describing how various objects can be serialized and deserialized between their object and string forms.
            </summary>
            <remarks>
            Implementations of this interface must include a default constructor and must be thread-safe.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>The <paramref name="value"/> in string form, ready for message transport.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>The deserialized form of the given string.</returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Base64WebEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>The <paramref name="value"/> in string form, ready for message transport.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Base64WebEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>The deserialized form of the given string.</returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper">
            <summary>
            Provides RSA encryption of symmetric keys to protect them from a theft of
            the persistent store.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore">
            <summary>
            A persistent store for rotating symmetric cryptographic keys.
            </summary>
            <remarks>
            Implementations should persist it in such a way that the keys are shared across all servers
            on a web farm, where applicable.  
            The store should consider protecting the persistent store against theft resulting in the loss
            of the confidentiality of the keys.  One possible mitigation is to asymmetrically encrypt
            each key using a certificate installed in the server's certificate store.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore.GetKey(System.String,System.String)">
            <summary>
            Gets the key in a given bucket and handle.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
            <returns>The cryptographic key, or <c>null</c> if no matching key was found.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore.GetKeys(System.String)">
            <summary>
            Gets a sequence of existing keys within a given bucket.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <returns>A sequence of handles and keys, ordered by descending <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore.StoreKey(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Stores a cryptographic key.
            </summary>
            <param name="bucket">The name of the bucket to store the key in.  Case sensitive.</param>
            <param name="handle">The handle to the key, unique within the bucket.  Case sensitive.</param>
            <param name="key">The key to store.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException">Thrown in the event of a conflict with an existing key in the same bucket and with the same handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore.RemoveKey(System.String,System.String)">
            <summary>
            Removes the key.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.dataStore">
            <summary>
            The persistent store for asymmetrically encrypted symmetric keys.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.cache">
            <summary>
            The memory cache of decrypted keys.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.asymmetricCrypto">
            <summary>
            The asymmetric algorithm to use encrypting/decrypting the symmetric keys.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper"/> class.
            </summary>
            <param name="dataStore">The data store.</param>
            <param name="asymmetricCrypto">The asymmetric protection to apply to symmetric keys.  Must include the private key.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.GetKey(System.String,System.String)">
            <summary>
            Gets the key in a given bucket and handle.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
            <returns>
            The cryptographic key, or <c>null</c> if no matching key was found.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.GetKeys(System.String)">
            <summary>
            Gets a sequence of existing keys within a given bucket.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <returns>
            A sequence of handles and keys, ordered by descending <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.StoreKey(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Stores a cryptographic key.
            </summary>
            <param name="bucket">The name of the bucket to store the key in.  Case sensitive.</param>
            <param name="handle">The handle to the key, unique within the bucket.  Case sensitive.</param>
            <param name="decryptedCryptoKey">The key to store.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.RemoveKey(System.String,System.String)">
            <summary>
            Removes the key.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.Decrypt(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="handle">The handle.</param>
            <param name="encryptedCryptoKey">The encrypted key.</param>
            <returns>
            The decrypted key.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.CachedCryptoKey">
            <summary>
            An encrypted key and its decrypted equivalent.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.CryptoKey">
            <summary>
            A cryptographic key and metadata concerning it.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.CryptoKey.key">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.Key"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.CryptoKey.expiresUtc">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKey.#ctor(System.Byte[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKey"/> class.
            </summary>
            <param name="key">The cryptographic key.</param>
            <param name="expiresUtc">The expires UTC.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc">
            <summary>
            Gets the expiration date of this key (UTC time).
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.CachedCryptoKey.#ctor(DotNetOpenAuth.Messaging.Bindings.CryptoKey,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.CachedCryptoKey"/> class.
            </summary>
            <param name="encrypted">The encrypted key.</param>
            <param name="decrypted">The decrypted key.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.CachedCryptoKey.ObjectInvariant">
            <summary>
            Invariant conditions.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.AsymmetricCryptoKeyStoreWrapper.CachedCryptoKey.EncryptedKey">
            <summary>
            Gets the encrypted key.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException">
            <summary>
            Thrown by a hosting application or web site when a cryptographic key is created with a
            bucket and handle that conflicts with a previously stored and unexpired key.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException"/> class.
            </summary>
            <param name="inner">The inner exception to include.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStoreContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStoreContract.DotNetOpenAuth#Messaging#Bindings#ICryptoKeyStore#GetKey(System.String,System.String)">
            <summary>
            Gets the key in a given bucket and handle.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
            <returns>
            The cryptographic key, or <c>null</c> if no matching key was found.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStoreContract.DotNetOpenAuth#Messaging#Bindings#ICryptoKeyStore#GetKeys(System.String)">
            <summary>
            Gets a sequence of existing keys within a given bucket.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <returns>
            A sequence of handles and keys, ordered by descending <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStoreContract.DotNetOpenAuth#Messaging#Bindings#ICryptoKeyStore#StoreKey(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Stores a cryptographic key.
            </summary>
            <param name="bucket">The name of the bucket to store the key in.  Case sensitive.</param>
            <param name="handle">The handle to the key, unique within the bucket.  Case sensitive.</param>
            <param name="key">The key to store.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException">Thrown in the event of a conflict with an existing key in the same bucket and with the same handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStoreContract.DotNetOpenAuth#Messaging#Bindings#ICryptoKeyStore#RemoveKey(System.String,System.String)">
            <summary>
            Removes the key.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore">
            <summary>
            A in-memory store of crypto keys.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.cleaningInterval">
            <summary>
            How frequently to check for and remove expired secrets.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.store">
            <summary>
            An in-memory cache of decrypted symmetric keys.
            </summary>
            <remarks>
            The key is the bucket name.  The value is a dictionary whose key is the handle and whose value is the cached key.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.lastCleaning">
            <summary>
            The last time the cache had expired keys removed from it.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.GetKey(System.String,System.String)">
            <summary>
            Gets the key in a given bucket and handle.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
            <returns>
            The cryptographic key, or <c>null</c> if no matching key was found.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.GetKeys(System.String)">
            <summary>
            Gets a sequence of existing keys within a given bucket.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <returns>
            A sequence of handles and keys, ordered by descending <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.StoreKey(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Stores a cryptographic key.
            </summary>
            <param name="bucket">The name of the bucket to store the key in.  Case sensitive.</param>
            <param name="handle">The handle to the key, unique within the bucket.  Case sensitive.</param>
            <param name="key">The key to store.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException">Thrown in the event of a conflict with an existing key in the same bucket and with the same handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.RemoveKey(System.String,System.String)">
            <summary>
            Removes the key.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.CleanExpiredKeysFromMemoryCacheIfAppropriate">
            <summary>
            Cleans the expired keys from memory cache if the cleaning interval has passed.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.MemoryCryptoKeyStore.ClearExpiredKeysFromMemoryCache">
            <summary>
            Weeds out expired keys from the in-memory cache.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1">
            <summary>
            A compact binary <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> serialization class.
            </summary>
            <typeparam name="T">The <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>-derived type to serialize/deserialize.</typeparam>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.DataBagFormatterBase`1">
            <summary>
            A serializer for <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>-derived types
            </summary>
            <typeparam name="T">The DataBag-derived type that is to be serialized/deserialized.</typeparam>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDataBagFormatter`1">
            <summary>
            A serializer for <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>-derived types
            </summary>
            <typeparam name="T">The DataBag-derived type that is to be serialized/deserialized.</typeparam>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDataBagFormatter`1.Serialize(`0)">
            <summary>
            Serializes the specified message.
            </summary>
            <param name="message">The message to serialize.  Must not be null.</param>
            <returns>A non-null, non-empty value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDataBagFormatter`1.Deserialize(`0,System.String,DotNetOpenAuth.Messaging.IProtocolMessage,System.String)">
            <summary>
            Deserializes a <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>.
            </summary>
            <param name="message">The instance to deserialize into</param>
            <param name="data">The serialized form of the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> to deserialize.  Must not be null or empty.</param>
            <param name="containingMessage">The message that contains the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> serialized value.  May be null if no carrying message is applicable.</param>
            <param name="messagePartName">The name of the parameter whose value is to be deserialized.  Used for error message generation, but may be <c>null</c>.</param>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.NonceLength">
            <summary>
            The length of the nonce to include in tokens that can be decoded once only.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.MessageDescriptions">
            <summary>
            The message description cache to use for data bag types.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.minimumAge">
            <summary>
            The minimum allowable lifetime for the key used to encrypt/decrypt or sign this databag.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.cryptoKeyStore">
            <summary>
            The symmetric key store with the secret used for signing/encryption of verification codes and refresh tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.cryptoKeyBucket">
            <summary>
            The bucket for symmetric keys.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.asymmetricSigning">
            <summary>
            The crypto to use for signing access tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.asymmetricEncrypting">
            <summary>
            The crypto to use for encrypting access tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.signed">
            <summary>
            A value indicating whether the data in this instance will be protected against tampering.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.decodeOnceOnly">
            <summary>
            The nonce store to use to ensure that this instance is only decoded once.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.maximumAge">
            <summary>
            The maximum age of a token that can be decoded; useful only when <see cref="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.decodeOnceOnly"/> is <c>true</c>.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.encrypted">
            <summary>
            A value indicating whether the data in this instance will be protected against eavesdropping.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.compressed">
            <summary>
            A value indicating whether the data in this instance will be GZip'd.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider,System.Boolean,System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.DataBagFormatterBase`1"/> class.
            </summary>
            <param name="signingKey">The crypto service provider with the asymmetric key to use for signing or verifying the token.</param>
            <param name="encryptingKey">The crypto service provider with the asymmetric key to use for encrypting or decrypting the token.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.DataBagFormatterBase`1"/> class.
            </summary>
            <param name="cryptoKeyStore">The crypto key store used when signing or encrypting.</param>
            <param name="bucket">The bucket in which symmetric keys are stored for signing/encrypting data.</param>
            <param name="signed">A value indicating whether the data in this instance will be protected against tampering.</param>
            <param name="encrypted">A value indicating whether the data in this instance will be protected against eavesdropping.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="minimumAge">The required minimum lifespan within which this token must be decodable and verifiable; useful only when <paramref name="signed"/> and/or <paramref name="encrypted"/> is true.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.DataBagFormatterBase`1"/> class.
            </summary>
            <param name="signed">A value indicating whether the data in this instance will be protected against tampering.</param>
            <param name="encrypted">A value indicating whether the data in this instance will be protected against eavesdropping.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.Serialize(`0)">
            <summary>
            Serializes the specified message, including compression, encryption, signing, and nonce handling where applicable.
            </summary>
            <param name="message">The message to serialize.  Must not be null.</param>
            <returns>A non-null, non-empty value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.Deserialize(`0,System.String,DotNetOpenAuth.Messaging.IProtocolMessage,System.String)">
            <summary>
            Deserializes a <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>, including decompression, decryption, signature and nonce validation where applicable.
            </summary>
            <param name="message">The instance to initialize with deserialized data.</param>
            <param name="value">The serialized form of the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> to deserialize.  Must not be null or empty.</param>
            <param name="containingMessage">The message that contains the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> serialized value.  May be null if no carrying message is applicable.</param>
            <param name="messagePartName">The name of the parameter whose value is to be deserialized.  Used for error message generation, but may be <c>null</c>.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.SerializeCore(`0)">
            <summary>
            Serializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance to a buffer.
            </summary>
            <param name="message">The message.</param>
            <returns>The buffer containing the serialized data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.DeserializeCore(`0,System.Byte[])">
            <summary>
            Deserializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance from a buffer.
            </summary>
            <param name="message">The message instance to initialize with data from the buffer.</param>
            <param name="data">The data buffer.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.IsSignatureValid(System.Byte[],System.Byte[],System.String)">
            <summary>
            Determines whether the signature on this instance is valid.
            </summary>
            <param name="signedData">The signed data.</param>
            <param name="signature">The signature.</param>
            <param name="symmetricSecretHandle">The symmetric secret handle.  <c>null</c> when using an asymmetric algorithm.</param>
            <returns>
              <c>true</c> if the signature is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.CalculateSignature(System.Byte[],System.String)">
            <summary>
            Calculates the signature for the data in this verification code.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <param name="symmetricSecretHandle">The symmetric secret handle.  <c>null</c> when using an asymmetric algorithm.</param>
            <returns>
            The calculated signature.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.Encrypt(System.Byte[],System.String@)">
            <summary>
            Encrypts the specified value using either the symmetric or asymmetric encryption algorithm as appropriate.
            </summary>
            <param name="value">The value.</param>
            <param name="symmetricSecretHandle">Receives the symmetric secret handle.  <c>null</c> when using an asymmetric algorithm.</param>
            <returns>
            The encrypted value.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBagFormatterBase`1.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts the specified value using either the symmetric or asymmetric encryption algorithm as appropriate.
            </summary>
            <param name="value">The value.</param>
            <param name="symmetricSecretHandle">The symmetric secret handle.  <c>null</c> when using an asymmetric algorithm.</param>
            <returns>
            The decrypted value.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider,System.Boolean,System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1"/> class.
            </summary>
            <param name="signingKey">The crypto service provider with the asymmetric key to use for signing or verifying the token.</param>
            <param name="encryptingKey">The crypto service provider with the asymmetric key to use for encrypting or decrypting the token.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1"/> class.
            </summary>
            <param name="cryptoKeyStore">The crypto key store used when signing or encrypting.</param>
            <param name="bucket">The bucket in which symmetric keys are stored for signing/encrypting data.</param>
            <param name="signed">A value indicating whether the data in this instance will be protected against tampering.</param>
            <param name="encrypted">A value indicating whether the data in this instance will be protected against eavesdropping.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="minimumAge">The minimum age.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1.SerializeCore(`0)">
            <summary>
            Serializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance to a buffer.
            </summary>
            <param name="message">The message.</param>
            <returns>The buffer containing the serialized data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.BinaryDataBagFormatter`1.DeserializeCore(`0,System.Byte[])">
            <summary>
            Deserializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance from a buffer.
            </summary>
            <param name="message">The message instance to initialize with data from the buffer.</param>
            <param name="data">The data buffer.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse">
            <summary>
            Cached details on the response from a direct web request to a remote party.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IncomingWebResponse">
            <summary>
            Details on the incoming response from a direct web request to a remote party.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.IncomingWebResponse.DefaultContentEncoding">
            <summary>
            The encoding to use in reading a response that does not declare its own content encoding.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.#ctor(System.Uri,System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> class.
            </summary>
            <param name="requestUri">The original request URI.</param>
            <param name="response">The response to initialize from.  The network stream is used by this class directly.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.#ctor(System.Uri,System.Uri,System.Net.WebHeaderCollection,System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> class.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="responseUri">The final URI to respond to the request.</param>
            <param name="headers">The headers.</param>
            <param name="statusCode">The status code.</param>
            <param name="contentType">Type of the content.</param>
            <param name="contentEncoding">The content encoding.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.GetResponseReader">
            <summary>
            Creates a text reader for the response stream.
            </summary>
            <returns>The text reader, initialized for the proper encoding.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.GetSnapshot(System.Int32)">
            <summary>
            Gets an offline snapshot version of this instance.
            </summary>
            <param name="maximumBytesToCache">The maximum bytes from the response stream to cache.</param>
            <returns>A snapshot version of this instance.</returns>
            <remarks>
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse"/> creating a snapshot
            will automatically close and dispose of the underlying response stream.
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/>, the result will
            be the self same instance.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponse.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.ContentEncoding">
            <summary>
            Gets the content encoding.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.RequestUri">
            <summary>
            Gets the URI of the initial request.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.FinalUri">
            <summary>
            Gets the URI that finally responded to the request.
            </summary>
            <remarks>
            This can be different from the <see cref="P:DotNetOpenAuth.Messaging.IncomingWebResponse.RequestUri"/> in cases of 
            redirection during the request.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.Headers">
            <summary>
            Gets the headers that must be included in the response to the user agent.
            </summary>
            <remarks>
            The headers in this collection are not meant to be a comprehensive list
            of exactly what should be sent, but are meant to augment whatever headers
            are generally included in a typical response.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.Status">
            <summary>
            Gets the HTTP status code to use in the HTTP response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponse.ResponseStream">
            <summary>
            Gets the body of the HTTP response.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.CachedDirectWebResponse.responseStream">
            <summary>
            A seekable, repeatable response stream.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.#ctor(System.Uri,System.Net.HttpWebResponse,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/> class.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="response">The response.</param>
            <param name="maximumBytesToRead">The maximum bytes to read.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.#ctor(System.Uri,System.Uri,System.Net.WebHeaderCollection,System.Net.HttpStatusCode,System.String,System.String,System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/> class.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="responseUri">The final URI to respond to the request.</param>
            <param name="headers">The headers.</param>
            <param name="statusCode">The status code.</param>
            <param name="contentType">Type of the content.</param>
            <param name="contentEncoding">The content encoding.</param>
            <param name="responseStream">The response stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.GetResponseReader">
            <summary>
            Creates a text reader for the response stream.
            </summary>
            <returns>The text reader, initialized for the proper encoding.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.GetResponseString">
            <summary>
            Gets the body of the response as a string.
            </summary>
            <returns>The entire body of the response.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.GetSnapshot(System.Int32)">
            <summary>
            Gets an offline snapshot version of this instance.
            </summary>
            <param name="maximumBytesToCache">The maximum bytes from the response stream to cache.</param>
            <returns>A snapshot version of this instance.</returns>
            <remarks>
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse"/> creating a snapshot
            will automatically close and dispose of the underlying response stream.
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/>, the result will
            be the self same instance.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.SetResponse(System.String)">
            <summary>
            Sets the response to some string, encoded as UTF-8.
            </summary>
            <param name="body">The string to set the response to.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.CachedDirectWebResponse.CacheNetworkStreamAndClose(System.Net.HttpWebResponse,System.Int32)">
            <summary>
            Caches the network stream and closes it if it is open.
            </summary>
            <param name="response">The response whose stream is to be cloned.</param>
            <param name="maximumBytesToRead">The maximum bytes to cache.</param>
            <returns>The seekable Stream instance that contains a copy of what was returned in the HTTP response.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.CachedDirectWebResponse.ResponseTruncated">
            <summary>
            Gets a value indicating whether the cached response stream was
            truncated to a maximum allowable length.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.CachedDirectWebResponse.ResponseStream">
            <summary>
            Gets the body of the HTTP response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.CachedDirectWebResponse.CachedResponseStream">
            <summary>
            Gets or sets the cached response stream.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ChannelContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.Channel"/> class.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Channel">
            <summary>
            Manages sending direct messages to a remote party and receiving responses.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.HttpFormUrlEncoded">
            <summary>
            The content-type used on HTTP POST requests where the POST entity is a
            URL-encoded series of key=value pairs.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.JsonEncoded">
            <summary>
            The content-type used for JSON serialized objects.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.JsonTextEncoded">
            <summary>
            The "text/javascript" content-type that some servers return instead of the standard <see cref="F:DotNetOpenAuth.Messaging.Channel.JsonEncoded"/> one.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.PlainTextEncoded">
            <summary>
            The content-type for plain text.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.RedirectResponseBodyFormat">
            <summary>
            The HTML that should be returned to the user agent as part of a 301 Redirect.
            </summary>
            <value>A string that should be used as the first argument to string.Format, where the {0} should be replaced with the URL to redirect to.</value>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.IndirectMessageFormPostFormat">
            <summary>
            The template for indirect messages that require form POST to forward through the user agent.
            </summary>
            <remarks>
            We are intentionally using " instead of the html single quote ' below because
            the HtmlEncode'd values that we inject will only escape the double quote, so
            only the double-quote used around these values is safe.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.PostEntityEncoding">
            <summary>
            The encoding to use when writing out POST entity strings.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.DefaultUntrustedXmlDictionaryReaderQuotas">
            <summary>
            A default set of XML dictionary reader quotas that are relatively safe from causing unbounded memory consumption.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.HttpFormUrlEncodedContentType">
            <summary>
            The content-type used on HTTP POST requests where the POST entity is a
            URL-encoded series of key=value pairs.
            This includes the <see cref="F:DotNetOpenAuth.Messaging.Channel.PostEntityEncoding"/> character encoding.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.outgoingBindingElements">
            <summary>
            A list of binding elements in the order they must be applied to outgoing messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.incomingBindingElements">
            <summary>
            A list of binding elements in the order they must be applied to incoming messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.defaultMessageDescriptions">
            <summary>
            The default cache of message descriptions to use unless they are customized.
            </summary>
            <remarks>
            This is a perf optimization, so that we don't reflect over every message type
            every time a channel is constructed.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.messageDescriptions">
            <summary>
            A cache of reflected message types that may be sent or received on this channel.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.messageTypeProvider">
            <summary>
            A tool that can figure out what kind of message is being received
            so it can be deserialized.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.cachePolicy">
            <summary>
            Backing store for the <see cref="P:DotNetOpenAuth.Messaging.Channel.CachePolicy"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Channel.maximumIndirectMessageUrlLength">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Messaging.Channel.MaximumIndirectMessageUrlLength"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.#ctor(DotNetOpenAuth.Messaging.IMessageFactory,DotNetOpenAuth.Messaging.IChannelBindingElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Channel"/> class.
            </summary>
            <param name="messageTypeProvider">
            A class prepared to analyze incoming messages and indicate what concrete
            message types can deserialize from it.
            </param>
            <param name="bindingElements">
            The binding elements to use in sending and receiving messages.
            The order they are provided is used for outgoing messgaes, and reversed for incoming messages.
            </param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Send(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Sends an indirect message (either a request or response) 
            or direct message response for transmission to a remote party
            and ends execution on the current page or handler.
            </summary>
            <param name="message">The one-way message to send</param>
            <exception cref="T:System.Threading.ThreadAbortException">Thrown by ASP.NET in order to prevent additional data from the page being sent to the client and corrupting the response.</exception>
            <remarks>
            Requires an HttpContext.Current context.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Respond(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Sends an indirect message (either a request or response) 
            or direct message response for transmission to a remote party
            and skips most of the remaining ASP.NET request handling pipeline.
            Not safe to call from ASP.NET web forms.
            </summary>
            <param name="message">The one-way message to send</param>
            <remarks>
            Requires an HttpContext.Current context.
            This call is not safe to make from an ASP.NET web form (.aspx file or code-behind) because
            ASP.NET will render HTML after the protocol message has been sent, which will corrupt the response.
            Use the <see cref="M:DotNetOpenAuth.Messaging.Channel.Send(DotNetOpenAuth.Messaging.IProtocolMessage)"/> method instead for web forms.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.PrepareResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares an indirect message (either a request or response) 
            or direct message response for transmission to a remote party.
            </summary>
            <param name="message">The one-way message to send</param>
            <returns>The pending user agent redirect based message to be sent as an HttpResponse.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromRequest">
            <summary>
            Gets the protocol message embedded in the given HTTP request, if present.
            </summary>
            <returns>The deserialized message, if one is found.  Null otherwise.</returns>
            <remarks>
            Requires an HttpContext.Current context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:System.Web.HttpContext.Current"/> is null.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.TryReadFromRequest``1(``0@)">
            <summary>
            Gets the protocol message embedded in the given HTTP request, if present.
            </summary>
            <typeparam name="TRequest">The expected type of the message to be received.</typeparam>
            <param name="request">The deserialized message, if one is found.  Null otherwise.</param>
            <returns>True if the expected message was recognized and deserialized.  False otherwise.</returns>
            <remarks>
            Requires an HttpContext.Current context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:System.Web.HttpContext.Current"/> is null.</exception>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when a request message of an unexpected type is received.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.TryReadFromRequest``1(System.Web.HttpRequestBase,``0@)">
            <summary>
            Gets the protocol message embedded in the given HTTP request, if present.
            </summary>
            <typeparam name="TRequest">The expected type of the message to be received.</typeparam>
            <param name="httpRequest">The request to search for an embedded message.</param>
            <param name="request">The deserialized message, if one is found.  Null otherwise.</param>
            <returns>True if the expected message was recognized and deserialized.  False otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:System.Web.HttpContext.Current"/> is null.</exception>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when a request message of an unexpected type is received.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromRequest``1">
            <summary>
            Gets the protocol message embedded in the current HTTP request.
            </summary>
            <typeparam name="TRequest">The expected type of the message to be received.</typeparam>
            <returns>The deserialized message.  Never null.</returns>
            <remarks>
            Requires an HttpContext.Current context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:System.Web.HttpContext.Current"/> is null.</exception>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the expected message was not recognized in the response.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromRequest``1(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message embedded in the given HTTP request.
            </summary>
            <typeparam name="TRequest">The expected type of the message to be received.</typeparam>
            <param name="httpRequest">The request to search for an embedded message.</param>
            <returns>The deserialized message.  Never null.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the expected message was not recognized in the response.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromRequest(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="httpRequest">The request to search for an embedded message.</param>
            <returns>The deserialized message, if one is found.  Null otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Request``1(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Sends a direct message to a remote party and waits for the response.
            </summary>
            <typeparam name="TResponse">The expected type of the message to be received.</typeparam>
            <param name="requestMessage">The message to send.</param>
            <returns>The remote party's response.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown if no message is recognized in the response
            or an unexpected type of message is received.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Request(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Sends a direct message to a remote party and waits for the response.
            </summary>
            <param name="requestMessage">The message to send.</param>
            <returns>The remote party's response.  Guaranteed to never be null.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the response does not include a protocol message.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ProcessIncomingMessageTestHook(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Verifies the integrity and applicability of an incoming message.
            </summary>
            <param name="message">The message just received.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the message is somehow invalid.
            This can be due to tampering, replay attack or expiration, among other things.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.CreateHttpRequestTestHook(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares an HTTP request that carries a given message.
            </summary>
            <param name="request">The message to send.</param>
            <returns>The <see cref="T:System.Net.HttpWebRequest"/> prepared to send the request.</returns>
            <remarks>
            This method must be overridden by a derived class, unless the <see cref="M:DotNetOpenAuth.Messaging.Channel.RequestCore(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)"/> method
            is overridden and does not require this method.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.PrepareDirectResponseTestHook(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>The pending user agent redirect based message to be sent as an HttpResponse.</returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromResponseCoreTestHook(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>The deserialized message parts, if found.  Null otherwise.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ProcessOutgoingMessageTestHook(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <remarks>
            	This method should NOT be called by derived types
            	except when sending ONE WAY request messages.
            </remarks>
            <summary>
            Prepares a message for transmit by applying signatures, nonces, etc.
            </summary>
            <param name="message">The message to prepare for sending.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.GetHttpContext">
            <summary>
            Gets the HTTP context for the current HTTP request.
            </summary>
            <returns>An HttpContextBase instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.GetRequestFromContext">
            <summary>
            Gets the current HTTP request being processed.
            </summary>
            <returns>The HttpRequestInfo for the current request.</returns>
            <remarks>
            Requires an <see cref="P:System.Web.HttpContext.Current"/> context.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:System.Web.HttpContext.Current">HttpContext.Current</see> == <c>null</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.HttpMethodHasEntity(System.String)">
            <summary>
            Checks whether a given HTTP method is expected to include an entity body in its request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <returns><c>true</c> if the HTTP method is supposed to have an entity; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ApplyMessageTemplate(DotNetOpenAuth.Messaging.IMessage,DotNetOpenAuth.Messaging.OutgoingWebResponse)">
            <summary>
            Applies message prescribed HTTP response headers to an outgoing web response.
            </summary>
            <param name="message">The message.</param>
            <param name="response">The HTTP response.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.OnSending(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Fires the <see cref="E:DotNetOpenAuth.Messaging.Channel.Sending"/> event.
            </summary>
            <param name="message">The message about to be encoded and sent.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.GetDirectResponse(System.Net.HttpWebRequest)">
            <summary>
            Gets the direct response of a direct HTTP request.
            </summary>
            <param name="webRequest">The web request.</param>
            <returns>The response to the web request.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown on network or protocol errors.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.RequestCore(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Submits a direct request message to some remote party and blocks waiting for an immediately reply.
            </summary>
            <param name="request">The request message.</param>
            <returns>The response message, or null if the response did not carry a message.</returns>
            <remarks>
            Typically a deriving channel will override <see cref="M:DotNetOpenAuth.Messaging.Channel.CreateHttpRequest(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)"/> to customize this method's
            behavior.  However in non-HTTP frameworks, such as unit test mocks, it may be appropriate to override 
            this method to eliminate all use of an HTTP transport.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.OnReceivingDirectResponse(DotNetOpenAuth.Messaging.IncomingWebResponse,DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage)">
            <summary>
            Called when receiving a direct response message, before deserialization begins.
            </summary>
            <param name="response">The HTTP direct response.</param>
            <param name="message">The newly instantiated message, prior to deserialization.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromRequestCore(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="request">The request to search for an embedded message.</param>
            <returns>The deserialized message, if one is found.  Null otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Receive(System.Collections.Generic.Dictionary{System.String,System.String},DotNetOpenAuth.Messaging.MessageReceivingEndpoint)">
            <summary>
            Deserializes a dictionary of values into a message.
            </summary>
            <param name="fields">The dictionary of values that were read from an HTTP request or response.</param>
            <param name="recipient">Information about where the message was directed.  Null for direct response messages.</param>
            <returns>The deserialized message, or null if no message could be recognized in the provided data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.PrepareIndirectResponse(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Queues an indirect message for transmittal via the user agent.
            </summary>
            <param name="message">The message to send.</param>
            <returns>The pending user agent redirect based message to be sent as an HttpResponse.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.Create301RedirectResponse(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Encodes an HTTP response that will instruct the user agent to forward a message to
            some remote third party using a 301 Redirect GET method.
            </summary>
            <param name="message">The message to forward.</param>
            <param name="fields">The pre-serialized fields from the message.</param>
            <param name="payloadInFragment">if set to <c>true</c> the redirect will contain the message payload in the #fragment portion of the URL rather than the ?querystring.</param>
            <returns>The encoded HTTP response.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.CreateFormPostResponse(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Encodes an HTTP response that will instruct the user agent to forward a message to
            some remote third party using a form POST method.
            </summary>
            <param name="message">The message to forward.</param>
            <param name="fields">The pre-serialized fields from the message.</param>
            <returns>The encoded HTTP response.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>The deserialized message parts, if found.  Null otherwise.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.CreateHttpRequest(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares an HTTP request that carries a given message.
            </summary>
            <param name="request">The message to send.</param>
            <returns>The <see cref="T:System.Net.HttpWebRequest"/> prepared to send the request.</returns>
            <remarks>
            This method must be overridden by a derived class, unless the <see cref="M:DotNetOpenAuth.Messaging.Channel.RequestCore(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)"/> method
            is overridden and does not require this method.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>The pending user agent redirect based message to be sent as an HttpResponse.</returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.SerializeAsJson(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Serializes the given message as a JSON string.
            </summary>
            <param name="message">The message to serialize.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.DeserializeFromJson(System.String)">
            <summary>
            Deserializes from flat data from a JSON object.
            </summary>
            <param name="json">A JSON string.</param>
            <returns>The simple "key":"value" pairs from a JSON-encoded object.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for transmit by applying signatures, nonces, etc.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <remarks>
            This method should NOT be called by derived types
            except when sending ONE WAY request messages.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.InitializeRequestAsGet(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares to send a request to the Service Provider as the query string in a GET request.
            </summary>
            <param name="requestMessage">The message to be transmitted to the ServiceProvider.</param>
            <returns>The web request ready to send.</returns>
            <remarks>
            This method is simply a standard HTTP Get request with the message parts serialized to the query string.
            This method satisfies OAuth 1.0 section 5.2, item #3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.InitializeRequestAsHead(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares to send a request to the Service Provider as the query string in a HEAD request.
            </summary>
            <param name="requestMessage">The message to be transmitted to the ServiceProvider.</param>
            <returns>The web request ready to send.</returns>
            <remarks>
            This method is simply a standard HTTP HEAD request with the message parts serialized to the query string.
            This method satisfies OAuth 1.0 section 5.2, item #3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.InitializeRequestAsPost(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares to send a request to the Service Provider as the payload of a POST request.
            </summary>
            <param name="requestMessage">The message to be transmitted to the ServiceProvider.</param>
            <returns>The web request ready to send.</returns>
            <remarks>
            This method is simply a standard HTTP POST request with the message parts serialized to the POST entity
            with the application/x-www-form-urlencoded content type
            This method satisfies OAuth 1.0 section 5.2, item #2 and OpenID 2.0 section 4.1.2.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.InitializeRequestAsPut(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares to send a request to the Service Provider as the query string in a PUT request.
            </summary>
            <param name="requestMessage">The message to be transmitted to the ServiceProvider.</param>
            <returns>The web request ready to send.</returns>
            <remarks>
            This method is simply a standard HTTP PUT request with the message parts serialized to the query string.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.InitializeRequestAsDelete(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares to send a request to the Service Provider as the query string in a DELETE request.
            </summary>
            <param name="requestMessage">The message to be transmitted to the ServiceProvider.</param>
            <returns>The web request ready to send.</returns>
            <remarks>
            This method is simply a standard HTTP DELETE request with the message parts serialized to the query string.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.SendParametersInEntity(System.Net.HttpWebRequest,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends the given parameters in the entity stream of an HTTP request.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="fields">The parameters to send.</param>
            <remarks>
            This method calls <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> and closes
            the request stream, but does not call <see cref="M:System.Net.HttpWebRequest.GetResponse"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.SendParametersInEntityAsMultipart(System.Net.HttpWebRequest,System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.MultipartPostPart})">
            <summary>
            Sends the given parameters in the entity stream of an HTTP request in multi-part format.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="fields">The parameters to send.</param>
            <remarks>
            This method calls <see cref="M:System.Net.HttpWebRequest.GetRequestStream"/> and closes
            the request stream, but does not call <see cref="M:System.Net.HttpWebRequest.GetResponse"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Verifies the integrity and applicability of an incoming message.
            </summary>
            <param name="message">The message just received.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the message is somehow invalid.
            This can be due to tampering, replay attack or expiration, among other things.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.FilterReceivedFields(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Allows preprocessing and validation of message data before an appropriate message type is
            selected or deserialized.
            </summary>
            <param name="fields">The received message data.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.PrepareHttpWebRequest(System.Net.HttpWebRequest)">
            <summary>
            Performs additional processing on an outgoing web request before it is sent to the remote server.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.CustomizeBindingElementOrder(System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.IChannelBindingElement},System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.IChannelBindingElement})">
            <summary>
            Customizes the binding element order for outgoing and incoming messages.
            </summary>
            <param name="outgoingOrder">The outgoing order.</param>
            <param name="incomingOrder">The incoming order.</param>
            <remarks>
            No binding elements can be added or removed from the channel using this method.
            Only a customized order is allowed.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if a binding element is new or missing in one of the ordered lists.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.ValidateAndPrepareBindingElements(System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.IChannelBindingElement})">
            <summary>
            Ensures a consistent and secure set of binding elements and 
            sorts them as necessary for a valid sequence of operations.
            </summary>
            <param name="elements">The binding elements provided to the channel.</param>
            <returns>The properly ordered list of elements.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the binding elements are incomplete or inconsistent with each other.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.BindingElementOutgoingMessageApplicationOrder(DotNetOpenAuth.Messaging.MessageProtections,DotNetOpenAuth.Messaging.MessageProtections)">
            <summary>
            Puts binding elements in their correct outgoing message processing order.
            </summary>
            <param name="protection1">The first protection type to compare.</param>
            <param name="protection2">The second protection type to compare.</param>
            <returns>
            -1 if <paramref name="protection1"/> should be applied to an outgoing message before <paramref name="protection2"/>.
            1 if <paramref name="protection2"/> should be applied to an outgoing message before <paramref name="protection1"/>.
            0 if it doesn't matter.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.EnsureValidMessageParts(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Verifies that all required message parts are initialized to values
            prior to sending the message to a remote party.
            </summary>
            <param name="message">The message to verify.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when any required message part does not have a value.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Channel.IsBindingElementOrderValid(System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.IChannelBindingElement})">
            <summary>
            Determines whether a given ordered list of binding elements includes every
            binding element in this channel exactly once.
            </summary>
            <param name="order">The list of binding elements to test.</param>
            <returns>
            	<c>true</c> if the given list is a valid description of a binding element ordering; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:DotNetOpenAuth.Messaging.Channel.Sending">
            <summary>
            An event fired whenever a message is about to be encoded and sent.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.WebRequestHandler">
            <summary>
            Gets or sets an instance to a <see cref="T:DotNetOpenAuth.Messaging.IDirectWebRequestHandler"/> that will be used when 
            submitting HTTP requests and waiting for responses.
            </summary>
            <remarks>
            This defaults to a straightforward implementation, but can be set
            to a mock object for testing purposes.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.MaximumIndirectMessageUrlLength">
            <summary>
            Gets or sets the maximum allowable size for a 301 Redirect response before we send
            a 200 OK response with a scripted form POST with the parameters instead
            in order to ensure successfully sending a large payload to another server
            that might have a maximum allowable size restriction on its GET request.
            </summary>
            <value>The default value is 2048.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.MessageDescriptions">
            <summary>
            Gets or sets the message descriptions.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.MessageFactoryTestHook">
            <summary>
            Gets a tool that can figure out what kind of message is being received
            so it can be deserialized.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.BindingElements">
            <summary>
            Gets the binding elements used by this channel, in no particular guaranteed order.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.OutgoingBindingElements">
            <summary>
            Gets the binding elements used by this channel, in the order applied to outgoing messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.IncomingBindingElements">
            <summary>
            Gets the binding elements used by this channel, in the order applied to incoming messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.MessageFactory">
            <summary>
            Gets or sets a tool that can figure out what kind of message is being received
            so it can be deserialized.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.CachePolicy">
            <summary>
            Gets or sets the cache policy to use for direct message requests.
            </summary>
            <value>Default is <see cref="F:System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore"/>.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Channel.XmlDictionaryReaderQuotas">
            <summary>
            Gets or sets the XML dictionary reader quotas.
            </summary>
            <value>The XML dictionary reader quotas.</value>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ChannelContract.#ctor">
            <summary>
            Prevents a default instance of the ChannelContract class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ChannelContract.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>
            The deserialized message parts, if found.  Null otherwise.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ChannelContract.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>
            The pending user agent redirect based message to be sent as an HttpResponse.
            </returns>
            <remarks>
            This method implements spec V1.0 section 5.3.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.HmacAlgorithms">
            <summary>
            HMAC-SHA algorithm names that can be passed to the <see cref="M:System.Security.Cryptography.HMAC.Create(System.String)"/> method.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HmacAlgorithms.HmacSha1">
            <summary>
            The name of the HMAC-SHA1 algorithm.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HmacAlgorithms.HmacSha256">
            <summary>
            The name of the HMAC-SHA256 algorithm.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HmacAlgorithms.HmacSha384">
            <summary>
            The name of the HMAC-SHA384 algorithm.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HmacAlgorithms.HmacSha512">
            <summary>
            The name of the HMAC-SHA512 algorithm.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HmacAlgorithms.Create(System.String,System.Byte[])">
            <summary>
            Creates an HMAC-SHA algorithm with the specified name and key.
            </summary>
            <param name="algorithmName">A name from the available choices in the static const members of this class.</param>
            <param name="key">The secret key used as the HMAC.</param>
            <returns>The HMAC algorithm instance.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.HttpRequestHeaders">
            <summary>
            Well known HTTP headers.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestHeaders.Authorization">
            <summary>
            The Authorization header, which specifies the credentials that the client presents in order to authenticate itself to the server.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestHeaders.WwwAuthenticate">
            <summary>
            The WWW-Authenticate header, which is included in HTTP 401 Unauthorized responses to help the client know which authorization schemes are supported.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestHeaders.ContentType">
            <summary>
            The Content-Type header, which specifies the MIME type of the accompanying body data.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IHttpDirectRequest">
            <summary>
            An interface that allows direct request messages to capture the details of the HTTP request they arrived on.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessage">
            <summary>
            The interface that classes must implement to be serialized/deserialized
            as protocol or extension messages.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessage.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            <para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the 
            message to see if it conforms to the protocol.</para>
            <para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessage.Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessage.ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectRequest.Headers">
            <summary>
            Gets the HTTP headers of the request.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IHttpDirectRequestContract">
            <summary>
            Contract class for the <see cref="T:DotNetOpenAuth.Messaging.IHttpDirectRequest"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IHttpDirectRequestContract.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            <para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the 
            message to see if it conforms to the protocol.</para>
            <para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectRequestContract.DotNetOpenAuth#Messaging#IHttpDirectRequest#Headers">
            <summary>
            Gets the HTTP headers of the request.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectRequestContract.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectRequestContract.DotNetOpenAuth#Messaging#IMessage#ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IHttpIndirectResponse">
            <summary>
            An interface that allows indirect response messages to specify
            HTTP transport specific properties.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpIndirectResponse.Include301RedirectPayloadInFragment">
            <summary>
            Gets a value indicating whether the payload for the message should be included
            in the redirect fragment instead of the query string or POST entity.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageOriginalPayload">
            <summary>
            An interface that appears on messages that need to retain a description of
            what their literal payload was when they were deserialized.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageOriginalPayload.OriginalPayload">
            <summary>
            Gets or sets the original message parts, before any normalization or default values were assigned.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageOriginalPayloadContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IMessageOriginalPayload"/> interface.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageOriginalPayloadContract.DotNetOpenAuth#Messaging#IMessageOriginalPayload#OriginalPayload">
            <summary>
            Gets or sets the original message parts, before any normalization or default values were assigned.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.DirectWebRequestOptions">
            <summary>
            A set of flags that can control the behavior of an individual web request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DirectWebRequestOptions.None">
            <summary>
            Indicates that default <see cref="T:System.Net.HttpWebRequest"/> behavior is required.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DirectWebRequestOptions.AcceptAllHttpResponses">
            <summary>
            Indicates that any response from the remote server, even those
            with HTTP status codes that indicate errors, should not result
            in a thrown exception.
            </summary>
            <remarks>
            Even with this flag set, <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> should
            be thrown when an HTTP protocol error occurs (i.e. timeouts).
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DirectWebRequestOptions.RequireSsl">
            <summary>
            Indicates that the HTTP request must be completed entirely 
            using SSL (including any redirects).
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EnumerableCacheExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> types.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.CacheGeneratedResults``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Caches the results of enumerating over a given object so that subsequence enumerations
            don't require interacting with the object a second time.
            </summary>
            <typeparam name="T">The type of element found in the enumeration.</typeparam>
            <param name="sequence">The enumerable object.</param>
            <returns>
            Either a new enumerable object that caches enumerated results, or the original, <paramref name="sequence"/>
            object if no caching is necessary to avoid additional CPU work.
            </returns>
            <remarks>
              <para>This is designed for use on the results of generator methods (the ones with <c>yield return</c> in them)
            so that only those elements in the sequence that are needed are ever generated, while not requiring
            regeneration of elements that are enumerated over multiple times.</para>
              <para>This can be a huge performance gain if enumerating multiple times over an expensive generator method.</para>
              <para>Some enumerable types such as collections, lists, and already-cached generators do not require
            any (additional) caching, and this method will simply return those objects rather than caching them
            to avoid double-caching.</para>
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1">
            <summary>
            A wrapper for <see cref="T:System.Collections.Generic.IEnumerable`1"/> types and returns a caching <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            from its <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> method.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.cache">
            <summary>
            The results from enumeration of the live object that have been collected thus far.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.generator">
            <summary>
            The original generator method or other enumerable object whose contents should only be enumerated once.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.generatorEnumerator">
            <summary>
            The enumerator we're using over the generator method's results.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.generatorLock">
            <summary>
            The sync object our caching enumerators use when adding a new live generator method result to the cache.
            </summary>
            <remarks>
            Although individual enumerators are not thread-safe, this <see cref="T:System.Collections.Generic.IEnumerable`1"/> should be
            thread safe so that multiple enumerators can be created from it and used from different threads.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the EnumerableCache class.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache">
            <summary>
            An enumerator that uses cached enumeration results whenever they are available,
            and caches whatever results it has to pull from the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.parent">
            <summary>
            The parent enumeration wrapper class that stores the cached results.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.cachePosition">
            <summary>
            The position of this enumerator in the cached list.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.#ctor(DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache{`0})">
            <summary>
            Initializes a new instance of the EnumeratorCache class.
            </summary>
            <param name="parent">The parent cached enumerable whose GetEnumerator method is calling this constructor.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EnumerableCacheExtensions.EnumerableCache`1.EnumeratorCache.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.HostErrorException">
            <summary>
            An exception to call out a configuration or runtime failure on the part of the
            (web) application that is hosting this library.
            </summary>
            <remarks>
            <para>This exception is used rather than <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> for those errors
            that should never be caught because they indicate a major error in the app itself
            or its configuration.</para>
            <para>It is an internal exception to assist in making it uncatchable.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HostErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HostErrorException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HostErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HostErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HostErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HostErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HostErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HostErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IHttpDirectResponse">
            <summary>
            An interface that allows direct response messages to specify
            HTTP transport specific properties.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectResponse.HttpStatusCode">
            <summary>
            Gets the HTTP status code that the direct response should be sent with.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectResponse.Headers">
            <summary>
            Gets the HTTP headers to add to the response.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IExtensionMessage">
            <summary>
            An interface that extension messages must implement.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IHttpDirectResponseContract">
            <summary>
            Contract class for the <see cref="T:DotNetOpenAuth.Messaging.IHttpDirectResponse"/> interface.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectResponseContract.DotNetOpenAuth#Messaging#IHttpDirectResponse#HttpStatusCode">
            <summary>
            Gets the HTTP status code that the direct response should be sent with.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IHttpDirectResponseContract.DotNetOpenAuth#Messaging#IHttpDirectResponse#Headers">
            <summary>
            Gets the HTTP headers to add to the response.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IMessage"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IMessageContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageContract.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageContract.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageContract.DotNetOpenAuth#Messaging#IMessage#ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <value></value>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage">
            <summary>
            Undirected messages that serve as direct responses to direct requests.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IProtocolMessage">
            <summary>
            The interface that classes must implement to be serialized/deserialized
            as protocol messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessage.RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessage.Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage.OriginatingRequest">
            <summary>
            Gets the originating request message that caused this response to be formed.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EmptyDictionary`2">
            <summary>
            An empty dictionary.  Useful for avoiding memory allocations in creating new dictionaries to represent empty ones.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EmptyDictionary`2.Instance">
            <summary>
            The singleton instance of the empty dictionary.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.#ctor">
            <summary>
            Prevents a default instance of the EmptyDictionary class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key being read or written.</param>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EmptyEnumerator">
            <summary>
            An enumerator that always generates zero elements.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EmptyEnumerator.Instance">
            <summary>
            The singleton instance of this empty enumerator.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyEnumerator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.EmptyEnumerator"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.EmptyList`1">
            <summary>
            An empty, read-only list.
            </summary>
            <typeparam name="T">The type the list claims to include.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.EmptyList`1.Instance">
            <summary>
            The singleton instance of the empty list.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.#ctor">
            <summary>
            Prevents a default instance of the EmptyList class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.EmptyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.EmptyList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> at the specified index.
            </summary>
            <param name="index">The index of the element in the list to change.</param>
            <returns>Nothing.  It always throws.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ErrorUtilities">
            <summary>
            A collection of error checking and reporting methods.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.Wrap(System.Exception,System.String,System.Object[])">
            <summary>
            Wraps an exception in a new <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/>.
            </summary>
            <param name="inner">The inner exception to wrap.</param>
            <param name="errorMessage">The error message for the outer exception.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <returns>The newly constructed (unthrown) exception.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.ThrowInternal(System.String)">
            <summary>
            Throws an internal error exception.
            </summary>
            <param name="errorMessage">The error message.</param>
            <returns>Nothing.  But included here so callers can "throw" this method for C# safety.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.InternalErrorException">Always thrown.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyInternal(System.Boolean,System.String)">
            <summary>
            Checks a condition and throws an internal error exception if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.InternalErrorException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyInternal(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks a condition and throws an internal error exception if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <param name="args">The formatting arguments.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.InternalErrorException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyOperation(System.Boolean,System.String)">
            <summary>
            Checks a condition and throws an <see cref="T:System.InvalidOperationException"/> if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifySupported(System.Boolean,System.String)">
            <summary>
            Checks a condition and throws a <see cref="T:System.NotSupportedException"/> if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifySupported(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks a condition and throws a <see cref="T:System.NotSupportedException"/> if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <param name="args">The string formatting arguments for <paramref name="errorMessage"/>.</param>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyOperation(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks a condition and throws an <see cref="T:System.InvalidOperationException"/> if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <param name="args">The formatting arguments.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyHost(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:DotNetOpenAuth.Messaging.HostErrorException"/> if some <paramref name="condition"/> evaluates to false.
            </summary>
            <param name="condition">True to do nothing; false to throw the exception.</param>
            <param name="errorMessage">The error message for the exception.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.HostErrorException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyProtocol(System.Boolean,DotNetOpenAuth.Messaging.IProtocolMessage,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> if some <paramref name="condition"/> evaluates to false.
            </summary>
            <param name="condition">True to do nothing; false to throw the exception.</param>
            <param name="faultedMessage">The message being processed that would be responsible for the exception if thrown.</param>
            <param name="errorMessage">The error message for the exception.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyProtocol(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> if some <paramref name="condition"/> evaluates to false.
            </summary>
            <param name="condition">True to do nothing; false to throw the exception.</param>
            <param name="unformattedMessage">The error message for the exception.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.ThrowProtocol(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/>.
            </summary>
            <param name="unformattedMessage">The message to set in the exception.</param>
            <param name="args">The formatting arguments of the message.</param>
            <returns>
            An InternalErrorException, which may be "thrown" by the caller in order
            to satisfy C# rules to show that code will never be reached, but no value
            actually is ever returned because this method guarantees to throw.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Always thrown.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.ThrowFormat(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="args">The string formatting arguments for <paramref name="message"/>.</param>
            <returns>Nothing.  It's just here so the caller can throw this method for C# compilation check.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyFormat(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:System.FormatException"/> if some condition is false.
            </summary>
            <param name="condition">The expression to evaluate.  A value of <c>false</c> will cause the exception to be thrown.</param>
            <param name="message">The message for the exception.</param>
            <param name="args">The string formatting arguments for <paramref name="message"/>.</param>
            <exception cref="T:System.FormatException">Thrown when <paramref name="condition"/> is <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyArgument(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies something about the argument supplied to a method.
            </summary>
            <param name="condition">The condition that must evaluate to true to avoid an exception.</param>
            <param name="message">The message to use in the exception if the condition is false.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.ThrowArgumentNamed(System.String,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to use in the exception if the condition is false.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <returns>Never returns anything.  It always throws.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyArgumentNamed(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Verifies something about the argument supplied to a method.
            </summary>
            <param name="condition">The condition that must evaluate to true to avoid an exception.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to use in the exception if the condition is false.</param>
            <param name="args">The string formatting arguments, if any.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyArgumentNotNull(System.Object,System.String)">
            <summary>
            Verifies that some given value is not null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">Name of the parameter, which will be used in the <see cref="T:System.ArgumentException"/>, if thrown.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyNonZeroLength(System.String,System.String)">
            <summary>
            Verifies that some string is not null and has non-zero length.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">Name of the parameter, which will be used in the <see cref="T:System.ArgumentException"/>, if thrown.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> has zero length.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.VerifyHttpContext">
            <summary>
            Verifies that <see cref="P:System.Web.HttpContext.Current"/> != <c>null</c>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:System.Web.HttpContext.Current"/> == <c>null</c></exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ErrorUtilities.GetValueOrThrow``2(System.Collections.Generic.IDictionary{``0,``1},``0,DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Obtains a value from the dictionary if possible, or throws a <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> if it's missing.
            </summary>
            <typeparam name="TKey">The type of key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value in the dictionary.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to use to look up the value.</param>
            <param name="message">The message to claim is invalid if the key cannot be found.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageWithEvents">
            <summary>
            An interface that messages wishing to perform custom serialization/deserialization
            may implement to be notified of <see cref="T:DotNetOpenAuth.Messaging.Channel"/> events.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageWithEvents.OnSending">
            <summary>
            Called when the message is about to be transmitted,
            before it passes through the channel binding elements.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageWithEvents.OnReceiving">
            <summary>
            Called when the message has been received, 
            after it passes through the channel binding elements.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IncomingWebResponseContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponseContract.GetResponseReader">
            <summary>
            Creates a text reader for the response stream.
            </summary>
            <returns>
            The text reader, initialized for the proper encoding.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IncomingWebResponseContract.GetSnapshot(System.Int32)">
            <summary>
            Gets an offline snapshot version of this instance.
            </summary>
            <param name="maximumBytesToCache">The maximum bytes from the response stream to cache.</param>
            <returns>A snapshot version of this instance.</returns>
            <remarks>
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse"/> creating a snapshot
            will automatically close and dispose of the underlying response stream.
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/>, the result will
            be the self same instance.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IncomingWebResponseContract.ResponseStream">
            <summary>
            Gets the body of the HTTP response.
            </summary>
            <value></value>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensions">
            <summary>
            A protocol message that supports adding extensions to the payload for transmission.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensions.Extensions">
            <summary>
            Gets the list of extensions that are included with this message.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensions"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IProtocolMessageWithExtensions#Extensions">
            <summary>
            Gets the list of extensions that are included with this message.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IProtocolMessage#RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IProtocolMessage#Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IProtocolMessageWithExtensionsContract.DotNetOpenAuth#Messaging#IMessage#ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.InternalErrorException">
            <summary>
            An internal exception to throw if an internal error within the library requires
            an abort of the operation.
            </summary>
            <remarks>
            This exception is internal to prevent clients of the library from catching what is
            really an unexpected, potentially unrecoverable exception.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.InternalErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.InternalErrorException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.InternalErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.InternalErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.InternalErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.InternalErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IStreamSerializingDataBag">
            <summary>
            An interface implemented by <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>-derived types that support binary serialization.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IStreamSerializingDataBag.Serialize(System.IO.Stream)">
            <summary>
            Serializes the instance to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IStreamSerializingDataBag.Deserialize(System.IO.Stream)">
            <summary>
            Initializes the fields on this instance from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IStreamSerializingDataBaContract">
            <summary>
            Code Contract for the <see cref="T:DotNetOpenAuth.Messaging.IStreamSerializingDataBag"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IStreamSerializingDataBaContract.DotNetOpenAuth#Messaging#IStreamSerializingDataBag#Serialize(System.IO.Stream)">
            <summary>
            Serializes the instance to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IStreamSerializingDataBaContract.DotNetOpenAuth#Messaging#IStreamSerializingDataBag#Deserialize(System.IO.Stream)">
            <summary>
            Initializes the fields on this instance from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.KeyedCollectionDelegate`2">
            <summary>
            A KeyedCollection whose item -&gt; key transform is provided via a delegate
            to its constructor, and null items are disallowed.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.KeyedCollectionDelegate`2.getKeyForItemDelegate">
            <summary>
            The delegate that returns a key for the given item.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.KeyedCollectionDelegate`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the KeyedCollectionDelegate class.
            </summary>
            <param name="getKeyForItemDelegate">The delegate that gets the key for a given item.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.KeyedCollectionDelegate`2.GetKeyForItem(`1)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MultipartPostPart">
            <summary>
            Represents a single part in a HTTP multipart POST request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MultipartPostPart.ContentDispositionHeader">
            <summary>
            The "Content-Disposition" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MultipartPostPart.NewLine">
            <summary>
            The two-character \r\n newline character sequence to use.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.MultipartPostPart"/> class.
            </summary>
            <param name="contentDisposition">The content disposition of the part.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.CreateFormPart(System.String,System.String)">
            <summary>
            Creates a part that represents a simple form field.
            </summary>
            <param name="name">The name of the form field.</param>
            <param name="value">The value.</param>
            <returns>The constructed part.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.CreateFormFilePart(System.String,System.String,System.String)">
            <summary>
            Creates a part that represents a file attachment.
            </summary>
            <param name="name">The name of the form field.</param>
            <param name="filePath">The path to the file to send.</param>
            <param name="contentType">Type of the content in HTTP Content-Type format.</param>
            <returns>The constructed part.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.CreateFormFilePart(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Creates a part that represents a file attachment.
            </summary>
            <param name="name">The name of the form field.</param>
            <param name="fileName">Name of the file as the server should see it.</param>
            <param name="contentType">Type of the content in HTTP Content-Type format.</param>
            <param name="content">The content of the file.</param>
            <returns>The constructed part.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.Serialize(System.IO.StreamWriter)">
            <summary>
            Serializes the part to a stream.
            </summary>
            <param name="streamWriter">The stream writer.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MultipartPostPart.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MultipartPostPart.ContentDisposition">
            <summary>
            Gets or sets the content disposition.
            </summary>
            <value>The content disposition.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MultipartPostPart.ContentAttributes">
            <summary>
            Gets the key=value attributes that appear on the same line as the Content-Disposition.
            </summary>
            <value>The content attributes.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MultipartPostPart.PartHeaders">
            <summary>
            Gets the headers that appear on subsequent lines after the Content-Disposition.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MultipartPostPart.Content">
            <summary>
            Gets or sets the content of the part.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MultipartPostPart.Length">
            <summary>
            Gets the length of this entire part.
            </summary>
            <remarks>Useful for calculating the ContentLength HTTP header to send before actually serializing the content.</remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse">
            <summary>
            A live network HTTP response
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.httpWebResponse">
            <summary>
            The network response object, used to initialize this instance, that still needs 
            to be closed if applicable.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.responseStream">
            <summary>
            The incoming network response stream.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.streamReadBegun">
            <summary>
            A value indicating whether a stream reader has already been
            created on this instance.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.#ctor(System.Uri,System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse"/> class.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.GetResponseReader">
            <summary>
            Creates a text reader for the response stream.
            </summary>
            <returns>The text reader, initialized for the proper encoding.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.GetSnapshot(System.Int32)">
            <summary>
            Gets an offline snapshot version of this instance.
            </summary>
            <param name="maximumBytesToCache">The maximum bytes from the response stream to cache.</param>
            <returns>A snapshot version of this instance.</returns>
            <remarks>
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.NetworkDirectWebResponse"/> creating a snapshot
            will automatically close and dispose of the underlying response stream.
            If this instance is a <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/>, the result will
            be the self same instance.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.NetworkDirectWebResponse.ResponseStream">
            <summary>
            Gets the body of the HTTP response.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.OutgoingWebResponseActionResult">
            <summary>
            An ASP.NET MVC structure to represent the response to send
            to the user agent when the controller has finished its work.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.OutgoingWebResponseActionResult.response">
            <summary>
            The outgoing web response to send when the ActionResult is executed.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponseActionResult.#ctor(DotNetOpenAuth.Messaging.OutgoingWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponseActionResult"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponseActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Enables processing of the result of an action method by a custom type that inherits from <see cref="T:System.Web.Mvc.ActionResult"/>.
            </summary>
            <param name="context">The context in which to set the response.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            <summary>
            An exception to represent errors in the local or remote implementation of the protocol
            that includes the response message that should be returned to the HTTP client to comply
            with the protocol specification.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ProtocolException">
            <summary>
            An exception to represent errors in the local or remote implementation of the protocol.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> class.
            </summary>
            <param name="message">A message describing the specific error the occurred or was detected.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> class.
            </summary>
            <param name="message">A message describing the specific error the occurred or was detected.</param>
            <param name="inner">The inner exception to include.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolException.#ctor(System.String,DotNetOpenAuth.Messaging.IProtocolMessage,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> class
            such that it can be sent as a protocol message response to a remote caller.
            </summary>
            <param name="message">The human-readable exception message.</param>
            <param name="faultedMessage">The message that was the cause of the exception.  May be null.</param>
            <param name="innerException">The inner exception to include.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ProtocolException.FaultedMessage">
            <summary>
            Gets the message that caused the exception.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.channel">
            <summary>
            The channel that produced the error response message, to be used in constructing the actual HTTP response.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.#ctor(DotNetOpenAuth.Messaging.Channel,DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage,DotNetOpenAuth.Messaging.IProtocolMessage,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException"/> class
            such that it can be sent as a protocol message response to a remote caller.
            </summary>
            <param name="channel">The channel to use when encoding the response message.</param>
            <param name="errorResponse">The message to send back to the HTTP client.</param>
            <param name="faultedMessage">The message that was the cause of the exception.  May be null.</param>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.CreateErrorResponse">
            <summary>
            Creates the HTTP response to forward to the client to report the error.
            </summary>
            <returns>The HTTP response.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage">
            <summary>
            Gets the protocol message to send back to the client to report the error.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoderContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder"/> type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoderContract.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoderContract"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoderContract.DotNetOpenAuth#Messaging#Reflection#IMessagePartEncoder#Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoderContract.DotNetOpenAuth#Messaging#Reflection#IMessagePartEncoder#Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartFormattingEncoder">
            <summary>
            An interface describing how various objects can be serialized and deserialized between their object and string forms.
            </summary>
            <remarks>
            Implementations of this interface must include a default constructor and must be thread-safe.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.IMessagePartFormattingEncoder.FormattingType">
            <summary>
            Gets the type of the encoded values produced by this encoder, as they would appear in their preferred form.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartNullEncoder">
            <summary>
            A message part encoder that has a special encoding for a null value.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.IMessagePartNullEncoder.EncodedNullValue">
            <summary>
            Gets the string representation to include in a serialized message 
            when the message part has a <c>null</c> value.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartOriginalEncoder">
            <summary>
            An interface describing how various objects can be serialized and deserialized between their object and string forms.
            </summary>
            <remarks>
            Implementations of this interface must include a default constructor and must be thread-safe.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.IMessagePartOriginalEncoder.EncodeAsOriginalString(System.Object)">
            <summary>
            Encodes the specified value as the original value that was formerly decoded.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>The <paramref name="value"/> in string form, ready for message transport.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection">
            <summary>
            A cache of <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instances.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.reflectedMessageTypes">
            <summary>
            A dictionary of reflected message types and the generated reflection information.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.Get(System.Type,System.Version)">
            <summary>
            Gets a <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instance prepared for the
            given message type.
            </summary>
            <param name="messageType">A type that implements <see cref="T:DotNetOpenAuth.Messaging.IMessage"/>.</param>
            <param name="messageVersion">The protocol version of the message.</param>
            <returns>A <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.Get(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets a <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instance prepared for the
            given message type.
            </summary>
            <param name="message">The message for which a <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> should be obtained.</param>
            <returns>
            A <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instance.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.GetAccessor(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets the dictionary that provides read/write access to a message.
            </summary>
            <param name="message">The message.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.GetAccessor(DotNetOpenAuth.Messaging.IMessage,System.Boolean)">
            <summary>
            Gets the dictionary that provides read/write access to a message.
            </summary>
            <param name="message">The message.</param>
            <param name="getOriginalValues">A value indicating whether this message dictionary will retrieve original values instead of normalized ones.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion">
            <summary>
            A struct used as the key to bundle message type and version.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.type">
            <summary>
            Backing store for the <see cref="P:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.Type"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.version">
            <summary>
            Backing store for the <see cref="P:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.Version"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.#ctor(System.Type,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion"/> struct.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageVersion">The message version.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.op_Equality(DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion,DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.op_Inequality(DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion,DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.Type">
            <summary>
            Gets the message type.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection.MessageTypeAndVersion.Version">
            <summary>
            Gets the message version.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.DefaultEncoderAttribute">
            <summary>
            Allows a custom class or struct to be serializable between itself and a string representation.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.DefaultEncoderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.DefaultEncoderAttribute"/> class.
            </summary>
            <param name="converterType">The <see cref="T:DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder"/> implementing type to use for serializing this type.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.DefaultEncoderAttribute.Encoder">
            <summary>
            Gets the default encoder to use for the declaring class.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.StandardMessageFactory">
            <summary>
            A message factory that automatically selects the message type based on the incoming data.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageFactory">
            <summary>
            A tool to analyze an incoming message to figure out what concrete class
            is designed to deserialize it and instantiates that class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of 
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="recipient">The intended or actual recipient of the request message.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of 
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="request">
            The message that was sent as a request that resulted in the response.
            </param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardMessageFactory.requestMessageTypes">
            <summary>
            The request message types and their constructors to use for instantiating the messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardMessageFactory.responseMessageTypes">
            <summary>
            The response message types and their constructors to use for instantiating the messages.
            </summary>
            <value>
            The value is a dictionary, whose key is the type of the constructor's lone parameter.
            </value>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.StandardMessageFactory"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.AddMessageTypes(System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.Reflection.MessageDescription})">
            <summary>
            Adds message types to the set that this factory can create.
            </summary>
            <param name="messageTypes">The message types that this factory may instantiate.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="recipient">The intended or actual recipient of the request message.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="request">The message that was sent as a request that resulted in the response.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.GetMessageDescription(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the message type that best fits the given incoming request data.
            </summary>
            <param name="recipient">The recipient of the incoming data.  Typically not used, but included just in case.</param>
            <param name="fields">The data of the incoming message.</param>
            <returns>
            The message type that matches the incoming data; or <c>null</c> if no match.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">May be thrown if the incoming data is ambiguous.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.GetMessageDescription(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the message type that best fits the given incoming direct response data.
            </summary>
            <param name="request">The request message that prompted the response data.</param>
            <param name="fields">The data of the incoming message.</param>
            <returns>
            The message type that matches the incoming data; or <c>null</c> if no match.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">May be thrown if the incoming data is ambiguous.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.InstantiateAsRequest(DotNetOpenAuth.Messaging.Reflection.MessageDescription,DotNetOpenAuth.Messaging.MessageReceivingEndpoint)">
            <summary>
            Instantiates the given request message type.
            </summary>
            <param name="messageDescription">The message description.</param>
            <param name="recipient">The recipient.</param>
            <returns>The instantiated message.  Never null.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.InstantiateAsResponse(DotNetOpenAuth.Messaging.Reflection.MessageDescription,DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Instantiates the given request message type.
            </summary>
            <param name="messageDescription">The message description.</param>
            <param name="request">The request that resulted in this response.</param>
            <returns>The instantiated message.  Never null.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.GetDerivationDistance(System.Type,System.Type)">
            <summary>
            Gets the hierarchical distance between a type and a type it derives from or implements.
            </summary>
            <param name="assignableType">The base type or interface.</param>
            <param name="derivedType">The concrete class that implements the <paramref name="assignableType"/>.</param>
            <returns>The distance between the two types.  0 if the types are equivalent, 1 if the type immediately derives from or implements the base type, or progressively higher integers.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.CountInCommon(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.StringComparison)">
            <summary>
            Counts how many strings are in the intersection of two collections.
            </summary>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="comparison">The string comparison method to use.</param>
            <returns>A non-negative integer no greater than the count of elements in the smallest collection.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactory.FindMatchingResponseConstructors(DotNetOpenAuth.Messaging.Reflection.MessageDescription,System.Type)">
            <summary>
            Finds constructors for response messages that take a given request message type.
            </summary>
            <param name="messageDescription">The message description.</param>
            <param name="requestType">Type of the request message.</param>
            <returns>A sequence of matching constructors.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDataBagFormatterContract`1">
            <summary>
            Contract class for the IDataBagFormatter interface.
            </summary>
            <typeparam name="T">The type of DataBag to serialize.</typeparam>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDataBagFormatterContract`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IDataBagFormatterContract`1"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDataBagFormatterContract`1.DotNetOpenAuth#Messaging#IDataBagFormatter{T}#Serialize(`0)">
            <summary>
            Serializes the specified message.
            </summary>
            <param name="message">The message to serialize.  Must not be null.</param>
            <returns>A non-null, non-empty value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDataBagFormatterContract`1.DotNetOpenAuth#Messaging#IDataBagFormatter{T}#Deserialize(`0,System.String,DotNetOpenAuth.Messaging.IProtocolMessage,System.String)">
            <summary>
            Deserializes a <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>.
            </summary>
            <param name="message">The instance to deserialize into</param>
            <param name="data">The serialized form of the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> to deserialize.  Must not be null or empty.</param>
            <param name="containingMessage">The message that contains the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> serialized value.  Must not be nulll.</param>
            <param name="messagePartName">Name of the message part whose value is to be deserialized.  Used for exception messages.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1">
            <summary>
            A serializer for <see cref="T:DotNetOpenAuth.Messaging.DataBag"/>-derived types
            </summary>
            <typeparam name="T">The DataBag-derived type that is to be serialized/deserialized.</typeparam>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider,System.Boolean,System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1"/> class.
            </summary>
            <param name="signingKey">The crypto service provider with the asymmetric key to use for signing or verifying the token.</param>
            <param name="encryptingKey">The crypto service provider with the asymmetric key to use for encrypting or decrypting the token.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1"/> class.
            </summary>
            <param name="cryptoKeyStore">The crypto key store used when signing or encrypting.</param>
            <param name="bucket">The bucket in which symmetric keys are stored for signing/encrypting data.</param>
            <param name="signed">A value indicating whether the data in this instance will be protected against tampering.</param>
            <param name="encrypted">A value indicating whether the data in this instance will be protected against eavesdropping.</param>
            <param name="compressed">A value indicating whether the data in this instance will be GZip'd.</param>
            <param name="minimumAge">The minimum age.</param>
            <param name="maximumAge">The maximum age of a token that can be decoded; useful only when <paramref name="decodeOnceOnly"/> is <c>true</c>.</param>
            <param name="decodeOnceOnly">The nonce store to use to ensure that this instance is only decoded once.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1.SerializeCore(`0)">
            <summary>
            Serializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance to a buffer.
            </summary>
            <param name="message">The message.</param>
            <returns>The buffer containing the serialized data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UriStyleMessageFormatter`1.DeserializeCore(`0,System.Byte[])">
            <summary>
            Deserializes the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> instance from a buffer.
            </summary>
            <param name="message">The message instance to initialize with data from the buffer.</param>
            <param name="data">The data buffer.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel">
            <summary>
            A channel that uses the standard message factory.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.messageTypes">
            <summary>
            The message types receivable by this channel.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.versions">
            <summary>
            The protocol versions supported by this channel.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.#ctor(System.Collections.Generic.ICollection{System.Type},System.Collections.Generic.ICollection{System.Version},DotNetOpenAuth.Messaging.IChannelBindingElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel"/> class.
            </summary>
            <param name="messageTypes">The message types that might be encountered.</param>
            <param name="versions">All the possible message versions that might be encountered.</param>
            <param name="bindingElements">
            The binding elements to use in sending and receiving messages.
            The order they are provided is used for outgoing messgaes, and reversed for incoming messages.
            </param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.GetMessageDescriptions(System.Collections.Generic.ICollection{System.Type},System.Collections.Generic.ICollection{System.Version},DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection)">
            <summary>
            Generates all the message descriptions for a given set of message types and versions.
            </summary>
            <param name="messageTypes">The message types.</param>
            <param name="versions">The message versions.</param>
            <param name="descriptionsCache">The cache to use when obtaining the message descriptions.</param>
            <returns>The generated/retrieved message descriptions.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.StandardMessageFactory">
            <summary>
            Gets or sets a tool that can figure out what kind of message is being received
            so it can be deserialized.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.MessageDescriptions">
            <summary>
            Gets or sets the message descriptions.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.StandardMessageFactoryChannel.MessageFactory">
            <summary>
            Gets or sets a tool that can figure out what kind of message is being received
            so it can be deserialized.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.DataBag">
            <summary>
            A collection of message parts that will be serialized into a single string,
            to be set into a larger message.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBag.DefaultVersion">
            <summary>
            The default version for DataBags.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBag.version">
            <summary>
            The backing field for the <see cref="P:DotNetOpenAuth.Messaging.IMessage.Version"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.DataBag.extraData">
            <summary>
            A dictionary to contain extra message data.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBag.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.DataBag"/> class.
            </summary>
            <param name="version">The DataBag version.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBag.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.DataBag.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <value></value>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>The nonce.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.UtcCreationDate">
            <summary>
            Gets or sets the UTC creation date of this token.
            </summary>
            <value>The UTC creation date.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.ContainingMessage">
            <summary>
            Gets or sets the message that delivered this DataBag instance to this host.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.DataBag.BagType">
            <summary>
            Gets the type of this instance.
            </summary>
            <value>The type of the bag.</value>
            <remarks>
            This ensures that one token cannot be misused as another kind of token.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.TimestampEncoder">
            <summary>
            Translates between a <see cref="T:System.DateTime"/> and the number of seconds between it and 1/1/1970 12 AM
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.TimestampEncoder.Epoch">
            <summary>
            The reference date and time for calculating time stamps.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimestampEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.TimestampEncoder"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimestampEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimestampEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageWithBinaryData">
            <summary>
            The interface that classes must implement to be serialized/deserialized
            as protocol or extension messages that uses POST multi-part data for binary content.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDirectedProtocolMessage">
            <summary>
            Implemented by messages that have explicit recipients
            (direct requests and all indirect messages).
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IDirectedProtocolMessage.HttpMethods">
            <summary>
            Gets the preferred method of transport for the message.
            </summary>
            <remarks>
            For indirect messages this will likely be GET+POST, which both can be simulated in the user agent:
            the GET with a simple 301 Redirect, and the POST with an HTML form in the response with javascript
            to automate submission.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IDirectedProtocolMessage.Recipient">
            <summary>
            Gets the URL of the intended receiver of this message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryData.BinaryData">
            <summary>
            Gets the parts of the message that carry binary data.
            </summary>
            <value>A list of parts.  Never null.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryData.SendAsMultipart">
            <summary>
            Gets a value indicating whether this message should be sent as multi-part POST.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract">
            <summary>
            The contract class for the <see cref="T:DotNetOpenAuth.Messaging.IMessageWithBinaryData"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IMessageWithBinaryData#BinaryData">
            <summary>
            Gets the parts of the message that carry binary data.
            </summary>
            <value>A list of parts.  Never null.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IMessageWithBinaryData#SendAsMultipart">
            <summary>
            Gets a value indicating whether this message should be sent as multi-part POST.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <value></value>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IMessage#ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <value></value>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IDirectedProtocolMessage#HttpMethods">
            <summary>
            Gets the preferred method of transport for the message.
            </summary>
            <remarks>
            For indirect messages this will likely be GET+POST, which both can be simulated in the user agent:
            the GET with a simple 301 Redirect, and the POST with an HTML form in the response with javascript
            to automate submission.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IDirectedProtocolMessage#Recipient">
            <summary>
            Gets the URL of the intended receiver of this message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IProtocolMessage#RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IMessageWithBinaryDataContract.DotNetOpenAuth#Messaging#IProtocolMessage#Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ChannelEventArgs">
            <summary>
            The data packet sent with Channel events.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ChannelEventArgs.#ctor(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ChannelEventArgs"/> class.
            </summary>
            <param name="message">The message behind the fired event..</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ChannelEventArgs.Message">
            <summary>
            Gets the message that caused the event to fire.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore">
            <summary>
            An in-memory nonce store.  Useful for single-server web applications.
            NOT for web farms.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.INonceStore">
            <summary>
            Describes the contract a nonce store must fulfill.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.INonceStore.StoreNonce(System.String,System.String,System.DateTime)">
            <summary>
            Stores a given nonce and timestamp.
            </summary>
            <param name="context">The context, or namespace, within which the 
            <paramref name="nonce"/> must be unique.  
            The context SHOULD be treated as case-sensitive.
            The value will never be <c>null</c> but may be the empty string.</param>
            <param name="nonce">A series of random characters.</param>
            <param name="timestampUtc">The UTC timestamp that together with the nonce string make it unique
            within the given <paramref name="context"/>.
            The timestamp may also be used by the data store to clear out old nonces.</param>
            <returns>
            True if the context+nonce+timestamp (combination) was not previously in the database.
            False if the nonce was stored previously with the same timestamp and context.
            </returns>
            <remarks>
            The nonce must be stored for no less than the maximum time window a message may
            be processed within before being discarded as an expired message.
            This maximum message age can be looked up via the
            <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumMessageLifetime"/>
            property, accessible via the <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.Configuration"/>
            property.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.AutoCleaningFrequency">
            <summary>
            How frequently we should take time to clear out old nonces.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.maximumMessageAge">
            <summary>
            The maximum age a message can be before it is discarded.
            </summary>
            <remarks>
            This is useful for knowing how long used nonces must be retained.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.usedNonces">
            <summary>
            A list of the consumed nonces.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.nonceLock">
            <summary>
            A lock object used around accesses to the <see cref="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.usedNonces"/> field.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.nonceClearingCounter">
            <summary>
            Where we're currently at in our periodic nonce cleaning cycle.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore"/> class.
            </summary>
            <param name="maximumMessageAge">The maximum age a message can be before it is discarded.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.StoreNonce(System.String,System.String,System.DateTime)">
            <summary>
            Stores a given nonce and timestamp.
            </summary>
            <param name="context">The context, or namespace, within which the <paramref name="nonce"/> must be unique.</param>
            <param name="nonce">A series of random characters.</param>
            <param name="timestamp">The timestamp that together with the nonce string make it unique.
            The timestamp may also be used by the data store to clear out old nonces.</param>
            <returns>
            True if the nonce+timestamp (combination) was not previously in the database.
            False if the nonce was stored previously with the same timestamp.
            </returns>
            <remarks>
            The nonce must be stored for no less than the maximum time window a message may
            be processed within before being discarded as an expired message.
            If the binding element is applicable to your channel, this expiration window
            is retrieved or set using the
            <see cref="P:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.MaximumMessageAge"/> property.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore.ClearExpiredNonces">
            <summary>
            Clears consumed nonces from the cache that are so old they would be
            rejected if replayed because it is expired.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDirectWebRequestHandler">
            <summary>
            A contract for <see cref="T:System.Net.HttpWebRequest"/> handling.
            </summary>
            <remarks>
            Implementations of this interface must be thread safe.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandler.CanSupport(DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Determines whether this instance can support the specified options.
            </summary>
            <param name="options">The set of options that might be given in a subsequent web request.</param>
            <returns>
            	<c>true</c> if this instance can support the specified options; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandler.GetRequestStream(System.Net.HttpWebRequest)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <returns>
            The stream the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.
            Callers <i>must</i> close and dispose of the request stream when they are done
            writing to it to avoid taking up the connection too long and causing long waits on
            subsequent requests.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandler.GetRequestStream(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            The stream the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.
            Callers <i>must</i> close and dispose of the request stream when they are done
            writing to it to avoid taking up the connection too long and causing long waits on
            subsequent requests.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandler.GetResponse(System.Net.HttpWebRequest)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the 
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <returns>An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandler.GetResponse(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the 
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IDirectWebRequestHandler"/> type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#CanSupport(DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Determines whether this instance can support the specified options.
            </summary>
            <param name="options">The set of options that might be given in a subsequent web request.</param>
            <returns>
            	<c>true</c> if this instance can support the specified options; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetRequestStream(System.Net.HttpWebRequest)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <returns>
            The stream the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.
            Callers <i>must</i> close and dispose of the request stream when they are done
            writing to it to avoid taking up the connection too long and causing long waits on
            subsequent requests.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetRequestStream(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            The stream the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.
            Callers <i>must</i> close and dispose of the request stream when they are done
            writing to it to avoid taking up the connection too long and causing long waits on
            subsequent requests.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetResponse(System.Net.HttpWebRequest)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IDirectWebRequestHandlerContract.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetResponse(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement">
            <summary>
            A binding element that checks/verifies a nonce message part.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IChannelBindingElement">
            <summary>
            An interface that must be implemented by message transforms/validators in order
            to be included in the channel stack.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IChannelBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the 
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IChannelBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the 
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IChannelBindingElement.Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
            <remarks>
            This property is set by the channel when it is first constructed.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IChannelBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.AllowedCharacters">
            <summary>
            These are the characters that may be chosen from when forming a random nonce.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.nonceStore">
            <summary>
            The persistent store for nonces received.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.nonceLength">
            <summary>
            The length of generated nonces.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.#ctor(DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement"/> class.
            </summary>
            <param name="nonceStore">The store where nonces will be persisted and checked.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.#ctor(DotNetOpenAuth.Messaging.Bindings.INonceStore,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement"/> class.
            </summary>
            <param name="nonceStore">The store where nonces will be persisted and checked.</param>
            <param name="allowEmptyNonces">A value indicating whether zero-length nonces will be allowed.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Applies a nonce to the message.
            </summary>
            <param name="message">The message to apply replay protection to.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Verifies that the nonce in an incoming message has not been seen before.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException">Thrown when the nonce check revealed a replayed message.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.GenerateUniqueFragment">
            <summary>
            Generates a string of random characters for use as a nonce.
            </summary>
            <returns>The nonce string.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.Protection">
            <summary>
            Gets the protection that this binding element provides messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.NonceStrength">
            <summary>
            Gets or sets the strength of the nonce, which is measured by the number of
            nonces that could theoretically be generated.
            </summary>
            <remarks>
            The strength of the nonce is equal to the number of characters that might appear
            in the nonce to the power of the length of the nonce.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardReplayProtectionBindingElement.AllowZeroLengthNonce">
            <summary>
            Gets or sets a value indicating whether empty nonces are allowed.
            </summary>
            <value>Default is <c>false</c>.</value>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagePartAttribute">
            <summary>
            Applied to fields and properties that form a key/value in a protocol message.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagePartAttribute.name">
            <summary>
            The overridden name to use as the serialized name for the property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagePartAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.MessagePartAttribute"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagePartAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.MessagePartAttribute"/> class.
            </summary>
            <param name="name">
            A special name to give the value of this member in the serialized message.
            When null or empty, the name of the member will be used in the serialized message.
            </param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.Name">
            <summary>
            Gets the name of the serialized form of this member in the message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection">
            <summary>
            Gets or sets the level of protection required by this member in the serialized message.
            </summary>
            <remarks>
            Message part protection must be provided and verified by the channel binding element(s)
            that provide security.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether this member is a required part of the serialized message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.AllowEmpty">
            <summary>
            Gets or sets a value indicating whether the string value is allowed to be empty in the serialized message.
            </summary>
            <value>Default is true.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.Encoder">
            <summary>
            Gets or sets an IMessagePartEncoder custom encoder to use
            to translate the applied member to and from a string.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MinVersion">
            <summary>
            Gets or sets the minimum version of the protocol this attribute applies to
            and overrides any attributes with lower values for this property.
            </summary>
            <value>Defaults to 0.0.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MaxVersion">
            <summary>
            Gets or sets the maximum version of the protocol this attribute applies to.
            </summary>
            <value>Defaults to int.MaxValue for the major version number.</value>
            <remarks>
            Specifying <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MinVersion"/> on another attribute on the same member
            automatically turns this attribute off.  This property should only be set when
            a property is totally dropped from a newer version of the protocol.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.IsSecuritySensitive">
            <summary>
            Gets or sets a value indicating whether the value contained by this property contains
            sensitive information that should generally not be logged.
            </summary>
            <value>
            <c>true</c> if this instance is security sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MinVersionValue">
            <summary>
            Gets or sets the minimum version of the protocol this attribute applies to
            and overrides any attributes with lower values for this property.
            </summary>
            <value>Defaults to 0.0.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MaxVersionValue">
            <summary>
            Gets or sets the maximum version of the protocol this attribute applies to.
            </summary>
            <value>Defaults to int.MaxValue for the major version number.</value>
            <remarks>
            Specifying <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.MinVersion"/> on another attribute on the same member
            automatically turns this attribute off.  This property should only be set when
            a property is totally dropped from a newer version of the protocol.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessageProtections">
            <summary>
            Categorizes the various types of channel binding elements so they can be properly ordered.
            </summary>
            <remarks>
            The order of these enum values is significant.  
            Each successive value requires the protection offered by all the previous values
            in order to be reliable.  For example, message expiration is meaningless without
            tamper protection to prevent a user from changing the timestamp on a message.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageProtections.None">
            <summary>
            No protection.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageProtections.TamperProtection">
            <summary>
            A binding element that signs a message before sending and validates its signature upon receiving.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageProtections.Expiration">
            <summary>
            A binding element that enforces a maximum message age between sending and processing on the receiving side.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageProtections.ReplayProtection">
            <summary>
            A binding element that prepares messages for replay detection and detects replayed messages on the receiving side.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageProtections.All">
            <summary>
            All forms of protection together.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IChannelBindingElementContract">
            <summary>
            Code Contract for the <see cref="T:DotNetOpenAuth.Messaging.IChannelBindingElement"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IChannelBindingElementContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IChannelBindingElementContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IChannelBindingElementContract.DotNetOpenAuth#Messaging#IChannelBindingElement#ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IChannelBindingElementContract.DotNetOpenAuth#Messaging#IChannelBindingElement#ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IChannelBindingElementContract.DotNetOpenAuth#Messaging#IChannelBindingElement#Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
            <value></value>
            <remarks>
            This property is set by the channel when it is first constructed.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.IChannelBindingElementContract.DotNetOpenAuth#Messaging#IChannelBindingElement#Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <value></value>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException">
            <summary>
            An exception thrown when a message is received for the second time, signalling a possible
            replay attack.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException.#ctor(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException"/> class.
            </summary>
            <param name="faultedMessage">The replayed message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.ReplayedMessageException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException">
            <summary>
            An exception thrown when a message is received that exceeds the maximum message age limit.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException.#ctor(System.DateTime,DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException"/> class.
            </summary>
            <param name="utcExpirationDate">The date the message expired.</param>
            <param name="faultedMessage">The expired message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.InvalidSignatureException">
            <summary>
            An exception thrown when a signed message does not pass signature validation.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.InvalidSignatureException.#ctor(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.InvalidSignatureException"/> class.
            </summary>
            <param name="faultedMessage">The message with the invalid signature.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.InvalidSignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.InvalidSignatureException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage">
            <summary>
            The contract a message that has an allowable time window for processing must implement.
            </summary>
            <remarks>
            All replay-protected messages must also be set to expire so the nonces do not have
            to be stored indefinitely.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage">
            <summary>
            The contract a message that has an allowable time window for processing must implement.
            </summary>
            <remarks>
            All expiring messages must also be signed to prevent tampering with the creation date.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage.UtcCreationDate">
            <summary>
            Gets or sets the UTC date/time the message was originally sent onto the network.
            </summary>
            <remarks>
            The property setter should ensure a UTC date/time,
            and throw an exception if this is not possible.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when a DateTime that cannot be converted to UTC is set.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.NonceContext">
            <summary>
            Gets the context within which the nonce must be unique.
            </summary>
            <value>
            The value of this property must be a value assigned by the nonce consumer
            to represent the entity that generated the nonce.  The value must never be
            <c>null</c> but may be the empty string.
            This value is treated as case-sensitive.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.IReplayProtectedProtocolMessage.Nonce">
            <summary>
            Gets or sets the nonce that will protect the message from replay attacks.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.HttpRequestInfo">
            <summary>
            A property store of details of an incoming HTTP request.
            </summary>
            <remarks>
            This serves a very similar purpose to <see cref="T:System.Web.HttpRequest"/>, except that
            ASP.NET does not let us fully initialize that class, so we have to write one
            of our one.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.httpMethod">
            <summary>
            The HTTP verb in the request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.requestUri">
            <summary>
            The full request URL.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.headers">
            <summary>
            The HTTP headers.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.queryString">
            <summary>
            The variables defined in the query part of the URL.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.form">
            <summary>
            The POSTed form variables.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.serverVariables">
            <summary>
            The server variables collection.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpRequestInfo.cookies">
            <summary>
            The backing field for the <see cref="P:DotNetOpenAuth.Messaging.HttpRequestInfo.Cookies"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.#ctor(System.ServiceModel.Channels.HttpRequestMessageProperty,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HttpRequestInfo"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="requestUri">The request URI.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.#ctor(System.String,System.Uri,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Web.HttpCookieCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HttpRequestInfo"/> class.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form variables.</param>
            <param name="headers">The HTTP headers.</param>
            <param name="cookies">The cookies in the request.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.#ctor(System.Net.HttpListenerRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HttpRequestInfo"/> class.
            </summary>
            <param name="listenerRequest">Details on the incoming HTTP request.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.#ctor(System.Net.Http.HttpRequestMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HttpRequestInfo"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.#ctor(System.String,System.Uri,System.Collections.Specialized.NameValueCollection,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.HttpRequestInfo"/> class.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="requestUri">The request URI.</param>
            <param name="headers">The headers.</param>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.Create(System.ServiceModel.Channels.HttpRequestMessageProperty,System.Uri)">
            <summary>
            Creates an <see cref="T:System.Web.HttpRequestBase"/> instance that describes the specified HTTP request.
            </summary>
            <param name="request">The request.</param>
            <param name="requestUri">The request URI.</param>
            <returns>An instance of <see cref="T:System.Web.HttpRequestBase"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.Create(System.Net.HttpListenerRequest)">
            <summary>
            Creates an <see cref="T:System.Web.HttpRequestBase"/> instance that describes the specified HTTP request.
            </summary>
            <param name="listenerRequest">The listener request.</param>
            <returns>An instance of <see cref="T:System.Web.HttpRequestBase"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.Create(System.Net.Http.HttpRequestMessage)">
            <summary>
            Creates an <see cref="T:System.Web.HttpRequestBase"/> instance that describes the specified HTTP request.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>An instance of <see cref="T:System.Web.HttpRequestBase"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.Create(System.String,System.Uri,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates an <see cref="T:System.Web.HttpRequestBase"/> instance that describes the specified HTTP request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="requestUri">The request URI.</param>
            <param name="form">The form variables.</param>
            <param name="headers">The HTTP headers.</param>
            <returns>An instance of <see cref="T:System.Web.HttpRequestBase"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.Create(System.String,System.Uri,System.Collections.Specialized.NameValueCollection,System.IO.Stream)">
            <summary>
            Creates an <see cref="T:System.Web.HttpRequestBase"/> instance that describes the specified HTTP request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="requestUri">The request URI.</param>
            <param name="headers">The headers.</param>
            <param name="inputStream">The input stream.</param>
            <returns>An instance of <see cref="T:System.Web.HttpRequestBase"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.ParseFormData(System.String,System.Collections.Specialized.NameValueCollection,System.Func{System.IO.Stream})">
            <summary>
            Reads name=value pairs from the POSTed form entity when the HTTP headers indicate that that is the payload of the entity.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="headers">The headers.</param>
            <param name="inputStreamFunc">A function that returns the input stream.</param>
            <returns>The non-null collection of form variables.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.HttpRequestInfo.AddHeaders(System.Collections.Specialized.NameValueCollection,System.Net.Http.Headers.HttpHeaders)">
            <summary>
            Adds HTTP headers to a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="collectionToFill">The collection to be modified with added entries.</param>
            <param name="headers">The collection to read from.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.HttpMethod">
            <summary>
            Gets the HTTP method.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.RawUrl">
            <summary>
            Gets the raw URL.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.Form">
            <summary>
            Gets the form.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.QueryString">
            <summary>
            Gets the query string.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.ServerVariables">
            <summary>
            Gets the server variables.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.HttpRequestInfo.Cookies">
            <summary>
            Gets the collection of cookies that were sent by the client.
            </summary>
            <returns>The client's cookies.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.IMessageFactoryContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.Messaging.IMessageFactory"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageFactoryContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.Messaging.IMessageFactoryContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageFactoryContract.DotNetOpenAuth#Messaging#IMessageFactory#GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="recipient">The intended or actual recipient of the request message.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.IMessageFactoryContract.DotNetOpenAuth#Messaging#IMessageFactory#GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="request">The message that was sent as a request that resulted in the response.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage">
            <summary>
            The contract a message that is signed must implement.
            </summary>
            <remarks>
            This type might have appeared in the DotNetOpenAuth.Messaging.Bindings namespace since
            it is only used by types in that namespace, but all those types are internal and this
            is the only one that was public.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ITamperResistantProtocolMessage.Signature">
            <summary>
            Gets or sets the message signature.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessageSerializer">
            <summary>
            Serializes/deserializes OAuth messages for/from transit.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageSerializer.messageType">
            <summary>
            The specific <see cref="T:DotNetOpenAuth.Messaging.IMessage"/>-derived type
            that will be serialized and deserialized using this class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MessageSerializer class.
            </summary>
            <param name="messageType">The specific <see cref="T:DotNetOpenAuth.Messaging.IMessage"/>-derived type
            that will be serialized and deserialized using this class.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.Get(System.Type)">
            <summary>
            Creates or reuses a message serializer for a given message type.
            </summary>
            <param name="messageType">The type of message that will be serialized/deserialized.</param>
            <returns>A message serializer for the given message type.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.DeserializeJsonAsFlatDictionary(System.Collections.Generic.IDictionary{System.String,System.String},System.Xml.XmlDictionaryReader)">
            <summary>
            Reads JSON as a flat dictionary into a message.
            </summary>
            <param name="messageDictionary">The message dictionary to fill with the JSON-deserialized data.</param>
            <param name="reader">The JSON reader.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.Serialize(DotNetOpenAuth.Messaging.Reflection.MessageDictionary,System.Xml.XmlDictionaryWriter)">
            <summary>
            Reads the data from a message instance and writes an XML/JSON encoding of it.
            </summary>
            <param name="messageDictionary">The message to be serialized.</param>
            <param name="writer">The writer to use for the serialized form.</param>
            <remarks>
            Use <see cref="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)"/>
            to create the <see cref="T:System.Xml.XmlDictionaryWriter"/> instance capable of emitting JSON.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.Deserialize(DotNetOpenAuth.Messaging.Reflection.MessageDictionary,System.Xml.XmlDictionaryReader)">
            <summary>
            Reads XML/JSON into a message dictionary.
            </summary>
            <param name="messageDictionary">The message to deserialize into.</param>
            <param name="reader">The XML/JSON to read into the message.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when protocol rules are broken by the incoming message.</exception>
            <remarks>
            Use <see cref="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)"/>
            to create the <see cref="T:System.Xml.XmlDictionaryReader"/> instance capable of reading JSON.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.Serialize(DotNetOpenAuth.Messaging.Reflection.MessageDictionary)">
            <summary>
            Reads the data from a message instance and returns a series of name=value pairs for the fields that must be included in the message.
            </summary>
            <param name="messageDictionary">The message to be serialized.</param>
            <returns>The dictionary of values to send for the message.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.Deserialize(System.Collections.Generic.IDictionary{System.String,System.String},DotNetOpenAuth.Messaging.Reflection.MessageDictionary)">
            <summary>
            Reads name=value pairs into a message.
            </summary>
            <param name="fields">The name=value pairs that were read in from the transport.</param>
            <param name="messageDictionary">The message to deserialize into.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when protocol rules are broken by the incoming message.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageSerializer.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="type">The type to test.</param>
            <returns>
            	<c>true</c> if the specified type is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagingStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ArgumentPropertyMissing">
            <summary>
              Looks up a localized string similar to Argument&apos;s {0}.{1} property is required but is empty or null..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.BinaryDataRequiresMultipart">
            <summary>
              Looks up a localized string similar to Unable to send all message data because some of it requires multi-part POST, but IMessageWithBinaryData.SendAsMultipart was false..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.CurrentHttpContextRequired">
            <summary>
              Looks up a localized string similar to HttpContext.Current is null.  There must be an ASP.NET request in process for this operation to succeed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DataContractMissingFromMessageType">
            <summary>
              Looks up a localized string similar to DataContractSerializer could not be initialized on message type {0}.  Is it missing a [DataContract] attribute?.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DataContractMissingNamespace">
            <summary>
              Looks up a localized string similar to DataContractSerializer could not be initialized on message type {0} because the DataContractAttribute.Namespace property is not set..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DataCorruptionDetected">
            <summary>
              Looks up a localized string similar to Decoding failed due to data corruption..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DerivedTypeNotExpected">
            <summary>
              Looks up a localized string similar to An instance of type {0} was expected, but received unexpected derived type {1}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DirectedMessageMissingRecipient">
            <summary>
              Looks up a localized string similar to The directed message&apos;s Recipient property must not be null..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.DirectWebRequestOptionsNotSupported">
            <summary>
              Looks up a localized string similar to The given set of options is not supported by this web request handler..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.EncoderInstantiationFailed">
            <summary>
              Looks up a localized string similar to Unable to instantiate the message part encoder/decoder type {0}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ErrorDeserializingMessage">
            <summary>
              Looks up a localized string similar to Error while deserializing message {0}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ErrorInRequestReplyMessage">
            <summary>
              Looks up a localized string similar to Error occurred while sending a direct message or getting the response..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExceptionNotConstructedForTransit">
            <summary>
              Looks up a localized string similar to This exception was not constructed with a root request message that caused it..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExceptionUndeliverable">
            <summary>
              Looks up a localized string similar to This exception must be instantiated with a recipient that will receive the error message, or a direct request message instance that this exception will respond to..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExpectedMessageNotReceived">
            <summary>
              Looks up a localized string similar to Expected {0} message but received no recognizable message..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExpectedParameterWasMissing">
            <summary>
              Looks up a localized string similar to The message part {0} was expected in the {1} message but was not found..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExpiredMessage">
            <summary>
              Looks up a localized string similar to The message expired at {0} and it is now {1}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ExtraParameterAddFailure">
            <summary>
              Looks up a localized string similar to Failed to add extra parameter &apos;{0}&apos; with value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.GetOrPostFlagsRequired">
            <summary>
              Looks up a localized string similar to At least one of GET or POST flags must be present..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.HttpContextRequired">
            <summary>
              Looks up a localized string similar to This method requires a current HttpContext.  Alternatively, use an overload of this method that allows you to pass in information without an HttpContext..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.IndirectMessagesMustImplementIDirectedProtocolMessage">
            <summary>
              Looks up a localized string similar to Messages that indicate indirect transport must implement the {0} interface..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.InsecureWebRequestWithSslRequired">
            <summary>
              Looks up a localized string similar to Insecure web request for &apos;{0}&apos; aborted due to security requirements demanding HTTPS..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.InsufficientMessageProtection">
            <summary>
              Looks up a localized string similar to The {0} message required protections {{{1}}} but the channel could only apply {{{2}}}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.InvalidCustomBindingElementOrder">
            <summary>
              Looks up a localized string similar to The customized binding element ordering is invalid..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.InvalidMessageParts">
            <summary>
              Looks up a localized string similar to Some part(s) of the message have invalid values: {0}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.InvalidNonceReceived">
            <summary>
              Looks up a localized string similar to The incoming message had an invalid or missing nonce..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.KeyAlreadyExists">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessageExceedsGetSizePostNotAllowed">
            <summary>
              Looks up a localized string similar to Message too large for a HTTP GET, and HTTP POST is not allowed for this message type..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessageNotExtensible">
            <summary>
              Looks up a localized string similar to The {0} message does not support extensions..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessagePartEncoderWrongType">
            <summary>
              Looks up a localized string similar to The value for {0}.{1} on member {1} was expected to derive from {2} but was {3}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessagePartReadFailure">
            <summary>
              Looks up a localized string similar to Error while reading message &apos;{0}&apos; parameter &apos;{1}&apos; with value &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessagePartValueBase64DecodingFault">
            <summary>
              Looks up a localized string similar to Message parameter &apos;{0}&apos; with value &apos;{1}&apos; failed to base64 decode..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessagePartWriteFailure">
            <summary>
              Looks up a localized string similar to Error while preparing message &apos;{0}&apos; parameter &apos;{1}&apos; for sending..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MessageTimestampInFuture">
            <summary>
              Looks up a localized string similar to This message has a timestamp of {0}, which is beyond the allowable clock skew for in the future..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.MissingDecryptionKeyForHandle">
            <summary>
              Looks up a localized string similar to Missing decryption key for bucket &quot;{0}&quot; handle &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.NonEmptyStringExpected">
            <summary>
              Looks up a localized string similar to A non-empty string was expected..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.QueuedMessageResponseAlreadyExists">
            <summary>
              Looks up a localized string similar to A message response is already queued for sending in the response stream..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ReplayAttackDetected">
            <summary>
              Looks up a localized string similar to This message has already been processed.  This could indicate a replay attack in progress..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.ReplayProtectionNotSupported">
            <summary>
              Looks up a localized string similar to This channel does not support replay protection..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.RequiredMessagePartConstantIncorrect">
            <summary>
              Looks up a localized string similar to The following message parts had constant value requirements that were unsatisfied: {0}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.RequiredNonEmptyParameterWasEmpty">
            <summary>
              Looks up a localized string similar to The following required non-empty parameters were empty in the {0} message: {1}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.RequiredParametersMissing">
            <summary>
              Looks up a localized string similar to The following required parameters were missing from the {0} message: {1}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.RequiredProtectionMissing">
            <summary>
              Looks up a localized string similar to The binding element offering the {0} protection requires other protection that is not provided..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.SequenceContainsNoElements">
            <summary>
              Looks up a localized string similar to The list is empty..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.SequenceContainsNullElement">
            <summary>
              Looks up a localized string similar to The list contains a null element..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.SessionRequired">
            <summary>
              Looks up a localized string similar to An HttpContext.Current.Session object is required..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.SignatureInvalid">
            <summary>
              Looks up a localized string similar to Message signature was incorrect..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.SigningNotSupported">
            <summary>
              Looks up a localized string similar to This channel does not support signing messages.  To support signing messages, a derived Channel type must override the Sign and IsSignatureValid methods..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.StandardMessageFactoryUnsupportedMessageType">
            <summary>
              Looks up a localized string similar to This message factory does not support message type(s): {0}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.StreamMustHaveKnownLength">
            <summary>
              Looks up a localized string similar to The stream must have a known length..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.StreamUnreadable">
            <summary>
              Looks up a localized string similar to The stream&apos;s CanRead property returned false..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.StreamUnwritable">
            <summary>
              Looks up a localized string similar to The stream&apos;s CanWrite property returned false..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.TooManyBindingsOfferingSameProtection">
            <summary>
              Looks up a localized string similar to Expected at most 1 binding element to apply the {0} protection, but more than one applied..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.TooManyRedirects">
            <summary>
              Looks up a localized string similar to The maximum allowable number of redirects were exceeded while requesting &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedBufferLength">
            <summary>
              Looks up a localized string similar to Unexpected buffer length..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedEmptyArray">
            <summary>
              Looks up a localized string similar to The array must not be empty..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedEmptyString">
            <summary>
              Looks up a localized string similar to The empty string is not allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedHttpStatusCode">
            <summary>
              Looks up a localized string similar to Expected direct response to use HTTP status code {0} but was {1} instead..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedMessagePartValue">
            <summary>
              Looks up a localized string similar to Message parameter &apos;{0}&apos; had unexpected value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedMessagePartValueForConstant">
            <summary>
              Looks up a localized string similar to Expected message {0} parameter &apos;{1}&apos; to have value &apos;{2}&apos; but had &apos;{3}&apos; instead..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedMessageReceived">
            <summary>
              Looks up a localized string similar to Expected message {0} but received {1} instead..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedMessageReceivedOfMany">
            <summary>
              Looks up a localized string similar to Unexpected message type received..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedNullKey">
            <summary>
              Looks up a localized string similar to A null key was included and is not allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedNullOrEmptyKey">
            <summary>
              Looks up a localized string similar to A null or empty key was included and is not allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedNullValue">
            <summary>
              Looks up a localized string similar to A null value was included for key &apos;{0}&apos; and is not allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnexpectedType">
            <summary>
              Looks up a localized string similar to The type {0} or a derived type was expected, but {1} was given..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnrecognizedEnumValue">
            <summary>
              Looks up a localized string similar to {0} property has unrecognized value {1}..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnsafeWebRequestDetected">
            <summary>
              Looks up a localized string similar to The URL &apos;{0}&apos; is rated unsafe and cannot be requested this way..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnsupportedEncryptionAlgorithm">
            <summary>
              Looks up a localized string similar to This blob is not a recognized encryption format..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnsupportedHttpVerb">
            <summary>
              Looks up a localized string similar to The HTTP verb &apos;{0}&apos; is unrecognized and unsupported..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UnsupportedHttpVerbForMessageType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; messages cannot be received with HTTP verb &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.UntrustedRedirectsOnPOSTNotSupported">
            <summary>
              Looks up a localized string similar to Redirects on POST requests that are to untrusted servers is not supported..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingStrings.WebRequestFailed">
            <summary>
              Looks up a localized string similar to Web request to &apos;{0}&apos; failed..
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagingUtilities">
            <summary>
            A grab-bag of utility methods useful for the channel stack of the protocol.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.UppercaseLetters">
            <summary>
            The uppercase alphabet.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.LowercaseLetters">
            <summary>
            The lowercase alphabet.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.Digits">
            <summary>
            The set of base 10 digits.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.AlphaNumeric">
            <summary>
            The set of digits and alphabetic letters (upper and lowercase).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.Base64Characters">
            <summary>
            All the characters that are allowed for use as a base64 encoding character.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.Base64WebSafeCharacters">
            <summary>
            All the characters that are allowed for use as a base64 encoding character
            in the "web safe" context.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.AlphaNumericNoLookAlikes">
            <summary>
            The set of digits, and alphabetic letters (upper and lowercase) that are clearly
            visually distinguishable.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.SymmetricSecretHandleLength">
            <summary>
            The length of private symmetric secret handles.
            </summary>
            <remarks>
            This value needn't be high, as we only expect to have a small handful of unexpired secrets at a time,
            and handle recycling is permissible.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.CryptoRandomDataGenerator">
            <summary>
            The cryptographically strong random data generator used for creating secrets.
            </summary>
            <remarks>The random number generator is thread-safe.</remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.SymmetricSecretKeyLifespan">
            <summary>
            The default lifetime of a private secret.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.EqualsArray">
            <summary>
            A character array containing just the = character.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.CommaArray">
            <summary>
            A character array containing just the , character.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.QuoteArray">
            <summary>
            A character array containing just the " character.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.UriRfc3986CharsToEscape">
            <summary>
            The set of characters that are unreserved in RFC 2396 but are NOT unreserved in RFC 3986.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.javascriptStaticStringEscaping">
            <summary>
            A set of escaping mappings that help secure a string from javscript execution.
            </summary>
            <remarks>
            The characters to escape here are inspired by 
            http://code.google.com/p/doctype/wiki/ArticleXSSInJavaScript
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AsActionResult(DotNetOpenAuth.Messaging.OutgoingWebResponse)">
            <summary>
            Transforms an OutgoingWebResponse to an MVC-friendly ActionResult.
            </summary>
            <param name="response">The response to send to the user agent.</param>
            <returns>The <see cref="T:System.Web.Mvc.ActionResult"/> instance to be returned by the Controller's action method.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AsHttpResponseMessage(DotNetOpenAuth.Messaging.OutgoingWebResponse)">
            <summary>
            Transforms an OutgoingWebResponse to a Web API-friendly HttpResponseMessage.
            </summary>
            <param name="outgoingResponse">The response to send to the user agent.</param>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage"/> instance to be returned by the Web API method.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetRequestUrlFromContext">
            <summary>
            Gets the original request URL, as seen from the browser before any URL rewrites on the server if any.
            Cookieless session directory (if applicable) is also included.
            </summary>
            <returns>The URL in the user agent's Location bar.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.StripQueryArgumentsWithPrefix(System.Uri,System.String)">
            <summary>
            Strips any and all URI query parameters that start with some prefix.
            </summary>
            <param name="uri">The URI that may have a query with parameters to remove.</param>
            <param name="prefix">The prefix for parameters to remove.  A period is NOT automatically appended.</param>
            <returns>Either a new Uri with the parameters removed if there were any to remove, or the same Uri instance if no parameters needed to be removed.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.PostMultipart(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.IDirectWebRequestHandler,System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.MultipartPostPart})">
            <summary>
            Sends a multipart HTTP POST request (useful for posting files).
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="requestHandler">The request handler.</param>
            <param name="parts">The parts to include in the POST entity.</param>
            <returns>The HTTP response.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToStringDescriptive(System.Exception)">
            <summary>
            Assembles a message comprised of the message on a given exception and all inner exceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The assembled message.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the specified sequence of sequences.
            </summary>
            <typeparam name="T">The type of element contained in the sequence.</typeparam>
            <param name="sequence">The sequence of sequences to flatten.</param>
            <returns>A sequence of the contained items.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CutToSecond(System.DateTime)">
            <summary>
            Cuts off precision beyond a second on a DateTime value.
            </summary>
            <param name="value">The value.</param>
            <returns>A DateTime with a 0 millisecond component.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AppendQueryArgument(System.UriBuilder,System.String,System.String)">
            <summary>
            Adds a name-value pair to the end of a given URL
            as part of the querystring piece.  Prefixes a ? or &amp; before
            first element as necessary.
            </summary>
            <param name="builder">The UriBuilder to add arguments to.</param>
            <param name="name">The name of the parameter to add.</param>
            <param name="value">The value of the argument.</param>
            <remarks>
            If the parameters to add match names of parameters that already are defined
            in the query string, the existing ones are <i>not</i> replaced.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a set of values to a collection.
            </summary>
            <typeparam name="T">The type of value kept in the collection.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="values">The values to add to the collection.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Equals(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Tests whether two timespans are within reasonable approximation of each other.
            </summary>
            <param name="self">One TimeSpan.</param>
            <param name="other">The other TimeSpan.</param>
            <param name="marginOfError">The allowable margin of error.</param>
            <returns><c>true</c> if the two TimeSpans are within <paramref name="marginOfError"/> of each other.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.EqualsConstantTime(System.String,System.String)">
            <summary>
            Compares to string values for ordinal equality in such a way that its execution time does not depend on how much of the value matches.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>A value indicating whether the two strings share ordinal equality.</returns>
            <remarks>
            In signature equality checks, a difference in execution time based on how many initial characters match MAY
            be used as an attack to figure out the expected signature.  It is therefore important to make a signature
            equality check's execution time independent of how many characters match the expected value.
            See http://codahale.com/a-lesson-in-timing-attacks/ for more information.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetPublicFacingUrl(System.Web.HttpRequestBase,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the public facing URL for the given incoming HTTP request.
            </summary>
            <param name="request">The incoming request.  Cannot be <c>null</c>.</param>
            <param name="serverVariables">The server variables to consider part of the request.  Cannot be <c>null</c>.</param>
            <returns>
            The URI that the outside world used to create this request.
            </returns>
            <remarks>
            Although the <paramref name="serverVariables"/> value can be obtained from
            <see cref="P:System.Web.HttpRequest.ServerVariables"/>, it's useful to be able to pass them
            in so we can simulate injected values from our unit tests since the actual property
            is a read-only kind of <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetPublicFacingUrl(System.Web.HttpRequestBase)">
            <summary>
            Gets the public facing URL for the given incoming HTTP request.
            </summary>
            <param name="request">The incoming request.  Cannot be <c>null</c>.  Server variables are read from this request.</param>
            <returns>The URI that the outside world used to create this request.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetWebRoot">
            <summary>
            Gets the URL to the root of a web site, which may include a virtual directory path.
            </summary>
            <returns>An absolute URI.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CreateUntrustedXmlReaderSettings">
            <summary>
            Creates the XML reader settings to use for reading XML from untrusted sources.
            </summary>
            <returns>
            The new instance of <see cref="T:System.Xml.XmlReaderSettings"/>.
            </returns>
            <remarks>
            The default values set here are based on recommendations from
            http://msdn.microsoft.com/en-us/magazine/ee335713.aspx
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ResetContents``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clears any existing elements in a collection and fills the collection with a given set of values.
            </summary>
            <typeparam name="T">The type of value kept in the collection.</typeparam>
            <param name="collection">The collection to modify.</param>
            <param name="values">The new values to fill the collection.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.StripMessagePartsFromQueryString(System.Uri,DotNetOpenAuth.Messaging.Reflection.MessageDescription)">
            <summary>
            Strips any and all URI query parameters that serve as parts of a message.
            </summary>
            <param name="uri">The URI that may contain query parameters to remove.</param>
            <param name="messageDescription">The message description whose parts should be removed from the URL.</param>
            <returns>A cleaned URL.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.PostMultipartNoGetResponse(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.IDirectWebRequestHandler,System.Collections.Generic.IEnumerable{DotNetOpenAuth.Messaging.MultipartPostPart})">
            <summary>
            Sends a multipart HTTP POST request (useful for posting files) but doesn't call GetResponse on it.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="requestHandler">The request handler.</param>
            <param name="parts">The parts to include in the POST entity.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AssembleAuthorizationHeader(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Assembles the content of the HTTP Authorization or WWW-Authenticate header.
            </summary>
            <param name="fields">The fields to include.</param>
            <returns>
            A value prepared for an HTTP header.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AssembleAuthorizationHeader(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Assembles the content of the HTTP Authorization or WWW-Authenticate header.
            </summary>
            <param name="scheme">The scheme.</param>
            <param name="fields">The fields to include.</param>
            <returns>A value prepared for an HTTP header.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ParseAuthorizationHeader(System.String,System.String)">
            <summary>
            Parses the authorization header.
            </summary>
            <param name="scheme">The scheme.  Must not be null or empty.</param>
            <param name="authorizationHeader">The authorization header.  May be null or empty.</param>
            <returns>A sequence of key=value pairs discovered in the header.  Never null, but may be empty.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CombineKeyHandleAndPayload(System.String,System.String)">
            <summary>
            Encodes a symmetric key handle and the blob that is encrypted/signed with that key into a single string
            that can be decoded by <see cref="M:DotNetOpenAuth.Messaging.MessagingUtilities.ExtractKeyHandleAndPayload(System.String,System.String,System.String@,System.String@)"/>.
            </summary>
            <param name="handle">The cryptographic key handle.</param>
            <param name="payload">The encrypted/signed blob.</param>
            <returns>The combined encoded value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ExtractKeyHandleAndPayload(System.String,System.String,System.String@,System.String@)">
            <summary>
            Extracts the key handle and encrypted blob from a string previously returned from <see cref="M:DotNetOpenAuth.Messaging.MessagingUtilities.CombineKeyHandleAndPayload(System.String,System.String)"/>.
            </summary>
            <param name="messagePart">The message part. May be null if not applicable.</param>
            <param name="keyHandleAndBlob">The value previously returned from <see cref="M:DotNetOpenAuth.Messaging.MessagingUtilities.CombineKeyHandleAndPayload(System.String,System.String)"/>.</param>
            <param name="handle">The crypto key handle.</param>
            <param name="dataBlob">The encrypted/signed data.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetNonCryptoRandomData(System.Int32)">
            <summary>
            Gets a buffer of random data (not cryptographically strong).
            </summary>
            <param name="length">The length of the sequence to generate.</param>
            <returns>The generated values, which may contain zeros.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetCryptoRandomData(System.Int32)">
            <summary>
            Gets a cryptographically strong random sequence of values.
            </summary>
            <param name="length">The length of the sequence to generate.</param>
            <returns>The generated values, which may contain zeros.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetCryptoRandomDataAsBase64(System.Int32)">
            <summary>
            Gets a cryptographically strong random string of base64 characters.
            </summary>
            <param name="binaryLength">The length of the byte sequence to generate.</param>
            <returns>A base64 encoding of the generated random data, 
            whose length in characters will likely be greater than <paramref name="binaryLength"/>.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetNonCryptoRandomDataAsBase64(System.Int32,System.Boolean)">
            <summary>
            Gets a NON-cryptographically strong random string of base64 characters.
            </summary>
            <param name="binaryLength">The length of the byte sequence to generate.</param>
            <param name="useWeb64">A value indicating whether web64 encoding is used to avoid the need to escape characters.</param>
            <returns>
            A base64 encoding of the generated random data,
            whose length in characters will likely be greater than <paramref name="binaryLength" />.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetRandomString(System.Int32,System.String)">
            <summary>
            Gets a random string made up of a given set of allowable characters.
            </summary>
            <param name="length">The length of the desired random string.</param>
            <param name="allowableCharacters">The allowable characters.</param>
            <returns>A random string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String,System.Text.Encoding)">
            <summary>
            Computes the hash of a string.
            </summary>
            <param name="algorithm">The hash algorithm to use.</param>
            <param name="value">The value to hash.</param>
            <param name="encoding">The encoding to use when converting the string to a byte array.</param>
            <returns>A base64 encoded string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            Computes the hash of a sequence of key=value pairs.
            </summary>
            <param name="algorithm">The hash algorithm to use.</param>
            <param name="data">The data to hash.</param>
            <param name="encoding">The encoding to use when converting the string to a byte array.</param>
            <returns>A base64 encoded string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding)">
            <summary>
            Computes the hash of a sequence of key=value pairs.
            </summary>
            <param name="algorithm">The hash algorithm to use.</param>
            <param name="sortedData">The data to hash.</param>
            <param name="encoding">The encoding to use when converting the string to a byte array.</param>
            <returns>A base64 encoded string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts a byte buffer.
            </summary>
            <param name="buffer">The buffer to encrypt.</param>
            <param name="key">The symmetric secret to use to encrypt the buffer.  Allowed values are 128, 192, or 256 bytes in length.</param>
            <returns>The encrypted buffer</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts a byte buffer.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="key">The symmetric secret to use to decrypt the buffer.  Allowed values are 128, 192, and 256.</param>
            <returns>The encrypted buffer</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Encrypt(System.String,System.Byte[])">
            <summary>
            Encrypts a string.
            </summary>
            <param name="plainText">The text to encrypt.</param>
            <param name="key">The symmetric secret to use to encrypt the buffer.  Allowed values are 128, 192, and 256.</param>
            <returns>The encrypted buffer</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Decrypt(System.String,System.Byte[])">
            <summary>
            Decrypts a string previously encrypted with <see cref="M:DotNetOpenAuth.Messaging.MessagingUtilities.Encrypt(System.String,System.Byte[])"/>.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
            <param name="key">The symmetric secret to use to decrypt the buffer.  Allowed values are 128, 192, and 256.</param>
            <returns>The encrypted buffer</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.EncryptWithRandomSymmetricKey(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Performs asymmetric encryption of a given buffer.
            </summary>
            <param name="crypto">The asymmetric encryption provider to use for encryption.</param>
            <param name="buffer">The buffer to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.DecryptWithRandomSymmetricKey(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Performs asymmetric decryption of a given buffer.
            </summary>
            <param name="crypto">The asymmetric encryption provider to use for decryption.</param>
            <param name="buffer">The buffer to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetCurrentKey(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.String,System.TimeSpan,System.Int32)">
            <summary>
            Gets a key from a given bucket with the longest remaining life, or creates a new one if necessary.
            </summary>
            <param name="cryptoKeyStore">The crypto key store.</param>
            <param name="bucket">The bucket where the key should be found or stored.</param>
            <param name="minimumRemainingLife">The minimum remaining life required on the returned key.</param>
            <param name="keySize">The required size of the key, in bits.</param>
            <returns>
            A key-value pair whose key is the secret's handle and whose value is the cryptographic key.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Compress(System.Byte[],DotNetOpenAuth.Messaging.MessagingUtilities.CompressionMethod)">
            <summary>
            Compresses a given buffer.
            </summary>
            <param name="buffer">The buffer to compress.</param>
            <param name="method">The compression algorithm to use.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Decompress(System.Byte[],DotNetOpenAuth.Messaging.MessagingUtilities.CompressionMethod)">
            <summary>
            Decompresses a given buffer.
            </summary>
            <param name="buffer">The buffer to decompress.</param>
            <param name="method">The compression algorithm used.</param>
            <returns>The decompressed data.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ConvertToBase64WebSafeString(System.Byte[])">
            <summary>
            Converts to data buffer to a base64-encoded string, using web safe characters and with the padding removed.
            </summary>
            <param name="data">The data buffer.</param>
            <returns>A web-safe base64-encoded string without padding.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.FromBase64WebSafeString(System.String)">
            <summary>
            Decodes a (web-safe) base64-string back to its binary buffer form.
            </summary>
            <param name="base64WebSafe">The base64-encoded string.  May be web-safe encoded.</param>
            <returns>A data buffer.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ApplyHeadersToResponse(System.Net.WebHeaderCollection,System.Web.HttpResponseBase)">
            <summary>
            Adds a set of HTTP headers to an <see cref="T:System.Web.HttpResponse"/> instance,
            taking care to set some headers to the appropriate properties of
            <see cref="T:System.Web.HttpResponse"/>
            </summary>
            <param name="headers">The headers to add.</param>
            <param name="response">The <see cref="T:System.Web.HttpResponse"/> instance to set the appropriate values to.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ApplyHeadersToResponse(System.Net.WebHeaderCollection,System.Net.HttpListenerResponse)">
            <summary>
            Adds a set of HTTP headers to an <see cref="T:System.Web.HttpResponse"/> instance,
            taking care to set some headers to the appropriate properties of
            <see cref="T:System.Web.HttpResponse"/>
            </summary>
            <param name="headers">The headers to add.</param>
            <param name="response">The <see cref="T:System.Net.HttpListenerResponse"/> instance to set the appropriate values to.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CopyUpTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the contents of one stream to another.
            </summary>
            <param name="copyFrom">The stream to copy from, at the position where copying should begin.</param>
            <param name="copyTo">The stream to copy to, at the position where bytes should be written.</param>
            <param name="maximumBytesToCopy">The maximum bytes to copy.</param>
            <returns>The total number of bytes copied.</returns>
            <remarks>
            Copying begins at the streams' current positions.
            The positions are NOT reset after copying is complete.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CreateSnapshot(System.IO.Stream)">
            <summary>
            Creates a snapshot of some stream so it is seekable, and the original can be closed.
            </summary>
            <param name="copyFrom">The stream to copy bytes from.</param>
            <returns>A seekable stream with the same contents as the original.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Clone(System.Net.HttpWebRequest)">
            <summary>
            Clones an <see cref="T:System.Net.HttpWebRequest"/> in order to send it again.
            </summary>
            <param name="request">The request to clone.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.Clone(System.Net.HttpWebRequest,System.Uri)">
            <summary>
            Clones an <see cref="T:System.Net.HttpWebRequest"/> in order to send it again.
            </summary>
            <param name="request">The request to clone.</param>
            <param name="newRequestUri">The new recipient of the request.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AreEquivalent``1(``0[],``0[])">
            <summary>
            Tests whether two arrays are equal in contents and ordering.
            </summary>
            <typeparam name="T">The type of elements in the arrays.</typeparam>
            <param name="first">The first array in the comparison.  May be null.</param>
            <param name="second">The second array in the comparison.  May be null.</param>
            <returns>True if the arrays equal; false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AreEquivalentConstantTime(System.Byte[],System.Byte[])">
            <summary>
            Tests whether two arrays are equal in contents and ordering,
            guaranteeing roughly equivalent execution time regardless of where a signature mismatch may exist.
            </summary>
            <param name="first">The first array in the comparison.  May not be null.</param>
            <param name="second">The second array in the comparison. May not be null.</param>
            <returns>True if the arrays equal; false otherwise.</returns>
            <remarks>
            Guaranteeing equal execution time is useful in mitigating against timing attacks on a signature
            or other secret.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests two sequences for same contents and ordering.
            </summary>
            <typeparam name="T">The type of elements in the arrays.</typeparam>
            <param name="sequence1">The first sequence in the comparison.  May not be null.</param>
            <param name="sequence2">The second sequence in the comparison. May not be null.</param>
            <returns>True if the arrays equal; false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AreEquivalentUnordered``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Tests two unordered collections for same contents.
            </summary>
            <typeparam name="T">The type of elements in the collections.</typeparam>
            <param name="first">The first collection in the comparison.  May not be null.</param>
            <param name="second">The second collection in the comparison. May not be null.</param>
            <returns>True if the collections have the same contents; false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AreEquivalent``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Tests whether two dictionaries are equal in length and contents.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionaries.</typeparam>
            <typeparam name="TValue">The type of values in the dictionaries.</typeparam>
            <param name="first">The first dictionary in the comparison.  May not be null.</param>
            <param name="second">The second dictionary in the comparison. May not be null.</param>
            <returns>True if the arrays equal; false otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CreateQueryString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Concatenates a list of name-value pairs as key=value&amp;key=value,
            taking care to properly encode each key and value for URL
            transmission according to RFC 3986.  No ? is prefixed to the string.
            </summary>
            <param name="args">The dictionary of key/values to read from.</param>
            <returns>The formulated querystring style string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AppendQueryArgs(System.UriBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a set of name-value pairs to the end of a given URL
            as part of the querystring piece.  Prefixes a ? or &amp; before
            first element as necessary.
            </summary>
            <param name="builder">The UriBuilder to add arguments to.</param>
            <param name="args">
            The arguments to add to the query.  
            If null, <paramref name="builder"/> is not changed.
            </param>
            <remarks>
            If the parameters to add match names of parameters that already are defined
            in the query string, the existing ones are <i>not</i> replaced.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AppendFragmentArgs(System.UriBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds a set of name-value pairs to the end of a given URL
            as part of the fragment piece.  Prefixes a # or &amp; before
            first element as necessary.
            </summary>
            <param name="builder">The UriBuilder to add arguments to.</param>
            <param name="args">
            The arguments to add to the query.  
            If null, <paramref name="builder"/> is not changed.
            </param>
            <remarks>
            If the parameters to add match names of parameters that already are defined
            in the fragment, the existing ones are <i>not</i> replaced.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AppendAndReplaceQueryArgs(System.UriBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds parameters to a query string, replacing parameters that
            match ones that already exist in the query string.
            </summary>
            <param name="builder">The UriBuilder to add arguments to.</param>
            <param name="args">
            The arguments to add to the query.  
            If null, <paramref name="builder"/> is not changed.
            </param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetRecipient(System.Web.HttpRequestBase)">
            <summary>
            Extracts the recipient from an HttpRequestInfo.
            </summary>
            <param name="request">The request to get recipient information from.</param>
            <returns>The recipient.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the HTTP request is something we can't handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetHttpDeliveryMethod(System.String)">
            <summary>
            Gets the <see cref="T:DotNetOpenAuth.Messaging.HttpDeliveryMethods"/> enum value for a given HTTP verb.
            </summary>
            <param name="httpVerb">The HTTP verb.</param>
            <returns>A <see cref="T:DotNetOpenAuth.Messaging.HttpDeliveryMethods"/> enum value that is within the <see cref="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.HttpVerbMask"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the HTTP request is something we can't handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetHttpVerb(DotNetOpenAuth.Messaging.HttpDeliveryMethods)">
            <summary>
            Gets the HTTP verb to use for a given <see cref="T:DotNetOpenAuth.Messaging.HttpDeliveryMethods"/> enum value.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <returns>An HTTP verb, such as GET, POST, PUT, DELETE, PATCH, or OPTION.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AddExtraParameters(DotNetOpenAuth.Messaging.Reflection.MessageDictionary,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Copies some extra parameters into a message.
            </summary>
            <param name="messageDictionary">The message to copy the extra data into.</param>
            <param name="extraParameters">The extra data to copy into the message.  May be null to do nothing.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Collects a sequence of key=value pairs into a dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>A dictionary.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.AsKeyValuePairs(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Enumerates all members of the collection as key=value pairs.
            </summary>
            <param name="nvc">The collection to enumerate.</param>
            <returns>A sequence of pairs.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to an IDictionary&lt;string, string&gt;.
            </summary>
            <param name="nvc">The NameValueCollection to convert.  May be null.</param>
            <returns>The generated dictionary, or null if <paramref name="nvc"/> is null.</returns>
            <remarks>
            If a <c>null</c> key is encountered, its value is ignored since
            <c>Dictionary&lt;string, string&gt;</c> does not allow null keys.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToDictionary(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to an IDictionary&lt;string, string&gt;.
            </summary>
            <param name="nvc">The NameValueCollection to convert.  May be null.</param>
            <param name="throwOnNullKey">
            A value indicating whether a null key in the <see cref="T:System.Collections.Specialized.NameValueCollection"/> should be silently skipped since it is not a valid key in a Dictionary.  
            Use <c>true</c> to throw an exception if a null key is encountered.
            Use <c>false</c> to silently continue converting the valid keys.
            </param>
            <returns>The generated dictionary, or null if <paramref name="nvc"/> is null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="throwOnNullKey"/> is <c>true</c> and a null key is encountered.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to a <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
            <param name="data">The existing dictionary.</param>
            <returns>The new collection.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">A comparison function to compare keys.</param>
            <returns>An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.IsRequest(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Determines whether the specified message is a request (indirect message or direct request).
            </summary>
            <param name="message">The message in question.</param>
            <returns>
            	<c>true</c> if the specified message is a request; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Although an <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/> may implement the <see cref="T:DotNetOpenAuth.Messaging.IDirectedProtocolMessage"/>
            interface, it may only be doing that for its derived classes.  These objects are only requests
            if their <see cref="P:DotNetOpenAuth.Messaging.IDirectedProtocolMessage.Recipient"/> property is non-null.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.IsDirectResponse(DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage)">
            <summary>
            Determines whether the specified message is a direct response.
            </summary>
            <param name="message">The message in question.</param>
            <returns>
            	<c>true</c> if the specified message is a direct response; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Although an <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/> may implement the 
            <see cref="T:DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage"/> interface, it may only be doing 
            that for its derived classes.  These objects are only requests if their 
            <see cref="P:DotNetOpenAuth.Messaging.IDirectResponseProtocolMessage.OriginatingRequest"/> property is non-null.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.WriteBuffer(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a buffer, prefixed with its own length.
            </summary>
            <param name="writer">The binary writer.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ReadBuffer(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a buffer that is prefixed with its own length.
            </summary>
            <param name="reader">The binary reader positioned at the buffer length.</param>
            <param name="maxBufferSize">
            The maximum size of the buffer that should be permitted. 
            Although the stream will indicate the size of the buffer, this mitigates data corruption
            or DoS attacks causing the web server to allocate too much memory for a small data packet.
            </param>
            <returns>The read buffer.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CreateJsonObject(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Constructs a Javascript expression that will create an object
            on the user agent when assigned to a variable.
            </summary>
            <param name="namesAndValues">The untrusted names and untrusted values to inject into the JSON object.</param>
            <param name="valuesPreEncoded">if set to <c>true</c> the values will NOT be escaped as if it were a pure string.</param>
            <returns>The Javascript JSON object as a string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.SerializeAsJson(DotNetOpenAuth.Messaging.IMessage,DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection)">
            <summary>
            Serializes the given message as a JSON string.
            </summary>
            <param name="message">The message to serialize.</param>
            <param name="messageDescriptions">The cached message descriptions to use for reflection.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.SerializeAsJsonBytes(DotNetOpenAuth.Messaging.IMessage,DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection,System.Text.Encoding)">
            <summary>
            Serializes the given message as a JSON string.
            </summary>
            <param name="message">The message to serialize.</param>
            <param name="messageDescriptions">The cached message descriptions to use for reflection.</param>
            <param name="encoding">The encoding to use.  Defaults to <see cref="P:System.Text.Encoding.UTF8"/></param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.DeserializeFromJson(System.Byte[],DotNetOpenAuth.Messaging.IMessage,DotNetOpenAuth.Messaging.Reflection.MessageDescriptionCollection,System.Text.Encoding)">
            <summary>
            Deserializes a JSON object into a message.
            </summary>
            <param name="jsonBytes">The buffer containing the JSON string.</param>
            <param name="receivingMessage">The message to deserialize the object into.</param>
            <param name="messageDescriptions">The cache of message descriptions.</param>
            <param name="encoding">The encoding that the JSON bytes are in.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetSafeJavascriptValue(System.String)">
            <summary>
            Prepares what SHOULD be simply a string value for safe injection into Javascript
            by using appropriate character escaping.
            </summary>
            <param name="value">The untrusted string value to be escaped to protected against XSS attacks.  May be null.</param>
            <returns>The escaped string, surrounded by single-quotes.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.EscapeUriDataStringRfc3986(System.String)">
            <summary>
            Escapes a string according to the URI data string rules given in RFC 3986.
            </summary>
            <param name="value">The value to escape.</param>
            <returns>The escaped value.</returns>
            <remarks>
            The <see cref="M:System.Uri.EscapeDataString(System.String)"/> method is <i>supposed</i> to take on
            RFC 3986 behavior if certain elements are present in a .config file.  Even if this
            actually worked (which in my experiments it <i>doesn't</i>), we can't rely on every
            host actually having this configuration element present.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToLocalTimeSafe(System.DateTime)">
            <summary>
            Ensures that UTC times are converted to local times.  Unspecified kinds are unchanged.
            </summary>
            <param name="value">The date-time to convert.</param>
            <returns>The date-time in local time.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ToUniversalTimeSafe(System.DateTime)">
            <summary>
            Ensures that local times are converted to UTC times.  Unspecified kinds are unchanged.
            </summary>
            <param name="value">The date-time to convert.</param>
            <returns>The date-time in UTC time.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetQueryStringBeforeRewriting(System.Web.HttpRequestBase)">
            <summary>
            Gets the query data from the original request (before any URL rewriting has occurred.)
            </summary>
            <param name="request">The request.</param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing all the parameters in the query string.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetIsUrlRewritten(System.Web.HttpRequestBase)">
            <summary>
            Gets a value indicating whether the request's URL was rewritten by ASP.NET
            or some other module.
            </summary>
            <param name="request">The request.</param>
            <returns>A value indicating whether there is evidence that the URL of the request has been changed to some internal server (farm) representation.</returns>
            <value>
              <c>true</c> if this request's URL was rewritten; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.GetQueryOrForm(System.Web.HttpRequestBase)">
            <summary>
            Gets the query or form data from the original request (before any URL rewriting has occurred.)
            </summary>
            <param name="request">The request.</param>
            <returns>
            A set of name=value pairs.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.CreateSymmetricAlgorithm(System.Byte[])">
            <summary>
            Creates a symmetric algorithm for use in encryption/decryption.
            </summary>
            <param name="key">The symmetric key to use for encryption/decryption.</param>
            <returns>A symmetric algorithm.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingUtilities.NonCryptoRandomDataGenerator">
            <summary>
            Gets a random number generator for use on the current thread only.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagingUtilities.CompressionMethod">
            <summary>
            The available compression algorithms.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.CompressionMethod.Deflate">
            <summary>
            The Deflate algorithm.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.CompressionMethod.Gzip">
            <summary>
            The GZip algorithm.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagingUtilities.ThreadSafeRandom">
            <summary>
            A thread-safe, non-crypto random number generator.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.ThreadSafeRandom.threadRandomInitializer">
            <summary>
            The initializer of all new <see cref="T:System.Random"/> instances.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.ThreadSafeRandom.threadRandom">
            <summary>
            A thread-local instance of <see cref="T:System.Random"/>
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessagingUtilities.ThreadSafeRandom.RandomNumberGenerator">
            <summary>
            Gets a random number generator for use on the current thread only.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessagingUtilities.ComparisonHelper`1">
            <summary>
            A class to convert a <see cref="T:System.Comparison`1"/> into an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">The type of objects being compared.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessagingUtilities.ComparisonHelper`1.comparison">
            <summary>
            The comparison method to use.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ComparisonHelper`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the ComparisonHelper class.
            </summary>
            <param name="comparison">The comparison method to use.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessagingUtilities.ComparisonHelper`1.Compare(`0,`0)">
            <summary>
            Compares two instances of <typeparamref name="T"/>.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Any of -1, 0, or 1 according to standard comparison rules.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement">
            <summary>
            A message expiration enforcing binding element that supports messages
            implementing the <see cref="T:DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Sets the timestamp on an outgoing message.
            </summary>
            <param name="message">The outgoing message.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Reads the timestamp on a message and throws an exception if the message is too old.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.ExpiredMessageException">Thrown if the given message has already expired.</exception>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.DotNetOpenAuth#Messaging#IChannelBindingElement#Protection">
            <summary>
            Gets the protection offered by this binding element.
            </summary>
            <value><see cref="F:DotNetOpenAuth.Messaging.MessageProtections.Expiration"/></value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.MaximumMessageAge">
            <summary>
            Gets the maximum age a message implementing the 
            <see cref="T:DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage"/> interface can be before
            being discarded as too old.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping">
            <summary>
            A pair of conversion functions to map some type to a string and back again.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.ValueMapping.ValueToString">
            <summary>
            The mapping function that converts some custom type to a string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.ValueMapping.ValueToOriginalString">
            <summary>
            The mapping function that converts some custom type to the original string
            (possibly non-normalized) that represents it.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.ValueMapping.StringToValue">
            <summary>
            The mapping function that converts a string to some custom type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.ValueMapping.#ctor(System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping"/> struct.
            </summary>
            <param name="toString">The mapping function that converts some custom value to a string.</param>
            <param name="toOriginalString">The mapping function that converts some custom value to its original (non-normalized) string.  May be null if the same as the <paramref name="toString"/> function.</param>
            <param name="toValue">The mapping function that converts a string to some custom value.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.ValueMapping.#ctor(DotNetOpenAuth.Messaging.Reflection.IMessagePartEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping"/> struct.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.ValueMapping.Encoder">
            <summary>
            Gets the encoder.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription">
            <summary>
            A mapping between serialized key names and <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessagePart"/> instances describing
            those key/values pairs.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDescription.mapping">
            <summary>
            A mapping between the serialized key names and their 
            describing <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessagePart"/> instances.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.#ctor(System.Type,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageVersion">The message version.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.GetDictionary(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets a dictionary that provides read/write access to a message.
            </summary>
            <param name="message">The message the dictionary should provide access to.</param>
            <returns>The dictionary accessor to the message</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.GetDictionary(DotNetOpenAuth.Messaging.IMessage,System.Boolean)">
            <summary>
            Gets a dictionary that provides read/write access to a message.
            </summary>
            <param name="message">The message the dictionary should provide access to.</param>
            <param name="getOriginalValues">A value indicating whether this message dictionary will retrieve original values instead of normalized ones.</param>
            <returns>The dictionary accessor to the message</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.EnsureMessagePartsPassBasicValidation(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Ensures the message parts pass basic validation.
            </summary>
            <param name="parts">The key/value pairs of the serialized message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.CheckMessagePartsPassBasicValidation(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tests whether all the required message parts pass basic validation for the given data.
            </summary>
            <param name="parts">The key/value pairs of the serialized message.</param>
            <returns>A value indicating whether the provided data fits the message's basic requirements.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.CheckRequiredMessagePartsArePresent(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Verifies that a given set of keys include all the required parameters
            for this message type or throws an exception.
            </summary>
            <param name="keys">The names of all parameters included in a message.</param>
            <param name="throwOnFailure">if set to <c>true</c> an exception is thrown on failure with details.</param>
            <returns>A value indicating whether the provided data fits the message's basic requirements.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when required parts of a message are not in <paramref name="keys"/>
            if <paramref name="throwOnFailure"/> is <c>true</c>.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.CheckRequiredProtocolMessagePartsAreNotEmpty(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Ensures the protocol message parts that must not be empty are in fact not empty.
            </summary>
            <param name="partValues">A dictionary of key/value pairs that make up the serialized message.</param>
            <param name="throwOnFailure">if set to <c>true</c> an exception is thrown on failure with details.</param>
            <returns>A value indicating whether the provided data fits the message's basic requirements.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when required parts of a message are not in <paramref name="partValues"/>
            if <paramref name="throwOnFailure"/> is <c>true</c>.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.CheckMessagePartsConstantValues(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Checks that a bunch of message part values meet the constant value requirements of this message description.
            </summary>
            <param name="partValues">The part values.</param>
            <param name="throwOnFailure">if set to <c>true</c>, this method will throw on failure.</param>
            <returns>A value indicating whether all the requirements are met.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDescription.ReflectMessageType">
            <summary>
            Reflects over some <see cref="T:DotNetOpenAuth.Messaging.IMessage"/>-implementing type
            and prepares to serialize/deserialize instances of that type.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescription.Mapping">
            <summary>
            Gets the mapping between the serialized key names and their describing
            <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessagePart"/> instances.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescription.MessageVersion">
            <summary>
            Gets the message version this instance was generated from.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescription.MessageType">
            <summary>
            Gets the type of message this instance was generated from.
            </summary>
            <value>The type of the described message.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDescription.Constructors">
            <summary>
            Gets the constructors available on the message type.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.MessageDictionary">
            <summary>
            Wraps an <see cref="T:DotNetOpenAuth.Messaging.IMessage"/> instance in a dictionary that
            provides access to both well-defined message properties and "extra" 
            name/value pairs that have no properties associated with them.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.message">
            <summary>
            The <see cref="T:DotNetOpenAuth.Messaging.IMessage"/> instance manipulated by this dictionary.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.description">
            <summary>
            The <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDescription"/> instance that describes the message type.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.getOriginalValues">
            <summary>
            Whether original string values should be retrieved instead of normalized ones.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.#ctor(DotNetOpenAuth.Messaging.IMessage,DotNetOpenAuth.Messaging.Reflection.MessageDescription,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessageDictionary"/> class.
            </summary>
            <param name="message">The message instance whose values will be manipulated by this dictionary.</param>
            <param name="description">The message description.</param>
            <param name="getOriginalValues">A value indicating whether this message dictionary will retrieve original values instead of normalized ones.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Add(System.String,System.String)">
            <summary>
            Adds a named value to the message.
            </summary>
            <param name="key">The serialized form of the name whose value is being set.</param>
            <param name="value">The serialized form of the value.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="key"/> already has a set value in this message.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.ContainsKey(System.String)">
            <summary>
            Checks whether some named parameter has a value set in the message.
            </summary>
            <param name="key">The serialized form of the message part's name.</param>
            <returns>True if the parameter by the given name has a set value.  False otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Remove(System.String)">
            <summary>
            Removes a name and value from the message given its name.
            </summary>
            <param name="key">The serialized form of the name to remove.</param>
            <returns>True if a message part by the given name was found and removed.  False otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets some named value if the key has a value.
            </summary>
            <param name="key">The name (in serialized form) of the value being sought.</param>
            <param name="value">The variable where the value will be set.</param>
            <returns>True if the key was found and <paramref name="value"/> was set.  False otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Sets a named value in the message.
            </summary>
            <param name="item">The name-value pair to add.  The name is the serialized form of the key.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.ClearValues">
            <summary>
            Removes all values in the message.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
            <remarks>
            This method cannot be implemented because keys are not guaranteed to be removed
            since some are inherent to the type of message that this dictionary provides
            access to.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Checks whether a named value has been set on the message.
            </summary>
            <param name="item">The name/value pair.</param>
            <returns>True if the key exists and has the given value.  False otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies all the serializable data from the message to a key/value array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index in the <paramref name="array"/> to begin copying to.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes a named value from the message if it exists.
            </summary>
            <param name="item">The serialized form of the name and value to remove.</param>
            <returns>True if the name/value was found and removed.  False otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.GetEnumerator">
            <summary>
            Gets an enumerator that generates KeyValuePair&lt;string, string&gt; instances
            for all the key/value pairs that are set in the message.
            </summary>
            <returns>The enumerator that can generate the name/value pairs.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that generates KeyValuePair&lt;string, string&gt; instances
            for all the key/value pairs that are set in the message.
            </summary>
            <returns>The enumerator that can generate the name/value pairs.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Serialize">
            <summary>
            Saves the data in a message to a standard dictionary.
            </summary>
            <returns>The generated dictionary.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Deserialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Loads data from a dictionary into the message.
            </summary>
            <param name="fields">The data to load into the message.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Message">
            <summary>
            Gets the message this dictionary provides access to.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Description">
            <summary>
            Gets the description of the type of message this dictionary provides access to.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Count">
            <summary>
            Gets the number of explicitly set values in the message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#IsReadOnly">
            <summary>
            Gets a value indicating whether this message is read only.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Keys">
            <summary>
            Gets all the keys that have values associated with them.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.DeclaredKeys">
            <summary>
            Gets the set of official message part names that have non-null values associated with them.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.AdditionalKeys">
            <summary>
            Gets the keys that are in the message but not declared as official OAuth properties.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Values">
            <summary>
            Gets all the values.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Serializer">
            <summary>
            Gets the serializer for the message this dictionary provides access to.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessageDictionary.Item(System.String)">
            <summary>
            Gets or sets a value for some named value.
            </summary>
            <param name="key">The serialized form of a name for the value to read or write.</param>
            <returns>The named value.</returns>
            <remarks>
            If the key matches a declared property or field on the message type,
            that type member is set.  Otherwise the key/value is stored in a
            dictionary for extra (weakly typed) strings.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when setting a value that is not allowed for a given <paramref name="key"/>.</exception>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.Reflection.MessagePart">
            <summary>
            Describes an individual member of a message and assists in its serialization.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.converters">
            <summary>
            A map of converters that help serialize custom objects to string values and back again.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.encoders">
            <summary>
            A map of instantiated custom encoders used to encode/decode message parts.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.converter">
            <summary>
            The string-object conversion routines to use for this individual message part.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.property">
            <summary>
            The property that this message part is associated with, if aplicable.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.field">
            <summary>
            The field that this message part is associated with, if aplicable.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.memberDeclaredType">
            <summary>
            The type of the message part.  (Not the type of the message itself).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.Reflection.MessagePart.defaultMemberValue">
            <summary>
            The default (uninitialized) value of the member inherent in its type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessagePart"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.#ctor(System.Reflection.MemberInfo,DotNetOpenAuth.Messaging.MessagePartAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.Reflection.MessagePart"/> class.
            </summary>
            <param name="member">
            A property or field of an <see cref="T:DotNetOpenAuth.Messaging.IMessage"/> implementing type
            that has a <see cref="T:DotNetOpenAuth.Messaging.MessagePartAttribute"/> attached to it.
            </param>
            <param name="attribute">
            The attribute discovered on <paramref name="member"/> that describes the
            serialization requirements of the message part.
            </param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.SetValue(DotNetOpenAuth.Messaging.IMessage,System.String)">
            <summary>
            Sets the member of a given message to some given value.
            Used in deserialization.
            </summary>
            <param name="message">The message instance containing the member whose value should be set.</param>
            <param name="value">The string representation of the value to set.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.GetValue(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets the normalized form of a value of a member of a given message.
            Used in serialization.
            </summary>
            <param name="message">The message instance to read the value from.</param>
            <returns>The string representation of the member's value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.GetValue(DotNetOpenAuth.Messaging.IMessage,System.Boolean)">
            <summary>
            Gets the value of a member of a given message.
            Used in serialization.
            </summary>
            <param name="message">The message instance to read the value from.</param>
            <param name="originalValue">A value indicating whether the original value should be retrieved (as opposed to a normalized form of it).</param>
            <returns>The string representation of the member's value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsNondefaultValueSet(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets whether the value has been set to something other than its CLR type default value.
            </summary>
            <param name="message">The message instance to check the value on.</param>
            <returns>True if the value is not the CLR default value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.Map``1(System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.String,``0})">
            <summary>
            Adds a pair of type conversion functions to the static conversion map.
            </summary>
            <typeparam name="T">The custom type to convert to and from strings.</typeparam>
            <param name="toString">The function to convert the custom type to a string.</param>
            <param name="toOriginalString">The mapping function that converts some custom value to its original (non-normalized) string.  May be null if the same as the <paramref name="toString"/> function.</param>
            <param name="toValue">The function to convert a string to the custom type.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.CreateFallbackMapping(System.Type)">
            <summary>
            Creates a <see cref="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping"/> that resorts to <see cref="M:System.Object.ToString"/> and 
            <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)"/> for the conversion.
            </summary>
            <param name="type">The type to create the mapping for.</param>
            <returns>The value mapping.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.GetDefaultEncoder(System.Type)">
            <summary>
            Creates the default encoder for a given type.
            </summary>
            <param name="type">The type to create a <see cref="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping"/> for.</param>
            <returns>A <see cref="T:DotNetOpenAuth.Messaging.Reflection.ValueMapping"/> struct.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.DeriveDefaultValue(System.Type)">
            <summary>
            Figures out the CLR default value for a given type.
            </summary>
            <param name="type">The type whose default value is being sought.</param>
            <returns>Either null, or some default value like 0 or 0.0.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsNonNullableValueType(System.Type)">
            <summary>
            Checks whether a type is a nullable value type (i.e. int?)
            </summary>
            <param name="type">The type in question.</param>
            <returns>True if this is a nullable value type.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.GetEncoder(System.Type)">
            <summary>
            Retrieves a previously instantiated encoder of a given type, or creates a new one and stores it for later retrieval as well.
            </summary>
            <param name="messagePartEncoder">The message part encoder type.</param>
            <returns>An instance of the desired encoder.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.GetValueAsObject(DotNetOpenAuth.Messaging.IMessage)">
            <summary>
            Gets the value of the message part, without converting it to/from a string.
            </summary>
            <param name="message">The message instance to read from.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.SetValueAsObject(DotNetOpenAuth.Messaging.IMessage,System.Object)">
            <summary>
            Sets the value of a message part directly with a given value.
            </summary>
            <param name="message">The message instance to read from.</param>
            <param name="value">The value to set on the this part.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.ToValue(System.String)">
            <summary>
            Converts a string representation of the member's value to the appropriate type.
            </summary>
            <param name="value">The string representation of the member's value.</param>
            <returns>
            An instance of the appropriate type for setting the member.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.ToString(System.Object,System.Boolean)">
            <summary>
            Converts the member's value to its string representation.
            </summary>
            <param name="value">The value of the member.</param>
            <param name="originalString">A value indicating whether a string matching the originally decoded string should be returned (as opposed to a normalized string).</param>
            <returns>
            The string representation of the member's value.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.Reflection.MessagePart.ValidateSettings">
            <summary>
            Validates that the message part and its attribute have agreeable settings.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when a non-nullable value type is set as optional.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.Name">
            <summary>
            Gets or sets the name to use when serializing or deserializing this parameter in a message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.RequiredProtection">
            <summary>
            Gets or sets whether this message part must be signed.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsRequired">
            <summary>
            Gets or sets a value indicating whether this message part is required for the
            containing message to be valid.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.AllowEmpty">
            <summary>
            Gets or sets a value indicating whether the string value is allowed to be empty in the serialized message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsConstantValue">
            <summary>
            Gets or sets a value indicating whether the field or property must remain its default value.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsConstantValueAvailableStatically">
            <summary>
            Gets or sets a value indicating whether this part is defined as a constant field and can be read without a message instance.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.IsSecuritySensitive">
            <summary>
            Gets or sets a value indicating whether the value contained by this property contains
            sensitive information that should generally not be logged.
            </summary>
            <value>
            <c>true</c> if this instance is security sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.StaticConstantValue">
            <summary>
            Gets the static constant value for this message part without a message instance.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.MemberDeclaredType">
            <summary>
            Gets the type of the declared member.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.Reflection.MessagePart.PreferredFormattingType">
            <summary>
            Gets the type of the encoded values produced by this encoder, as they would appear in their preferred form.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.UnprotectedMessageException">
            <summary>
            An exception thrown when messages cannot receive all the protections they require.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UnprotectedMessageException.#ctor(DotNetOpenAuth.Messaging.IProtocolMessage,DotNetOpenAuth.Messaging.MessageProtections)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UnprotectedMessageException"/> class.
            </summary>
            <param name="faultedMessage">The message whose protection requirements could not be met.</param>
            <param name="appliedProtection">The protection requirements that were fulfilled.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UnprotectedMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UnprotectedMessageException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.OutgoingWebResponse">
            <summary>
            A protocol message (request or response) that passes from this
            to a remote party via the user agent using a redirect or form 
            POST submission, OR a direct message response.
            </summary>
            <remarks>
            <para>An instance of this type describes the HTTP response that must be sent
            in response to the current HTTP request.</para>
            <para>It is important that this response make up the entire HTTP response.
            A hosting ASPX page should not be allowed to render its normal HTML output
            after this response is sent.  The normal rendered output of an ASPX page 
            can be canceled by calling <see cref="M:System.Web.HttpResponse.End"/> after this message
            is sent on the response stream.</para>
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.OutgoingWebResponse.bodyStringEncoder">
            <summary>
            The encoder to use for serializing the response body.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponse"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.#ctor(System.Net.HttpWebResponse,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponse"/> class
            based on the contents of an <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to clone.</param>
            <param name="maximumBytesToRead">The maximum bytes to read from the response stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.GetResponseReader">
            <summary>
            Creates a text reader for the response stream.
            </summary>
            <returns>The text reader, initialized for the proper encoding.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send">
            <summary>
            Automatically sends the appropriate response to the user agent
            and ends execution on the current page or handler.
            </summary>
            <exception cref="T:System.Threading.ThreadAbortException">Typically thrown by ASP.NET in order to prevent additional data from the page being sent to the client and corrupting the response.</exception>
            <remarks>
            Requires a current HttpContext.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send(System.Web.HttpContext)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and ends execution on the current page or handler.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <exception cref="T:System.Threading.ThreadAbortException">Typically thrown by ASP.NET in order to prevent additional data from the page being sent to the client and corrupting the response.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send(System.Web.HttpContextBase)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and ends execution on the current page or handler.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <exception cref="T:System.Threading.ThreadAbortException">Typically thrown by ASP.NET in order to prevent additional data from the page being sent to the client and corrupting the response.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond">
            <summary>
            Automatically sends the appropriate response to the user agent
            and signals ASP.NET to short-circuit the page execution pipeline
            now that the response has been completed.
            Not safe to call from ASP.NET web forms.
            </summary>
            <remarks>
            Requires a current HttpContext.
            This call is not safe to make from an ASP.NET web form (.aspx file or code-behind) because
            ASP.NET will render HTML after the protocol message has been sent, which will corrupt the response.
            Use the <see cref="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send"/> method instead for web forms.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond(System.Web.HttpContext)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and signals ASP.NET to short-circuit the page execution pipeline
            now that the response has been completed.
            Not safe to call from ASP.NET web forms.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <remarks>
            This call is not safe to make from an ASP.NET web form (.aspx file or code-behind) because
            ASP.NET will render HTML after the protocol message has been sent, which will corrupt the response.
            Use the <see cref="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send"/> method instead for web forms.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond(System.Web.HttpContextBase)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and signals ASP.NET to short-circuit the page execution pipeline
            now that the response has been completed.
            Not safe to call from ASP.NET web forms.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <remarks>
            This call is not safe to make from an ASP.NET web form (.aspx file or code-behind) because
            ASP.NET will render HTML after the protocol message has been sent, which will corrupt the response.
            Use the <see cref="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send"/> method instead for web forms.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond(System.ServiceModel.Web.OutgoingWebResponseContext)">
            <summary>
            Submits this response to a WCF response context.  Only available when no response body is included.
            </summary>
            <param name="responseContext">The response context to apply the response to.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Send(System.Net.HttpListenerResponse)">
            <summary>
            Automatically sends the appropriate response to the user agent.
            </summary>
            <param name="response">The response to set to this message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.GetDirectUriRequest(DotNetOpenAuth.Messaging.Channel)">
            <summary>
            Gets the URI that, when requested with an HTTP GET request,
            would transmit the message that normally would be transmitted via a user agent redirect.
            </summary>
            <param name="channel">The channel to use for encoding.</param>
            <returns>
            The URL that would transmit the original message.  This URL may exceed the normal 2K limit,
            and should therefore be broken up manually and POSTed as form fields when it exceeds this length.
            </returns>
            <remarks>
            This is useful for desktop applications that will spawn a user agent to transmit the message
            rather than cause a redirect.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.SetResponse(System.String,System.Net.Mime.ContentType)">
            <summary>
            Sets the response to some string, encoded as UTF-8.
            </summary>
            <param name="body">The string to set the response to.</param>
            <param name="contentType">Type of the content.  May be null.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond(System.Web.HttpContext,System.Boolean)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and signals ASP.NET to short-circuit the page execution pipeline
            now that the response has been completed.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <param name="endRequest">If set to <c>false</c>, this method calls
            <see cref="M:System.Web.HttpApplication.CompleteRequest"/> rather than <see cref="M:System.Web.HttpResponse.End"/>
            to avoid a <see cref="T:System.Threading.ThreadAbortException"/>.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.OutgoingWebResponse.Respond(System.Web.HttpContextBase,System.Boolean)">
            <summary>
            Automatically sends the appropriate response to the user agent
            and signals ASP.NET to short-circuit the page execution pipeline
            now that the response has been completed.
            </summary>
            <param name="context">The context of the HTTP request whose response should be set.
            Typically this is <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <param name="endRequest">If set to <c>false</c>, this method calls
            <see cref="M:System.Web.HttpApplication.CompleteRequest"/> rather than <see cref="M:System.Web.HttpResponse.End"/>
            to avoid a <see cref="T:System.Threading.ThreadAbortException"/>.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.Headers">
            <summary>
            Gets the headers that must be included in the response to the user agent.
            </summary>
            <remarks>
            The headers in this collection are not meant to be a comprehensive list
            of exactly what should be sent, but are meant to augment whatever headers
            are generally included in a typical response.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.ResponseStream">
            <summary>
            Gets the body of the HTTP response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.IsResponseTruncated">
            <summary>
            Gets a value indicating whether the response stream is incomplete due
            to a length limitation imposed by the HttpWebRequest or calling method.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.Cookies">
            <summary>
            Gets the cookies collection to add as headers to the HTTP response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.Body">
            <summary>
            Gets or sets the body of the response as a string.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.Status">
            <summary>
            Gets the HTTP status code to use in the HTTP response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.OutgoingWebResponse.OriginalMessage">
            <summary>
            Gets or sets a reference to the actual protocol message that
            is being sent via the user agent.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.HttpDeliveryMethods">
            <summary>
            The methods available for the local party to send messages to a remote party.
            </summary>
            <remarks>
            See OAuth 1.0 spec section 5.2.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.None">
            <summary>
            No HTTP methods are allowed.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.AuthorizationHeaderRequest">
            <summary>
            In the HTTP Authorization header as defined in OAuth HTTP Authorization Scheme (OAuth HTTP Authorization Scheme).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.PostRequest">
            <summary>
            As the HTTP POST request body with a content-type of application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.GetRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.PutRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.DeleteRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.HeadRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.PatchRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.OptionsRequest">
            <summary>
            Added to the URLs in the query part (as defined by [RFC3986] (Berners-Lee, T., “Uniform Resource Identifiers (URI): Generic Syntax,” .) section 3).
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.HttpDeliveryMethods.HttpVerbMask">
            <summary>
            The flags that control HTTP verbs.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessageTransport">
            <summary>
            The type of transport mechanism used for a message: either direct or indirect.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageTransport.Direct">
            <summary>
            A message that is sent directly from the Consumer to the Service Provider, or vice versa.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.MessageTransport.Indirect">
            <summary>
            A message that is sent from one party to another via a redirect in the user agent.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.TimespanSecondsEncoder">
            <summary>
            Encodes and decodes the <see cref="T:System.TimeSpan"/> as an integer of total seconds.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimespanSecondsEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.TimespanSecondsEncoder"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimespanSecondsEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.TimespanSecondsEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.TimespanSecondsEncoder.FormattingType">
            <summary>
            Gets the type of the encoded values produced by this encoder, as they would appear in their preferred form.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler">
            <summary>
            A paranoid HTTP get/post request engine.  It helps to protect against attacks from remote
            server leaving dangling connections, sending too much data, causing requests against 
            internal servers, etc.
            </summary>
            <remarks>
            Protections include:
            * Conservative maximum time to receive the complete response.
            * Only HTTP and HTTPS schemes are permitted.
            * Internal IP address ranges are not permitted: 127.*.*.*, 1::*
            * Internal host names are not permitted (periods must be found in the host name)
            If a particular host would be permitted but is in the blacklist, it is not allowed.
            If a particular host would not be permitted but is in the whitelist, it is allowed.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.allowableSchemes">
            <summary>
            The set of URI schemes allowed in untrusted web requests.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.blacklistHosts">
            <summary>
            The collection of blacklisted hosts.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.blacklistHostsRegex">
            <summary>
            The collection of regular expressions used to identify additional blacklisted hosts.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.whitelistHosts">
            <summary>
            The collection of whitelisted hosts.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.whitelistHostsRegex">
            <summary>
            The collection of regular expressions used to identify additional whitelisted hosts.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.maximumRedirections">
            <summary>
            The maximum redirections to follow in the course of a single request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.maximumBytesToRead">
            <summary>
            The maximum number of bytes to read from the response of an untrusted server.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.chainedWebRequestHandler">
            <summary>
            The handler that will actually send the HTTP request and collect
            the response once the untrusted server gates have been satisfied.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.#ctor(DotNetOpenAuth.Messaging.IDirectWebRequestHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler"/> class.
            </summary>
            <param name="chainedWebRequestHandler">The chained web request handler.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.CanSupport(DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Determines whether this instance can support the specified options.
            </summary>
            <param name="options">The set of options that might be given in a subsequent web request.</param>
            <returns>
            	<c>true</c> if this instance can support the specified options; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.GetRequestStream(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            The writer the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.GetResponse(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.CachedDirectWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetRequestStream(System.Net.HttpWebRequest)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <returns>
            The writer the caller should write out the entity data to.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.DotNetOpenAuth#Messaging#IDirectWebRequestHandler#GetResponse(System.Net.HttpWebRequest)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.IsIPv6Loopback(System.Net.IPAddress)">
            <summary>
            Determines whether an IP address is the IPv6 equivalent of "localhost/127.0.0.1".
            </summary>
            <param name="ip">The ip address to check.</param>
            <returns>
            	<c>true</c> if this is a loopback IP address; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.IsHostInList(System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Text.RegularExpressions.Regex})">
            <summary>
            Determines whether the given host name is in a host list or host name regex list.
            </summary>
            <param name="host">The host name.</param>
            <param name="stringList">The list of host names.</param>
            <param name="regexList">The list of regex patterns of host names.</param>
            <returns>
            	<c>true</c> if the specified host falls within at least one of the given lists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.IsHostWhitelisted(System.String)">
            <summary>
            Determines whether a given host is whitelisted.
            </summary>
            <param name="host">The host name to test.</param>
            <returns>
            	<c>true</c> if the host is whitelisted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.IsHostBlacklisted(System.String)">
            <summary>
            Determines whether a given host is blacklisted.
            </summary>
            <param name="host">The host name to test.</param>
            <returns>
            	<c>true</c> if the host is blacklisted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.EnsureAllowableRequestUri(System.Uri,System.Boolean)">
            <summary>
            Verify that the request qualifies under our security policies
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="requireSsl">If set to <c>true</c>, only web requests that can be made entirely over SSL will succeed.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the URI is disallowed for security reasons.</exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.IsUriAllowable(System.Uri)">
            <summary>
            Determines whether a URI is allowed based on scheme and host name.
            No requireSSL check is done here
            </summary>
            <param name="uri">The URI to test for whether it should be allowed.</param>
            <returns>
            	<c>true</c> if [is URI allowable] [the specified URI]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.PrepareRequest(System.Net.HttpWebRequest,System.Boolean)">
            <summary>
            Prepares the request by setting timeout and redirect policies.
            </summary>
            <param name="request">The request to prepare.</param>
            <param name="preparingPost"><c>true</c> if this is a POST request whose headers have not yet been sent out; <c>false</c> otherwise.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.MaximumBytesToRead">
            <summary>
            Gets or sets the default maximum bytes to read in any given HTTP request.
            </summary>
            <value>Default is 1MB.  Cannot be less than 2KB.</value>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.MaximumRedirections">
            <summary>
            Gets or sets the total number of redirections to allow on any one request.
            Default is 10.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.ReadWriteTimeout">
            <summary>
            Gets or sets the time allowed to wait for single read or write operation to complete.
            Default is 500 milliseconds.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.Timeout">
            <summary>
            Gets or sets the time allowed for an entire HTTP request.  
            Default is 5 seconds.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.WhitelistHosts">
            <summary>
            Gets a collection of host name literals that should be allowed even if they don't
            pass standard security checks.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.WhitelistHostsRegex">
            <summary>
            Gets a collection of host name regular expressions that indicate hosts that should
            be allowed even though they don't pass standard security checks.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.BlacklistHosts">
            <summary>
            Gets a collection of host name literals that should be rejected even if they 
            pass standard security checks.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.BlacklistHostsRegex">
            <summary>
            Gets a collection of host name regular expressions that indicate hosts that should
            be rejected even if they pass standard security checks.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler.Configuration">
            <summary>
            Gets the configuration for this class that is specified in the host's .config file.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.StandardWebRequestHandler">
            <summary>
            The default handler for transmitting <see cref="T:System.Net.HttpWebRequest"/> instances
            and returning the responses.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardWebRequestHandler.SupportedOptions">
            <summary>
            The set of options this web request handler supports.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.StandardWebRequestHandler.userAgentValue">
            <summary>
            The value to use for the User-Agent HTTP header.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.CanSupport(DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Determines whether this instance can support the specified options.
            </summary>
            <param name="options">The set of options that might be given in a subsequent web request.</param>
            <returns>
            	<c>true</c> if this instance can support the specified options; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetRequestStream(System.Net.HttpWebRequest)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <returns>
            The writer the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetRequestStream(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Prepares an <see cref="T:System.Net.HttpWebRequest"/> that contains an POST entity for sending the entity.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> that should contain the entity.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            The writer the caller should write out the entity data to.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>The caller should have set the <see cref="P:System.Net.HttpWebRequest.ContentLength"/>
            and any other appropriate properties <i>before</i> calling this method.</para>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetResponse(System.Net.HttpWebRequest)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetResponse(System.Net.HttpWebRequest,DotNetOpenAuth.Messaging.DirectWebRequestOptions)">
            <summary>
            Processes an <see cref="T:System.Net.HttpWebRequest"/> and converts the
            <see cref="T:System.Net.HttpWebResponse"/> to a <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpWebRequest"/> to handle.</param>
            <param name="options">The options to apply to this web request.</param>
            <returns>
            An instance of <see cref="T:DotNetOpenAuth.Messaging.IncomingWebResponse"/> describing the response.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown for any network error.</exception>
            <remarks>
            	<para>Implementations should catch <see cref="T:System.Net.WebException"/> and wrap it in a
            <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> to abstract away the transport and provide
            a single exception type for hosts to catch.  The <see cref="P:System.Net.WebException.Response"/>
            value, if set, should be Closed before throwing.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.IsExceptionFrom417ExpectationFailed(System.Exception)">
            <summary>
            Determines whether an exception was thrown because of the remote HTTP server returning HTTP 417 Expectation Failed.
            </summary>
            <param name="ex">The caught exception.</param>
            <returns>
            	<c>true</c> if the failure was originally caused by a 417 Exceptation Failed error; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetRequestStreamCore(System.Net.HttpWebRequest)">
            <summary>
            Initiates a POST request and prepares for sending data.
            </summary>
            <param name="request">The HTTP request with information about the remote party to contact.</param>
            <returns>
            The stream where the POST entity can be written.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.StandardWebRequestHandler.PrepareRequest(System.Net.HttpWebRequest,System.Boolean)">
            <summary>
            Prepares an HTTP request.
            </summary>
            <param name="request">The request.</param>
            <param name="preparingPost"><c>true</c> if this is a POST request whose headers have not yet been sent out; <c>false</c> otherwise.</param>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.MessageReceivingEndpoint">
            <summary>
            An immutable description of a URL that receives messages.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageReceivingEndpoint.#ctor(System.String,DotNetOpenAuth.Messaging.HttpDeliveryMethods)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.MessageReceivingEndpoint"/> class.
            </summary>
            <param name="locationUri">The URL of this endpoint.</param>
            <param name="method">The HTTP method(s) allowed.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.MessageReceivingEndpoint.#ctor(System.Uri,DotNetOpenAuth.Messaging.HttpDeliveryMethods)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.MessageReceivingEndpoint"/> class.
            </summary>
            <param name="location">The URL of this endpoint.</param>
            <param name="method">The HTTP method(s) allowed.</param>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessageReceivingEndpoint.Location">
            <summary>
            Gets the URL of this endpoint.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.MessageReceivingEndpoint.AllowedMethods">
            <summary>
            Gets the HTTP method(s) allowed.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.DotNetOpenAuthSection">
            <summary>
            Represents the section in the host's .config file that configures
            this library's settings.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.SectionName">
            <summary>
            The name of the section under which this library's settings must be found.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.OpenIdElementName">
            <summary>
            The name of the &lt;openid&gt; sub-element.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.OAuthElementName">
            <summary>
            The name of the &lt;oauth&gt; sub-element.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.DotNetOpenAuthSection"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.GetNamedSection(System.String)">
            <summary>
            Gets a named section in this section group, or <c>null</c> if no such section is defined.
            </summary>
            <param name="name">The name of the section to obtain.</param>
            <returns>The desired section, or null if it could not be obtained.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.Messaging">
            <summary>
            Gets the messaging configuration element.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.DotNetOpenAuthSection.Reporting">
            <summary>
            Gets the reporting configuration element.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.MessagingElement">
            <summary>
            Represents the &lt;messaging&gt; element in the host's .config file.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.WebResourceUrlProviderName">
            <summary>
            The name of the &lt;webResourceUrlProvider&gt; sub-element.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.UntrustedWebRequestElementName">
            <summary>
            The name of the &lt;untrustedWebRequest&gt; sub-element.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.MaximumMessageLifetimeConfigName">
            <summary>
            The name of the attribute that stores the association's maximum lifetime.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.MaximumClockSkewConfigName">
            <summary>
            The name of the attribute that stores the maximum allowable clock skew.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.RelaxSslRequirementsConfigName">
            <summary>
            The name of the attribute that indicates whether to disable SSL requirements across the library.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.StrictConfigName">
            <summary>
            The name of the attribute that controls whether messaging rules are strictly followed.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.DefaultMaximumIndirectMessageUrlLength">
            <summary>
            The default value for the <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumIndirectMessageUrlLength"/> property.
            </summary>
            <value>
            2KB, recommended by OpenID group
            </value>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.MaximumIndirectMessageUrlLengthConfigName">
            <summary>
            The name of the attribute that controls the maximum length of a URL before it is converted
            to a POST payload.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.PrivateSecretMaximumAgeConfigName">
            <summary>
            Gets the name of the @privateSecretMaximumAge attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.MessagingElement.MessagingElementName">
            <summary>
            The name of the &lt;messaging&gt; sub-element.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.Configuration">
            <summary>
            Gets the configuration section from the .config file.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumMessageLifetime">
            <summary>
            Gets the actual maximum message lifetime that a program should allow.
            </summary>
            <value>The sum of the <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumMessageLifetime"/> and 
            <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumClockSkew"/> property values.</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.PrivateSecretMaximumAge">
            <summary>
            Gets or sets the maximum lifetime of a private symmetric secret,
            that may be used for signing or encryption.
            </summary>
            <value>The default value is 28 days (twice the age of the longest association).</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumMessageLifetimeNoSkew">
            <summary>
            Gets or sets the time between a message's creation and its receipt
            before it is considered expired.
            </summary>
            <value>
            The default value value is 3 minutes.
            </value>
            <remarks>
            	<para>Smaller timespans mean lower tolerance for delays in message delivery.
            Larger timespans mean more nonces must be stored to provide replay protection.</para>
            	<para>The maximum age a message implementing the
            <see cref="T:DotNetOpenAuth.Messaging.Bindings.IExpiringProtocolMessage"/> interface can be before
            being discarded as too old.</para>
            	<para>This time limit should NOT take into account expected 
            time skew for servers across the Internet.  Time skew is added to
            this value and is controlled by the <see cref="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumClockSkew"/> property.</para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumClockSkew">
            <summary>
            Gets or sets the maximum clock skew.
            </summary>
            <value>The default value is 10 minutes.</value>
            <remarks>
            	<para>Smaller timespans mean lower tolerance for 
            time variance due to server clocks not being synchronized.
            Larger timespans mean greater chance for replay attacks and
            larger nonce caches.</para>
            	<para>For example, if a server could conceivably have its
            clock d = 5 minutes off UTC time, then any two servers could have
            their clocks disagree by as much as 2*d = 10 minutes. </para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.RelaxSslRequirements">
            <summary>
            Gets or sets a value indicating whether SSL requirements within the library are disabled/relaxed.
            Use for TESTING ONLY.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.Strict">
            <summary>
            Gets or sets a value indicating whether messaging rules are strictly
            adhered to.
            </summary>
            <value><c>true</c> by default.</value>
            <remarks>
            Strict will require that remote parties adhere strictly to the specifications,
            even when a loose interpretation would not compromise security.
            <c>true</c> is a good default because it shakes out interoperability bugs in remote services
            so they can be identified and corrected.  But some web sites want things to Just Work
            more than they want to file bugs against others, so <c>false</c> is the setting for them.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.UntrustedWebRequest">
            <summary>
            Gets or sets the configuration for the <see cref="T:DotNetOpenAuth.Messaging.UntrustedWebRequestHandler"/> class.
            </summary>
            <value>The untrusted web request.</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.MaximumIndirectMessageUrlLength">
            <summary>
            Gets or sets the maximum allowable size for a 301 Redirect response before we send
            a 200 OK response with a scripted form POST with the parameters instead
            in order to ensure successfully sending a large payload to another server
            that might have a maximum allowable size restriction on its GET request.
            </summary>
            <value>The default value is 2048.</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.MessagingElement.EmbeddedResourceRetrievalProvider">
            <summary>
            Gets or sets the embedded resource retrieval provider.
            </summary>
            <value>
            The embedded resource retrieval provider.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.ReportingElement">
            <summary>
            Represents the &lt;reporting&gt; element in the host's .config file.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.EnabledAttributeName">
            <summary>
            The name of the @enabled attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.MinimumReportingIntervalAttributeName">
            <summary>
            The name of the @minimumReportingInterval attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.MinimumFlushIntervalAttributeName">
            <summary>
            The name of the @minimumFlushInterval attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.IncludeFeatureUsageAttributeName">
            <summary>
            The name of the @includeFeatureUsage attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.IncludeEventStatisticsAttributeName">
            <summary>
            The name of the @includeEventStatistics attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.IncludeLocalRequestUrisAttributeName">
            <summary>
            The name of the @includeLocalRequestUris attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.IncludeCulturesAttributeName">
            <summary>
            The name of the @includeCultures attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.ReportingElementName">
            <summary>
            The name of the &lt;reporting&gt; sub-element.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.ReportingElement.MinimumFlushIntervalDefault">
            <summary>
            The default value for the @minimumFlushInterval attribute.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.ReportingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.ReportingElement"/> class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.Configuration">
            <summary>
            Gets the configuration section from the .config file.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.Enabled">
            <summary>
            Gets or sets a value indicating whether this reporting is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.MinimumReportingInterval">
            <summary>
            Gets or sets the maximum frequency that reports will be published.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.MinimumFlushInterval">
            <summary>
            Gets or sets the maximum frequency the set can be flushed to disk.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.IncludeFeatureUsage">
            <summary>
            Gets or sets a value indicating whether to include a list of library features used in the report.
            </summary>
            <value><c>true</c> to include a report of features used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.IncludeEventStatistics">
            <summary>
            Gets or sets a value indicating whether to include statistics of certain events such as
            authentication success and failure counting, and can include remote endpoint URIs.
            </summary>
            <value>
            	<c>true</c> to include event counters in the report; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.IncludeLocalRequestUris">
            <summary>
            Gets or sets a value indicating whether to include a few URLs to pages on the hosting
            web site that host DotNetOpenAuth components.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.ReportingElement.IncludeCultures">
            <summary>
            Gets or sets a value indicating whether to include the cultures requested by the user agent
            on pages that host DotNetOpenAuth components.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection">
            <summary>
            A configuration collection of trusted OP Endpoints.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.RejectAssertionsFromUntrustedProvidersConfigName">
            <summary>
            The name of the "rejectAssertionsFromUntrustedProviders" element.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.#ctor(System.Collections.Generic.IEnumerable{DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection"/> class.
            </summary>
            <param name="elements">The elements to initialize the collection with.</param>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TrustedProviderConfigurationCollection.RejectAssertionsFromUntrustedProviders">
            <summary>
            Gets or sets a value indicating whether any login attempt coming from an OpenID Provider Endpoint that is not on this
            whitelist of trusted OP Endpoints will be rejected.  If the trusted providers list is empty and this value
            is true, all assertions are rejected.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement">
            <summary>
            A configuration element that records a trusted Provider Endpoint.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement.ProviderEndpointConfigName">
            <summary>
            The name of the attribute that stores the <see cref="P:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement.ProviderEndpoint"/> value.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement"/> class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TrustedProviderEndpointConfigurationElement.ProviderEndpoint">
            <summary>
            Gets or sets the OpenID Provider Endpoint (aka "OP Endpoint") that this relying party trusts.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1">
            <summary>
            A collection of <see cref="T:DotNetOpenAuth.Configuration.TypeConfigurationElement`1"/>.
            </summary>
            <typeparam name="T">The type that all types specified in the elements must derive from.</typeparam>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1.#ctor">
            <summary>
            Initializes a new instance of the TypeConfigurationCollection class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the TypeConfigurationCollection class.
            </summary>
            <param name="elements">The elements that should be added to the collection initially.</param>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1.CreateInstances(System.Boolean)">
            <summary>
            Creates instances of all the types listed in the collection.
            </summary>
            <param name="allowInternals">if set to <c>true</c> then internal types may be instantiated.</param>
            <returns>A sequence of instances generated from types in this collection.  May be empty, but never null.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.TypeConfigurationElement`1">
            <summary>
            Represents an element in a .config file that allows the user to provide a @type attribute specifying
            the full type that provides some service used by this library.
            </summary>
            <typeparam name="T">A constraint on the type the user may provide.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.CustomTypeConfigName">
            <summary>
            The name of the attribute whose value is the full name of the type the user is specifying.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.XamlReaderSourceConfigName">
            <summary>
            The name of the attribute whose value is the path to the XAML file to deserialize to obtain the type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.#ctor">
            <summary>
            Initializes a new instance of the TypeConfigurationElement class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.CreateInstance(`0)">
            <summary>
            Creates an instance of the type described in the .config file.
            </summary>
            <param name="defaultValue">The value to return if no type is given in the .config file.</param>
            <returns>The newly instantiated type.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.CreateInstance(`0,System.Boolean)">
            <summary>
            Creates an instance of the type described in the .config file.
            </summary>
            <param name="defaultValue">The value to return if no type is given in the .config file.</param>
            <param name="allowInternals">if set to <c>true</c> then internal types may be instantiated.</param>
            <returns>The newly instantiated type.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.CreateInstanceFromXaml(System.IO.Stream)">
            <summary>
            Creates the instance from xaml.
            </summary>
            <param name="xaml">The stream of xaml to deserialize.</param>
            <returns>The deserialized object.</returns>
            <remarks>
            This exists as its own method to prevent the CLR's JIT compiler from failing
            to compile the CreateInstance method just because the PresentationFramework.dll
            may be missing (which it is on some shared web hosts).  This way, if the
            XamlSource attribute is never used, the PresentationFramework.dll never need
            be present.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.TypeName">
            <summary>
            Gets or sets the full name of the type.
            </summary>
            <value>The full name of the type, such as: "ConsumerPortal.Code.CustomStore, ConsumerPortal".</value>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.XamlSource">
            <summary>
            Gets or sets the path to the XAML file to deserialize to obtain the instance.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.CustomType">
            <summary>
            Gets the type described in the .config file.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.TypeConfigurationElement`1.IsEmpty">
            <summary>
            Gets a value indicating whether this type has no meaningful type to instantiate.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.UntrustedWebRequestElement">
            <summary>
            Represents the section of a .config file where security policies regarding web requests
            to user-provided, untrusted servers is controlled.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.TimeoutConfigName">
            <summary>
            Gets the name of the @timeout attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.ReadWriteTimeoutConfigName">
            <summary>
            Gets the name of the @readWriteTimeout attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.MaximumBytesToReadConfigName">
            <summary>
            Gets the name of the @maximumBytesToRead attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.MaximumRedirectionsConfigName">
            <summary>
            Gets the name of the @maximumRedirections attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.WhitelistHostsConfigName">
            <summary>
            Gets the name of the @whitelistHosts attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.WhitelistHostsRegexConfigName">
            <summary>
            Gets the name of the @whitelistHostsRegex attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.BlacklistHostsConfigName">
            <summary>
            Gets the name of the @blacklistHosts attribute.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.BlacklistHostsRegexConfigName">
            <summary>
            Gets the name of the @blacklistHostsRegex attribute.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.ReadWriteTimeout">
            <summary>
            Gets or sets the read/write timeout after which an HTTP request will fail.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.Timeout">
            <summary>
            Gets or sets the timeout after which an HTTP request will fail.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.MaximumBytesToRead">
            <summary>
            Gets or sets the maximum bytes to read from an untrusted web server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.MaximumRedirections">
            <summary>
            Gets or sets the maximum redirections that will be followed before an HTTP request fails.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.WhitelistHosts">
            <summary>
            Gets or sets the collection of hosts on the whitelist.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.BlacklistHosts">
            <summary>
            Gets or sets the collection of hosts on the blacklist.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.WhitelistHostsRegex">
            <summary>
            Gets or sets the collection of regular expressions that describe hosts on the whitelist.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.UntrustedWebRequestElement.BlacklistHostsRegex">
            <summary>
            Gets or sets the collection of regular expressions that describe hosts on the blacklist.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.HostNameOrRegexCollection">
            <summary>
            Represents a collection of child elements that describe host names either as literal host names or regex patterns.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.HostNameOrRegexCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.HostNameOrRegexCollection"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.HostNameOrRegexCollection.CreateNewElement">
            <summary>
            Creates a new child host name element.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.HostNameOrRegexCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.HostNameOrRegexCollection.KeysAsStrings">
            <summary>
            Gets all the members of the collection assuming they are all literal host names.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.HostNameOrRegexCollection.KeysAsRegexs">
            <summary>
            Gets all the members of the collection assuming they are all host names regex patterns.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Configuration.HostNameElement">
            <summary>
            Represents the name of a single host or a regex pattern for host names.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.HostNameElement.NameConfigName">
            <summary>
            Gets the name of the @name attribute.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.HostNameElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.HostNameElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.HostNameElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.HostNameElement"/> class.
            </summary>
            <param name="name">The default value of the <see cref="P:DotNetOpenAuth.Configuration.HostNameElement.Name"/> property.</param>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.HostNameElement.Name">
            <summary>
            Gets or sets the name of the host on the white or black list.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.IEmbeddedResourceRetrieval">
            <summary>
            An interface that provides URLs from which embedded resources can be obtained.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.IEmbeddedResourceRetrieval.GetWebResourceUrl(System.Type,System.String)">
            <summary>
            Gets the URL from which the given manifest resource may be downloaded by the user agent.
            </summary>
            <param name="someTypeInResourceAssembly">Some type in the assembly containing the desired resource.</param>
            <param name="manifestResourceName">Manifest name of the desired resource.</param>
            <returns>An absolute URL.</returns>
        </member>
        <member name="T:DotNetOpenAuth.Logger">
            <summary>
            A general logger for the entire DotNetOpenAuth library.
            </summary>
            <remarks>
            Because this logger is intended for use with non-localized strings, the
            overloads that take <see cref="T:System.Globalization.CultureInfo"/> have been removed, and 
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> is used implicitly.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.Logger.library">
            <summary>
            The <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance that is to be used 
            by this static Logger for the duration of the appdomain.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.yadis">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Yadis"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.messaging">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Messaging"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.channel">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Channel"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.bindings">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Bindings"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.signatures">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Signatures"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.http">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Http"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.controls">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.Controls"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.openId">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.OpenId"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.oauth">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.OAuth"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Logger.infocard">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.Logger.InfoCard"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Logger.Create(System.String)">
            <summary>
            Creates an additional logger on demand for a subsection of the application.
            </summary>
            <param name="name">A name that will be included in the log file.</param>
            <returns>The <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance created with the given name.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Logger.CreateWithBanner(System.String)">
            <summary>
            Creates the main logger for the library, and emits an INFO message
            that is the name and version of the library.
            </summary>
            <param name="name">A name that will be included in the log file.</param>
            <returns>The <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance created with the given name.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Logger.Create(System.Type)">
            <summary>
            Creates an additional logger on demand for a subsection of the application.
            </summary>
            <param name="type">A type whose full name that will be included in the log file.</param>
            <returns>The <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance created with the given type name.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Logger.InitializeFacade(System.String)">
            <summary>
            Discovers the presence of Log4net.dll and other logging mechanisms
            and returns the best available logger.
            </summary>
            <param name="name">The name of the log to initialize.</param>
            <returns>The <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance of the logger to use.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Library">
            <summary>
            Gets the logger for general library logging.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Yadis">
            <summary>
            Gets the logger for service discovery and selection events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Messaging">
            <summary>
            Gets the logger for Messaging events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Channel">
            <summary>
            Gets the logger for Channel events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Bindings">
            <summary>
            Gets the logger for binding elements and binding-element related events on the channel.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Signatures">
            <summary>
            Gets the logger specifically used for logging verbose text on everything about the signing process.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Http">
            <summary>
            Gets the logger for HTTP-level events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.Controls">
            <summary>
            Gets the logger for events logged by ASP.NET controls.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.OpenId">
            <summary>
            Gets the logger for high-level OpenID events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.OAuth">
            <summary>
            Gets the logger for high-level OAuth events.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Logger.InfoCard">
            <summary>
            Gets the logger for high-level InfoCard events.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Loggers.ILog">
            <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:log4net.LogManager"/> to obtain logger instances
            that implement this interface. The <see cref="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)"/>
            static method is used to get logger instances.
            </para>
            <para>
            This class contains methods for logging at different levels and also
            has properties for determining if those logging levels are
            enabled in the current configuration.
            </para>
            <para>
            This interface can be implemented in different ways. This documentation
            specifies reasonable behavior that a caller can expect from the actual
            implementation, however different implementations reserve the right to
            do things differently.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.LogManager"/>
            <seealso cref="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Debug"/> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.DebugFormat(System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Info"/> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.InfoFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Warn"/> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.WarnFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Error"/> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.ErrorFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Fatal"/> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.FatalFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.ILog.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>string.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled"/>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Debug"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
            <para> For some ILog interface <c>log</c>, when you write:</para>
            <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
            <para>
            You incur the cost constructing the message, string construction and concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
            <para>
            If you are worried about speed (who isn't), then you should write:
            </para>
            <code lang="C#">
            if (log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <see cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/> and once in
            the <see cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log. This is the preferred style of logging.
            </para>
            <para>Alternatively if your logger is available statically then the is debug
            enabled state can be stored in a static variable like this:
            </para>
            <code lang="C#">
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
            <para>
            Then when you come to log you can write:
            </para>
            <code lang="C#">
            if (isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            <para>
            This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimized by the JIT compiler.
            </para>
            <para>
            Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.
            </para>
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Debug(System.Object)"/>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Info"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Info(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Warn"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Warn(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Error"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Error(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Fatal"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:DotNetOpenAuth.Loggers.ILog.Fatal(System.Object)"/>
            <seealso cref="P:DotNetOpenAuth.Loggers.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.Log4NetLogger.Initialize(System.String)">
            <summary>
            Returns a new log4net logger if it exists, or returns null if the assembly cannot be found.
            </summary>
            <returns>The created <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.Log4NetLogger.CreateLogger(System.String)">
            <summary>
            Creates the log4net.LogManager.  Call ONLY after log4net.dll is known to be present.
            </summary>
            <returns>The created <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.NoOpLogger.Initialize">
            <summary>
            Returns a new logger that does nothing when invoked.
            </summary>
            <returns>The created <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Debug(System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Debug(System.Object,System.Exception)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.DebugFormat(System.String,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Info(System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Info(System.Object,System.Exception)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.InfoFormat(System.String,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Warn(System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Warn(System.Object,System.Exception)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.WarnFormat(System.String,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Error(System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Error(System.Object,System.Exception)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.ErrorFormat(System.String,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Fatal(System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Fatal(System.Object,System.Exception)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.FatalFormat(System.String,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Loggers.TraceLogger.Initialize(System.String)">
            <summary>
            Returns a new logger that uses the <see cref="T:System.Diagnostics.Trace"/> class 
            if sufficient CAS permissions are granted to use it, otherwise returns false.
            </summary>
            <returns>The created <see cref="T:DotNetOpenAuth.Loggers.ILog"/> instance.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.TraceLogger.IsDebugEnabled">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.TraceLogger.IsInfoEnabled">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.TraceLogger.IsWarnEnabled">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.TraceLogger.IsErrorEnabled">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Loggers.TraceLogger.IsFatalEnabled">
            <summary>
            See <see cref="T:DotNetOpenAuth.Loggers.ILog"/>.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only dictionary.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.baseDictionary">
            <summary>
            Contains base dictionary.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="baseDictionary">The base dictionary.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.Messaging.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key being read or written.</param>
            <returns>
            The element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="T:DotNetOpenAuth.Reporting">
            <summary>
            The statistical reporting mechanism used so this library's project authors
            know what versions and features are in use.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.Utf8NoPreamble">
            <summary>
            A UTF8 encoder that doesn't emit the preamble.  Used for mid-stream writers.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.enabled">
            <summary>
            A value indicating whether reporting is desirable or not.  Must be logical-AND'd with !<see cref="F:DotNetOpenAuth.Reporting.broken"/>.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.broken">
            <summary>
            A value indicating whether reporting experienced an error and cannot be enabled.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.initialized">
            <summary>
            A value indicating whether the reporting class has been initialized or not.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.initializationSync">
            <summary>
            The object to lock during initialization.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.file">
            <summary>
            The isolated storage to use for collecting data in between published reports.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.reportOriginIdentity">
            <summary>
            The GUID that shows up at the top of all reports from this user/machine/domain.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.wellKnownPostLocation">
            <summary>
            The recipient of collected reports.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.webRequestHandler">
            <summary>
            The outgoing HTTP request handler to use for publishing reports.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.observedRequests">
            <summary>
            A few HTTP request hosts and paths we've seen.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.observedCultures">
            <summary>
            Cultures that have come in via HTTP requests.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.observedFeatures">
            <summary>
            Features that have been used.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.observations">
            <summary>
            A collection of all the observations to include in the report.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.events">
            <summary>
            The named events that we have counters for.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.publishingConsiderationLock">
            <summary>
            The lock acquired while considering whether to publish a report.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.lastPublished">
            <summary>
            The time that we last published reports.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DotNetOpenAuth.Reporting"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Reporting"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordEventOccurrence(System.String,System.String)">
            <summary>
            Records an event occurrence.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="category">The category within the event.  Null and empty strings are allowed, but considered the same.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordEventOccurrence(System.Object,System.String)">
            <summary>
            Records an event occurence.
            </summary>
            <param name="eventNameByObjectType">The object whose type name is the event name to record.</param>
            <param name="category">The category within the event.  Null and empty strings are allowed, but considered the same.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordFeatureUse(System.String)">
            <summary>
            Records the use of a feature by name.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordFeatureUse(System.Object)">
            <summary>
            Records the use of a feature by object type.
            </summary>
            <param name="value">The object whose type is the feature to set as used.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordFeatureAndDependencyUse(System.Object,System.Object)">
            <summary>
            Records the use of a feature by object type.
            </summary>
            <param name="value">The object whose type is the feature to set as used.</param>
            <param name="dependency1">Some dependency used by <paramref name="value"/>.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordFeatureAndDependencyUse(System.Object,System.Object,System.Object)">
            <summary>
            Records the use of a feature by object type.
            </summary>
            <param name="value">The object whose type is the feature to set as used.</param>
            <param name="dependency1">Some dependency used by <paramref name="value"/>.</param>
            <param name="dependency2">Some dependency used by <paramref name="value"/>.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.RecordRequestStatistics(System.Web.HttpRequestBase)">
            <summary>
            Records statistics collected from incoming requests.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.Touch">
            <summary>
            Called by every internal/public method on this class to give
            periodic operations a chance to run.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.Initialize">
            <summary>
            Initializes Reporting if it has not been initialized yet.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.GetReport">
            <summary>
            Assembles a report for submission.
            </summary>
            <returns>A stream that contains the report.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.SendStats">
            <summary>
            Sends the usage reports to the library authors.
            </summary>
            <returns>A value indicating whether submitting the report was successful.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.DemuxLogMessage(System.String)">
            <summary>
            Interprets the reporting response as a log message if possible.
            </summary>
            <param name="line">The line from the HTTP response to interpret as a log message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.SendStatsAsync">
            <summary>
            Sends the stats report asynchronously, and careful to not throw any unhandled exceptions.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.GetIsolatedStorage">
            <summary>
            Gets the isolated storage to use for reporting.
            </summary>
            <returns>An isolated storage location appropriate for our host.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.GetOrCreateOriginIdentity">
            <summary>
            Gets a unique, pseudonymous identifier for this particular web site or application.  
            </summary>
            <returns>A GUID that will serve as the identifier.</returns>
            <remarks>
            The identifier is made persistent by storing the identifier in isolated storage.
            If an existing identifier is not found, a new one is created, persisted, and returned.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.SanitizeFileName(System.String)">
            <summary>
            Sanitizes the name of the file so it only includes valid filename characters.
            </summary>
            <param name="fileName">The filename to sanitize.</param>
            <returns>The filename, with any and all invalid filename characters replaced with the hyphen (-) character.</returns>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.Enabled">
            <summary>
            Gets or sets a value indicating whether this reporting is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <remarks>
            Setting this property to <c>true</c> <i>may</i> have no effect
            if reporting has already experienced a failure of some kind.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.ObservedFeatures">
            <summary>
            Gets the observed features.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.Configuration">
            <summary>
            Gets the configuration to use for reporting.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Reporting.PersistentHashSet">
            <summary>
            A set of values that persist the set to disk.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.fileStream">
            <summary>
            The isolated persistent storage.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.reader">
            <summary>
            The persistent reader.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.writer">
            <summary>
            The persistent writer.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.memorySet">
            <summary>
            The total set of elements.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.maximumElements">
            <summary>
            The maximum number of elements to track before not storing new elements.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.newElements">
            <summary>
            The set of new elements added to the <see cref="F:DotNetOpenAuth.Reporting.PersistentHashSet.memorySet"/> since the last flush.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.lastFlushed">
            <summary>
            The time the last flush occurred.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentHashSet.dirty">
            <summary>
            A flag indicating whether the set has changed since it was last flushed.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentHashSet.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Reporting.PersistentHashSet"/> class.
            </summary>
            <param name="storage">The storage location.</param>
            <param name="fileName">Name of the file.</param>
            <param name="maximumElements">The maximum number of elements to track.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentHashSet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentHashSet.Add(System.String)">
            <summary>
            Adds a value to the set.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentHashSet.Flush">
            <summary>
            Flushes any newly added values to disk.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentHashSet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.PersistentHashSet.IsFull">
            <summary>
            Gets a value indicating whether the hashset has reached capacity and is not storing more elements.
            </summary>
            <value><c>true</c> if this instance is full; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.PersistentHashSet.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:DotNetOpenAuth.Reporting.PersistentCounter">
            <summary>
            A feature usage counter.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.separator">
            <summary>
            The separator to use between category names and their individual counters.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.fileStream">
            <summary>
            The isolated persistent storage.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.reader">
            <summary>
            The persistent reader.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.writer">
            <summary>
            The persistent writer.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.lastFlushed">
            <summary>
            The time the last flush occurred.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.counters">
            <summary>
            The in-memory copy of the counter.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Reporting.PersistentCounter.dirty">
            <summary>
            A flag indicating whether the set has changed since it was last flushed.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Reporting.PersistentCounter"/> class.
            </summary>
            <param name="storage">The storage location.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.Increment(System.String)">
            <summary>
            Increments the counter.
            </summary>
            <param name="category">The category within the event.  Null and empty strings are allowed, but considered the same.</param>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.Flush">
            <summary>
            Flushes any newly added values to disk.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.Reset">
            <summary>
            Resets all counters.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Reporting.PersistentCounter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.Reporting.PersistentCounter.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:DotNetOpenAuth.Requires">
            <summary>
            Argument validation checks that throw some kind of ArgumentException when they fail (unless otherwise noted).
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Requires.NotNull``1(``0,System.String)">
            <summary>
            Validates that a given parameter is not null.
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The tested value, guaranteed to not be null.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates that a parameter is not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns>The validated value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Requires.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Validates that an array is not null or empty.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.NullOrWithNoNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Validates that an argument is either null or is a sequence with no null elements.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.InRange(System.Boolean,System.String,System.String)">
            <summary>
            Validates some expression describing the acceptable range for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.True(System.Boolean,System.String,System.String)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.ArgumentException"/>.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.True(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.ArgumentException"/>.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.ValidState(System.Boolean)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.InvalidOperationException"/>.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.ValidState(System.Boolean,System.String)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="message">The message to include with the exception.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.ValidState(System.Boolean,System.String,System.Object[])">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="unformattedMessage">The unformatted message.</param>
            <param name="args">Formatting arguments.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.NotNullSubtype``1(System.Type,System.String)">
            <summary>
            Validates that some argument describes a type that is or derives from a required type.
            </summary>
            <typeparam name="T">The type that the argument must be or derive from.</typeparam>
            <param name="type">The type given in the argument.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.Format(System.Boolean,System.String)">
            <summary>
            Validates some expression describing the acceptable condition for an argument evaluates to true.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.FormatException"/>.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.Support(System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.NotSupportedException"/> if a condition does not evaluate to <c>true</c>.
            </summary>
            <param name="condition">The expression that must evaluate to true to avoid an <see cref="T:System.NotSupportedException"/>.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DotNetOpenAuth.Requires.Fail(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:DotNetOpenAuth.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.ConfigurationTypeMustBePublic">
            <summary>
              Looks up a localized string similar to The configuration-specified type {0} must be public, and is not..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.ConfigurationXamlReferenceRequiresHttpContext">
            <summary>
              Looks up a localized string similar to The configuration XAML reference to {0} requires a current HttpContext to resolve..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.EmbeddedResourceUrlProviderRequired">
            <summary>
              Looks up a localized string similar to The current IHttpHandler is not one of types: {0}.  An embedded resource URL provider must be set in your .config file..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.EmptyStringNotAllowed">
            <summary>
              Looks up a localized string similar to The empty string is not allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.InvalidArgument">
            <summary>
              Looks up a localized string similar to The argument has an unexpected value..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.RequiredPropertyNotYetPreset">
            <summary>
              Looks up a localized string similar to The property {0} must be set before this operation is allowed..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.ResponseBodyNotSupported">
            <summary>
              Looks up a localized string similar to This object contains a response body, which is not supported..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Strings.StoreRequiredWhenNoHttpContextAvailable">
            <summary>
              Looks up a localized string similar to No current HttpContext was detected, so an {0} instance must be explicitly provided or specified in the .config file.  Call the constructor overload that takes an {0}..
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.UriUtil">
            <summary>
            Utility methods for working with URIs.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.UriUtil.QueryStringContainPrefixedParameters(System.Uri,System.String)">
            <summary>
            Tests a URI for the presence of an OAuth payload.
            </summary>
            <param name="uri">The URI to test.</param>
            <param name="prefix">The prefix.</param>
            <returns>
            True if the URI contains an OAuth message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.UriUtil.IsTransportSecure(System.Uri)">
            <summary>
            Determines whether some <see cref="T:System.Uri"/> is using HTTPS.
            </summary>
            <param name="uri">The Uri being tested for security.</param>
            <returns>
            	<c>true</c> if the URI represents an encrypted request; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.UriUtil.ToStringWithImpliedPorts(System.UriBuilder)">
            <summary>
            Equivalent to UriBuilder.ToString() but omits port # if it may be implied.
            Equivalent to UriBuilder.Uri.ToString(), but doesn't throw an exception if the Host has a wildcard.
            </summary>
            <param name="builder">The UriBuilder to render as a string.</param>
            <returns>The string version of the Uri.</returns>
        </member>
        <member name="M:DotNetOpenAuth.UriUtil.ValidateResolvableUrl(System.Web.UI.Page,System.Boolean,System.String)">
            <summary>
            Validates that a URL will be resolvable at runtime.
            </summary>
            <param name="page">The page hosting the control that receives this URL as a property.</param>
            <param name="designMode">If set to <c>true</c> the page is in design-time mode rather than runtime mode.</param>
            <param name="value">The URI to check.</param>
            <exception cref="T:System.UriFormatException">Thrown if the given URL is not a valid, resolvable URI.</exception>
        </member>
        <member name="T:DotNetOpenAuth.Util">
            <summary>
            A grab-bag utility class.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Util.DefaultNamespace">
            <summary>
            The base namespace for this library from which all other namespaces derive.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Util.embeddedResourceRetrieval">
            <summary>
            The web.config file-specified provider of web resource URLs.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Util.EqualsNullSafe``1(``0,``0)">
            <summary>
            Tests for equality between two objects.  Safely handles the case where one or both are null.
            </summary>
            <typeparam name="T">The type of objects been checked for equality.</typeparam>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns><c>true</c> if the two objects are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Util.ToStringDeferred``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Prepares a dictionary for printing as a string.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="pairs">The dictionary or sequence of name-value pairs.</param>
            <returns>An object whose ToString method will perform the actual work of generating the string.</returns>
            <remarks>
            The work isn't done until (and if) the
            <see cref="M:System.Object.ToString"/> method is actually called, which makes it great
            for logging complex objects without being in a conditional block.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.Util.ToStringDeferred``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Offers deferred ToString processing for a list of elements, that are assumed
            to generate just a single-line string.
            </summary>
            <typeparam name="T">The type of elements contained in the list.</typeparam>
            <param name="list">The list of elements.</param>
            <returns>An object whose ToString method will perform the actual work of generating the string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Util.ToStringDeferred``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Offers deferred ToString processing for a list of elements.
            </summary>
            <typeparam name="T">The type of elements contained in the list.</typeparam>
            <param name="list">The list of elements.</param>
            <param name="multiLineElements">if set to <c>true</c>, special formatting will be applied to the output to make it clear where one element ends and the next begins.</param>
            <returns>An object whose ToString method will perform the actual work of generating the string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.Util.GetWebResourceUrl(System.Type,System.String)">
            <summary>
            Gets the web resource URL from a Page or <see cref="T:DotNetOpenAuth.IEmbeddedResourceRetrieval"/> object.
            </summary>
            <param name="someTypeInResourceAssembly">Some type in resource assembly.</param>
            <param name="manifestResourceName">Name of the manifest resource.</param>
            <returns>An absolute URL</returns>
        </member>
        <member name="P:DotNetOpenAuth.Util.LibraryVersion">
            <summary>
            Gets a human-readable description of the library name and version, including
            whether the build is an official or private one.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Util.AssemblyFileVersion">
            <summary>
            Gets the assembly file version of the executing assembly, otherwise falls back to the assembly version.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.Util.DelayedToString`1">
            <summary>
            Manages an individual deferred ToString call.
            </summary>
            <typeparam name="T">The type of object to be serialized as a string.</typeparam>
        </member>
        <member name="F:DotNetOpenAuth.Util.DelayedToString`1.obj">
            <summary>
            The object that will be serialized if called upon.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Util.DelayedToString`1.toString">
            <summary>
            The method used to serialize <see cref="F:DotNetOpenAuth.Util.DelayedToString`1.obj"/> to string form.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Util.DelayedToString`1.#ctor(`0,System.Func{`0,System.String})">
            <summary>
            Initializes a new instance of the DelayedToString class.
            </summary>
            <param name="obj">The object that may be serialized to string form.</param>
            <param name="toString">The method that will serialize the object if called upon.</param>
        </member>
        <member name="M:DotNetOpenAuth.Util.DelayedToString`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
    </members>
</doc>
