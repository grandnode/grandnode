@model IList<Grand.Web.Models.ShoppingCart.ShoppingCartModel.CheckoutAttributeModel>
@using Grand.Core.Domain.Catalog;
@if (Model.Count > 0)
{
    <div class="fieldset card-panel grey lighten-4 checkout-attributes input-field">
        @foreach (var attribute in Model)
        {
            string controlId = string.Format("checkout_attribute_{0}", attribute.Id);
            string textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;



            @*if (attribute.IsRequired)
                {
                    <span class="required">*</span>
                }*@

            switch (attribute.AttributeControlType)
            {
                case AttributeControlType.DropdownList:
                    {
                        <div class="dropdown">
                            <select name="@(controlId)" id="@(controlId)">
                                @if (!attribute.IsRequired)
                                {
                                    <option value="0">---</option>
                                }
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <option value="@attributeValue.Id">@attributeName</option>
                                }
                            </select>
                            <label for="@(controlId)" class="text-prompt">@textPrompt</label>
                        </div>
                    }
                    break;
                case AttributeControlType.RadioList:
                    {
                        <div class="radio-list">
                            <ul class="option-list">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li>
                                        <input id="@(controlId)_@(attributeValue.Id)" class="with-gap" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                        <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                    </li>
                                }
                            </ul>
                            <label class="text-prompt">@textPrompt</label>
                        </div>
                    }
                    break;
                case AttributeControlType.Checkboxes:
                case AttributeControlType.ReadonlyCheckboxes:
                    {
                        <div class="checkboxes">
                            <ul class="option-list">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li>
                                        <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                        <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                    </li>
                                }
                            </ul>
                            <label class="text-prompt">@textPrompt</label>
                        </div>
                    }
                    break;
                case AttributeControlType.TextBox:
                    {
                        <div class="textbox">
                            <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@attribute.DefaultValue" />
                            <label class="text-prompt">@textPrompt</label>
                        </div>
                    }
                    break;
                case AttributeControlType.MultilineTextbox:
                    {
                        <div class="multiple-textbox">
                            <textarea id="@(controlId)" name="@(controlId)">@attribute.DefaultValue</textarea>
                            <label class="text-prompt">@textPrompt</label>
                        </div>
                    }
                    break;
                case AttributeControlType.Datepicker:
                    {
                        <div class="datepicker-dropdown">
                            <label class="text-prompt">@textPrompt</label>
                            @Html.DatePickerDropDowns(controlId + "_day", controlId + "_month", controlId + "_year", DateTime.Now.Year, DateTime.Now.Year + 1, attribute.SelectedDay, attribute.SelectedMonth, attribute.SelectedYear)
                        </div>
                    }
                    break;
                case AttributeControlType.FileUpload:
                    {

                        //register CSS and JS
                        Html.AddCssFileParts("~/Scripts/fineuploader/fineuploader-4.2.2.min.css");
                        Html.AddScriptParts("~/Scripts/fineuploader/jquery.fineuploader-4.2.2.min.js");

                        //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                        var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                        <div class="file-uploader">
                            <label class="text-prompt">@textPrompt</label>
                            <input id="@(controlId)" name="@(controlId)" type="hidden" />
                            
                            @*fine uploader container*@
                            <div id="@(controlId)uploader"></div>
                            @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                            <script type="text/template" id="@(controlId)-qq-template">
                                <div class="qq-uploader-selector qq-uploader">
                                    <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                        <span>@T("Common.FileUploader.DropFiles")</span>
                                    </div>
                                    <div class="qq-upload-button-selector qq-upload-button">
                                        <div>@T("Common.FileUploader.Upload")</div>
                                    </div>
                                    <span class="qq-drop-processing-selector qq-drop-processing">
                                        <span>@T("Common.FileUploader.Processing")</span>
                                        <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                    </span>
                                    <ul class="qq-upload-list-selector qq-upload-list">
                                        <li>
                                            <div class="qq-progress-bar-container-selector">
                                                <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                            </div>
                                            <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                            <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                            <span class="qq-upload-file-selector qq-upload-file"></span>
                                            <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                            <span class="qq-upload-size-selector qq-upload-size"></span>
                                            <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                            <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                            <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                            <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                        </li>
                                    </ul>
                                </div>
                            </script>
                            <script type="text/javascript">
                                $(document).ready(function () {
                                    $("#@(controlId)uploader").fineUploader({
                                        request: {
                                            endpoint: '@(Url.RouteUrl("UploadFileCheckoutAttribute", new { attributeId = attribute.Id }))'
                                        },
                                        template: "@(controlId)-qq-template",
                                        multiple: false,
                                        validation: {
                                            allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                        }
                                    }).on("complete", function (event, id, name, responseJSON, xhr) {
                                        $("#@(controlId)").val(responseJSON.downloadGuid);
                                        if (responseJSON.message) {
                                            alert(responseJSON.message);
                                        }
                                    });
                                });
                            </script>
                        </div>

                    }
                    break;
                case AttributeControlType.ColorSquares:
                    {
                        <div class="color-squares">
                            <ul class="option-list color-squares" id="color-squares-@(attribute.Id)">
                                @foreach (var attributeValue in attribute.Values)
                                {
                                    var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                        attributeValue.Name :
                                        T("ShoppingCart.CheckoutAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                                    <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                        <label for="@(controlId)_@(attributeValue.Id)">
                                            <span class="color-container" title="@attributeName">
                                                <span class="color" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                            </span>
                                            <input id="@(controlId)_@(attributeValue.Id)" class="with-gap" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                            @*uncomment below to display attribute value name*@
                                            @*<span class="name">@attributeName</span>*@
                                        </label>
                                    </li>
                                }
                            </ul>
                            <script type="text/javascript">
                                $(document).ready(function () {
                                    $('.checkout-attributes #color-squares-@(attribute.Id)').delegate('input', 'click', function (event) {
                                        $('.checkout-attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                        $(this).closest('li').addClass('selected-value');
                                    });
                                });
                            </script>
                        </div>
                    }
                    break;
            }
        }

    </div>
}