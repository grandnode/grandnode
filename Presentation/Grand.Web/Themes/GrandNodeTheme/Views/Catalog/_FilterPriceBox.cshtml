@model CatalogPagingFilteringModel.PriceRangeFilterModel
@using Grand.Web.Models.Catalog;
@{
    var selectedItem = Model.Items.FirstOrDefault(x => x.Selected);
}
@helper FormatPriceRangeText(CatalogPagingFilteringModel.PriceRangeFilterItem filterItem)
{
    string rangeText = "";
    if (String.IsNullOrWhiteSpace(filterItem.From))
    {
        rangeText = string.Format(T("Filtering.PriceRangeFilter.Under").Text, string.Format("<span class=\"PriceRange\">{0}</span>", filterItem.To));
    }
    else if (String.IsNullOrWhiteSpace(filterItem.To))
    {
        rangeText = string.Format(T("Filtering.PriceRangeFilter.Over").Text, string.Format("<span class=\"PriceRange\">{0}</span>", filterItem.From));
    }
    else
    {
        rangeText = string.Format("<span class=\"PriceRange\">{0}</span> - <span class=\"PriceRange\">{1}</span>", filterItem.From, filterItem.To);
    }
    <text>@Html.Raw(rangeText)</text>
}
@if (Model.Enabled)
{
    <div class="product-filter price-range-filter">
        <div class="filter-title">
            <strong>@T("Filtering.PriceRangeFilter")</strong>
        </div>
        <div class="filter-content">
            @if (selectedItem == null)
            {
                <div class="available-items">
                    <ul class="group price-range-group">
                        @foreach (var item in Model.Items)
                        {
                            <li><a href="@item.FilterUrl">@FormatPriceRangeText(item)</a></li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <div class="filtered-items">
                    <span class="item">@FormatPriceRangeText(selectedItem)</span>
                </div>
                <div class="remove-filter">
                    <a class="waves-effect waves-green btn-flat" href="@Model.RemoveFilterUrl">@T("Filtering.PriceRangeFilter.Remove")</a>
                </div>
            }
        </div>

    </div>
}