@model NewsItemModel
@using Grand.Web.Models.News;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}
<div class="page news-item-page">
    <div class="news-item-title">
        <h1>@Model.Title</h1>
    </div>
    <div class="news-item-body">
        <div class="news-date">
            @Model.CreatedOn.ToString("MMMM dd, yyyy")
        </div>
        @Html.Widget("newsitem_page_before_body", Model.Id)
        <div class="news-body">
            @Html.Raw(Model.Full)
        </div>
        @Html.Widget("newsitem_page_before_comments", Model.Id)
        @if (Model.AllowComments)
        {
            <div class="fieldset new-comment" id="comments">
                <div class="title">
                    <h5>@T("News.Comments.LeaveYourComment")</h5>
                </div>
                <div class="notifications">
                    @{
                        var validationSummary = Html.ValidationSummary(true);
                    }
                    @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error">@validationSummary</div>
                    }
                    @{
                        var result = TempData["nop.news.addcomment.result"] as string;
                    }
                    @if (!String.IsNullOrEmpty(result))
                    {
                        <div class="result">@result</div>
                    }
                </div>
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="input-field col s12">
                        @Html.LabelFor(model => model.AddNewComment.CommentTitle, new { }, ":")
                        @Html.TextBoxFor(model => model.AddNewComment.CommentTitle, new { @class = "enter-comment-title" })
                        @Html.ValidationMessageFor(model => model.AddNewComment.CommentTitle)
                    </div>
                    <div class="input-field col s12">
                        @Html.LabelFor(model => model.AddNewComment.CommentText, new { }, ":")
                        @Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "materialize-textarea" })
                        @Html.ValidationMessageFor(model => model.AddNewComment.CommentText)
                    </div>

                    if (Model.AddNewComment.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            @Html.Raw(Html.GenerateCaptcha())
                        </div>
                    }

                    <button type="submit" name="add-comment" class="btn waves-effect waves-light">
                        @T("News.Comments.SubmitButton")
                    </button>
                }
            </div>
                        if (Model.Comments.Count > 0)
                        {
                <div class="comment-list">
                    <div class="title">
                        <h5>@T("News.Comments")</h5>
                    </div>
                    <div class="comments">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="comment news-comment">
                                <div class="comment-info">
                                    <div class="user-info">
                                        @if (comment.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a>
                                        }
                                        else
                                        {
                                            <span class="username">@(comment.CustomerName)</span>
                                        }

                                        @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (comment.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="avatar-img-link">
                                                        <img src="@(comment.CustomerAvatarUrl)" class="circle responsive-img" alt="avatar" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(comment.CustomerAvatarUrl)" class="circle responsive-img" alt="avatar" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="comment-content">
                                    <div class="comment-time">
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                    <div class="comment-title">
                                        <strong class="comment-text">@comment.CommentTitle</strong>
                                    </div>
                                    <div class="comment-body">
                                        <p class="comment-text">@Html.Raw(Grand.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                    </div>
                                </div>
                                @Html.Widget("newsitem_page_inside_comment", comment.Id)
                            </div>
                        }
                    </div>
                </div>
            }
        }
        @Html.Widget("newsitem_page_after_comments", Model.Id)
    </div>
</div>
