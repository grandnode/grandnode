@model RegisterModel
@using Grand.Web.Models.Customer;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    var formatDate = "yyyy-MM-dd";

    //title
    Html.AddTitleParts(T("PageTitle.Register").Text);
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        $('select').material_select();
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="registration-page">
        <div class="container page-title">
            <h1>@T("Account.Register")</h1>
        </div>
        <div class="container">
            @{
                var validationSummary = Html.ValidationSummary(true);
            }
            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
            {
                <div class="message-error">@validationSummary</div>
            }
            @Html.Partial("_ExternalAuthentication.AssociateMessage")
            <div class="fieldset card-panel grey lighten-4">
                <div class="title">
                    <strong>@T("Account.YourPersonalDetails")</strong>
                </div>
                @if (Model.GenderEnabled)
                {
                    <div class="input-field col s6">
                        <div class="gender">
                            <span class="male">
                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male", @class = "with-gap" })
                                <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                            </span>
                            <span class="female">
                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female", @class = "with-gap" })
                                <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                            </span>
                        </div>
                    </div>
                }
                <div class="input-field col s6">
                    @Html.EditorFor(model => model.FirstName)
                    @Html.LabelFor(model => model.FirstName, new { })
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
                <div class="input-field col s6">
                    @Html.EditorFor(model => model.LastName)
                    @Html.LabelFor(model => model.LastName, new { })
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>                    

                @if (Model.DateOfBirthEnabled)
                {
                    <div class="input-field col s6">
                        <label name="DateOfBirth">@T("Account.Fields.DateOfBirth"):</label>    

                            @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                            Html.FieldNameFor(x => x.DateOfBirthMonth),
                            Html.FieldNameFor(x => x.DateOfBirthYear),
                            DateTime.Now.Year - 110,
                            DateTime.Now.Year,
                            Model.DateOfBirthDay,
                            Model.DateOfBirthMonth,
                            Model.DateOfBirthYear)
                            @if (Model.DateOfBirthRequired)
                            {
                                @Html.RequiredHint()
                            }
                            
                            @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                            @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                            @Html.ValidationMessageFor(model => model.DateOfBirthYear)                
                    </div> 
                        
                }
                <div class="input-field col s6">
                    @Html.EditorFor(model => model.Email)
                    @Html.LabelFor(model => model.Email, new { })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                @if (Model.UsernamesEnabled)
                {
                    <div class="input-field col s6">
                        @Html.EditorFor(model => model.Username)
                        @Html.LabelFor(model => model.Username, new { })
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Username)
                        @if (Model.CheckUsernameAvailabilityEnabled)
                        {
                            @Html.Partial("_CheckUsernameAvailability")
                        }
                    </div>

                }
            </div>
            @if (Model.CompanyEnabled || Model.DisplayVatNumber)
            {
                <div class="fieldset card-panel grey lighten-4">
                    <div class="title">
                        <strong>@T("Account.CompanyDetails")</strong>
                    </div>
                    
                    @if (Model.CompanyEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.Company)
                            @Html.LabelFor(model => model.Company, new { })
                            @if (Model.CompanyRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                    }
                    @if (Model.DisplayVatNumber)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.VatNumber)
                            @Html.LabelFor(model => model.VatNumber, new { })
                            <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                        </div>
                    }
                   
                </div>
            }
            @if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled
            || Model.CityEnabled || Model.CountryEnabled)
            {
                <div class="fieldset card-panel grey lighten-4">
                    <div class="title">
                        <strong>@T("Account.YourAddress")</strong>
                    </div>
                    @if (Model.StreetAddressEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.StreetAddress)
                            @Html.LabelFor(model => model.StreetAddress, new { })
                            @if (Model.StreetAddressRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StreetAddress)
                        </div>
                    }
                    @if (Model.StreetAddress2Enabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.StreetAddress2)
                            @Html.LabelFor(model => model.StreetAddress2, new { })
                            @if (Model.StreetAddress2Required)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                        </div>
                    }
                    @if (Model.ZipPostalCodeEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.ZipPostalCode)
                            @Html.LabelFor(model => model.ZipPostalCode, new { })
                            @if (Model.ZipPostalCodeRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.ZipPostalCode)
                        </div>
                    }
                    @if (Model.CityEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.City)
                            @Html.LabelFor(model => model.City, new { })
                            @if (Model.CityRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.City)
                        </div>
                    }
                    @if (Model.CountryEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.DropDownList("CountryId", Model.AvailableCountries)
                            @Html.LabelFor(model => model.CountryId, new { })
                            @if (Model.CountryRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.CountryId)
                        </div>
                    }
                    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                            @Html.LabelFor(model => model.StateProvinceId, new { })
                            @if (Model.StateProvinceRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                            <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    }
                </div>
            }
            @if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="fieldset card-panel grey lighten-4">
                    <div class="title">
                        <strong>@T("Account.YourContactInformation")</strong>
                    </div>
                    @if (Model.PhoneEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.Phone)
                            @Html.LabelFor(model => model.Phone, new { })
                            @if (Model.PhoneRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                    }
                    @if (Model.FaxEnabled)
                    {
                        <div class="input-field col s6">
                            @Html.EditorFor(model => model.Fax)
                            @Html.LabelFor(model => model.Fax, new { })
                            @if (Model.FaxRequired)
                            {
                                @Html.RequiredHint()
                            }
                            @Html.ValidationMessageFor(model => model.Fax)
                        </div>
                    }
                </div>
            }
            @if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
            {
                <div class="fieldset card-panel grey lighten-4">
                    <div class="title">
                        <strong>@T("Account.Options")</strong>
                    </div>
                    @if (Model.NewsletterEnabled)
                    {
                        <div class="input-field col s6">
                            <input id="Newsletter" name="newsletter" type="checkbox" value="true" @(Model.Newsletter ? Html.Raw("Checked") : Html.Raw(""))/>
                            @Html.LabelFor(model => model.Newsletter, new { })
                            @*@Html.EditorFor(model => model.Newsletter, new { @class = "filled-in" })*@
                            <input name="Newsletter" type="hidden" value="false">
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                    }
                    @if (Model.CustomerAttributes.Count > 0)
                    {
                        @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                    }
                </div>
            }
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="fieldset card-panel grey lighten-4">
                    <div class="title">
                        <strong>@T("Account.Preferences")</strong>
                    </div>
                    @if (Model.AllowCustomersToSetTimeZone)
                    {
                        <div class="input-field col s6">
                            @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                            @Html.LabelFor(model => model.TimeZoneId, new { })
                            @Html.ValidationMessageFor(model => model.TimeZoneId)
                        </div>
                    }
                </div>
            }
            <div class="fieldset card-panel grey lighten-4">
                <div class="title">
                    <strong>@T("Account.YourPassword")</strong>
                </div>
                <div class="input-field col s6">
                    @Html.LabelFor(model => model.Password, new { })
                    @Html.EditorFor(model => model.Password)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.Password)
                </div>
                <div class="input-field col s6">
                    @Html.LabelFor(model => model.ConfirmPassword, new { })
                    @Html.EditorFor(model => model.ConfirmPassword)
                    @Html.RequiredHint()
                    @Html.ValidationMessageFor(model => model.ConfirmPassword)
                </div>
                @if (Model.DisplayCaptcha)
                {
                    <div class="captcha-box">
                        @Html.Raw(Html.GenerateCaptcha())
                    </div>
                }
                @if (Model.HoneypotEnabled)
                {
                    @Html.Raw(Html.GenerateHoneypotInput())
                }
            </div>
            @if (Model.AcceptPrivacyPolicyEnabled)
            {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#register-button').click(function () {
                            if ($('#accept-privacy-policy').is(':checked')) {
                                //do some stuff
                                return true;
                            }
                            else {
                                //just show validation errors, dont post
                                alert('@Html.Raw(HttpUtility.JavaScriptStringEncode(T("Account.Fields.AcceptPrivacyPolicy.Required").Text))');
                                return false;
                            }
                        });
                    });
                </script>
                <div class="accept-privacy-policy">
                    <input id="accept-privacy-policy" type="checkbox" name="accept-privacy-policy" />
                    <label for="accept-privacy-policy">@T("Account.Fields.AcceptPrivacyPolicy")</label>
                    <span class="read" onclick="javascript:OpenWindow('@Url.RouteUrl("TopicPopup", new { SystemName = "privacyinfo" })', 450, 500, true)">@T("Account.Fields.AcceptPrivacyPolicy.Read")</span>
                </div>
            }
            
            <button id="register-button" class="btn waves-effect waves-light" type="submit" name="register-button">
                @T("Account.Register.Button")
            </button>
            
        </div>
    </div>
}

