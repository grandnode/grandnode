@model ProductDetailsModel.AddToCartModel
@using Grand.Web.Models.Catalog;
@using Grand.Core.Domain.Orders;
@if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId))
{
    @Html.HiddenFor(x => x.UpdatedShoppingCartItemId)
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    if (Model.CustomerEntersPrice)
    {
        <div class="customer-entered-price">
            <div class="price-input">
                @Html.LabelFor(model => model.CustomerEnteredPrice, new { @class = "enter-price-label" }, ":")
                @*round price*@
                @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice)), new { @class = "enter-price-input" })
            </div>
            <div class="price-range">
                @Model.CustomerEnteredPriceRange
            </div>
        </div>
    }
    if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
    }
    if (!Model.DisableBuyButton)
    {
        <div class="add-to-cart-panel">
            @Html.LabelFor(model => model.EnteredQuantity, new { @class = "qty-label" }, ":")
            @if (Model.AllowedQuantities.Count > 0)
            {
                @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "qty-dropdown" })
            }
            else
            {
                @Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "qty-input" })
                <label>
                    @Model.MeasureUnit
                </label>
                
                //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                <script type="text/javascript">
                    $(document).ready(function () {
                        $("#@Html.FieldIdFor(model => model.EnteredQuantity)").keydown(function (event) {
                            if (event.keyCode == 13) {
                                $("#add-to-cart-button-@Model.ProductId").click();
                                return false;
                            }
                        });
                    });
                </script>

            }
                        @{
                    var addToCartText = "";
                    if (!String.IsNullOrEmpty(Model.UpdatedShoppingCartItemId) && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                    <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn waves-effect waves-light" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;">
                        <i class="material-icons left">shopping_cart</i>
                        <span class="hide-on-small-only">@addToCartText</span>
                    </button>
                    }
</div>
    }
    @Html.Widget("productdetails_add_info", Model.ProductId)
}