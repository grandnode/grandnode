@model CheckoutShippingAddressModel
@using Grand.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
<div class="page checkout-page shipping-address-page">
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h1>@T("Checkout.ShippingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
        {
            if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
            {
                <div class="section pickup-in-store">

                    <div class="selector">
                        <input type="checkbox" id="@Html.FieldIdFor(model => model.PickUpInStore)" name="@Html.FieldIdFor(model => model.PickUpInStore)" value="true">
                        <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@T("Checkout.PickupPoints").Text</label>
                        <input name="@Html.FieldIdFor(model => model.PickUpInStore)" type="hidden" value="false">
                    </div>
                    <div class="description">
                        @T("Checkout.PickupPoints.Description")
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                            togglePickUpInStore();
                        });

                        function togglePickUpInStore() {
                            if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                $('#pickup-points-form').show();
                                $('#shipping-addresses-form').hide();
                            } else {
                                $('#pickup-points-form').hide();
                                $('#shipping-addresses-form').show();
                            }
                        }
                    </script>


                </div>
            }

            if (Model.AllowPickUpInStore)
            {
                <div class="pickup-points" id="pickup-points-form">
                    @if (Model.PickupPoints.Any())
                    {
                        if (Model.PickUpInStoreOnly)
                        {
                            @Html.HiddenFor(x => x.PickUpInStore)
                        }
                        <div class="section select-pickup-point">
                            @if (Model.PickupPoints.Count == 1)
                            {
                                var point = Model.PickupPoints.First();
                                @Html.Hidden("pickup-point-id", point.Id)
                                <ul>
                                    <li class="single-pickup-point name">@point.Name</li>
                                    <li class="single-pickup-point address">@(string.Format("{0} {1} {2}", point.Address.City, point.Address.ZipPostalCode, point.Address.Address1))</li>
                                    @if (!string.IsNullOrEmpty(point.PickupFee))
                                    {
                                        <li class="single-pickup-point fee">@point.PickupFee</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="title">
                                    <strong>@T("Checkout.PickupPoints.SelectPickupPoint")</strong>
                                </div>
                                <select name="pickup-point-id" id="pickup-points-select" class="address-select" title="">
                                    @foreach (var point in Model.PickupPoints)
                                    {
                                        var addressLine = new System.Text.StringBuilder();
                                        addressLine.Append(point.Name);
                                        if (!string.IsNullOrEmpty(point.Address.City))
                                        {
                                            addressLine.AppendFormat(", {0}", point.Address.City);
                                        }
                                        if (!string.IsNullOrEmpty(point.Address.ZipPostalCode))
                                        {
                                            addressLine.AppendFormat(", {0}", point.Address.ZipPostalCode);
                                        }
                                        if (!string.IsNullOrEmpty(point.Address.Address1))
                                        {
                                            addressLine.AppendFormat(", {0}", point.Address.Address1);
                                        }
                                        if (!string.IsNullOrEmpty(point.PickupFee))
                                        {
                                            addressLine.AppendFormat(", {0}", point.PickupFee);
                                        }
                                        <option value="@point.Id">@(addressLine)</option>
                                    }
                                </select>
                            }
                        </div>

                    <div class="section message-error">
                        <ul>
                            @foreach (var warning in Model.Warnings)
                            {
                                <li>@warning</li>
                            }
                        </ul>
                    </div>
                    }
                </div>
            }

            if (!Model.PickUpInStoreOnly)
            {
            <div class="shipping-addresses" id="shipping-addresses-form">
                @Html.Widget("checkout_shipping_address_top")
                @if (Model.ExistingAddresses.Count > 0)
                {
                    <div class="section select-shipping-address">
                        <div class="title">
                            <strong>@T("Checkout.SelectShippingAddress")</strong>
                        </div>
                        <div class="address-grid">
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <div class="address-item">
                                    <ul class="address-box">
                                        <li class="name">
                                            @item.FirstName @item.LastName
                                        </li>
                                        <li class="email">
                                            <label>@T("Address.Fields.Email"):</label>
                                            <span>@item.Email</span>
                                        </li>
                                        @if (item.PhoneEnabled)
                                        {
                                            <li class="phone">
                                                <label>@T("Address.Fields.PhoneNumber"):</label>
                                                <span>@item.PhoneNumber</span>
                                            </li>
                                        }
                                        @if (item.FaxEnabled)
                                        {
                                            <li class="fax">
                                                <label>@T("Address.Fields.FaxNumber"):</label>
                                                <span>@item.FaxNumber</span>
                                            </li>
                                        }
                                        @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                        {
                                            <li class="company">
                                                @item.Company
                                            </li>
                                        }
                                        @if (item.StreetAddressEnabled)
                                        {
                                            <li class="address1">
                                                @item.Address1
                                            </li>
                                        }
                                        @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                        {
                                            <li class="address2">
                                                @item.Address2
                                            </li>
                                        }
                                        @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                        {
                                            <li class="city-state-zip">
                                                @if (item.CityEnabled)
                                                {
                                                    @item.City
                                                }
                                                @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                {
                                                    <text>,</text>
                                                }
                                                @if (item.StateProvinceEnabled)
                                                {
                                                    @item.StateProvinceName
                                                }
                                                @if (item.ZipPostalCodeEnabled)
                                                {
                                                    @item.ZipPostalCode
                                                }
                                            </li>
                                        }
                                        @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                        {
                                            <li class="country">
                                                @item.CountryName
                                            </li>
                                        }
                                        @if (!String.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                        {
                                            <li class="custom-attributes-view">
                                                @Html.Raw(item.FormattedCustomAddressAttributes)
                                            </li>
                                        }
                                    </ul>
                                    <div class="select-button">
                                        <button type="button" value="@T("Checkout.ShipToThisAddress")" class="btn waves-effect waves-light" onclick="setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressid = item.Id })') ">
                                            @T("Checkout.ShipToThisAddress")
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                @Html.Widget("checkout_shipping_address_middle")
                <div class="section new-shipping-address">
                    <div class="title">
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <strong>@T("Checkout.OrEnterNewAddress")</strong>
                        }
                        else
                        {
                            <strong>@T("Checkout.EnterShippingAddress")</strong>
                        }
                    </div>
                    <div class="enter-address">
                        @{
                            var validationSummary = Html.ValidationSummary(true);
                        }
                        @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                        {
                            <div class="message-error">@validationSummary</div>
                        }
                        @{
                            var dataDictAddress = new ViewDataDictionary();
                            //Merge ModelState (required for validation)
                            dataDictAddress.ModelState.Merge(ViewData.ModelState);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                            @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                        }
                    </div>
                </div>
                @Html.Widget("checkout_shipping_address_bottom")
            </div>
            }
            <div class="buttons">
                <button type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn waves-effect waves-light">@T("Checkout.NextButton")</button>
            </div>
        }
        <div class="section order-summary">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>
    </div>
</div>
