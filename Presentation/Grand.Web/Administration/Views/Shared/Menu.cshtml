@using Grand.Web.Framework.Menu;
@{
    //load sitemap
    var siteMap = new Grand.Web.Framework.Menu.XmlSiteMap();
    siteMap.LoadFrom("~/Administration/sitemap.config");

    var actualUrl = HttpContext.Current.Request.Url;
}


@helper RenderMenuItem(Grand.Web.Framework.Menu.SiteMapNode item, bool first, int level = 0)
{
string url = "javascript:;";
if (!string.IsNullOrEmpty(item.ControllerName) && !string.IsNullOrEmpty(item.ActionName))
{
    url = Url.Action(item.ActionName, item.ControllerName, item.RouteValues, null, null);
}
else if (!string.IsNullOrEmpty(item.Url))
{
    url = item.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(item.Url) : item.Url;
}

    <li class="nav-item @(first && url.ToLowerInvariant() == HttpContext.Current.Request.RawUrl.ToLowerInvariant() ? "start active": "") @(url.ToLowerInvariant() == HttpContext.Current.Request.RawUrl.ToLowerInvariant() ? "active open" : "") ">

        <a href="@url" class="nav-link nav-toggle">
            @if (!String.IsNullOrEmpty(item.IconClass))
            {
                <i class="@item.IconClass"></i>
            }
            <span class="title">@item.Title</span>
            <span class="selected"></span>
            <span class="arrow"></span>
        </a>

        @{
            var childNodes = item.ChildNodes.Where(x => x.Visible).ToList();
        }

        @if (childNodes.Any())
        {
            <ul class="sub-menu">
                @foreach (var childItem in childNodes)
                {
                    @RenderMenuItem(childItem, false, level + 1)
                }
            </ul>
        }
    </li>
}

<div class="page-sidebar-wrapper">
    <div class="page-sidebar navbar-collapse collapse">
        <ul class="page-sidebar-menu  page-header-fixed " data-keep-expanded="false" data-auto-scroll="true" data-slide-speed="200" style="padding-top: 20px">
            <li class="sidebar-toggler-wrapper hide">
                <div class="sidebar-toggler">
                    <span></span>
                </div>
            </li>

            @{
                //standard (default) items
                var rootNode = siteMap.RootNode;

                //plugins
                var adminMenuPlugins = EngineContext.Current.Resolve<Grand.Core.Plugins.IPluginFinder>()
                    .GetPlugins<IAdminMenuPlugin>()
                    .ToList();
                foreach (var adminMenuPlugin in adminMenuPlugins)
                {
                    adminMenuPlugin.ManageSiteMap(rootNode);
                }
                //"Plugins" menu item should be visible when it has some child nodes
                var pluginNode = rootNode.ChildNodes.FirstOrDefault(x => x.SystemName == "Third party plugins");
                if (pluginNode != null && pluginNode.Visible)
                {
                    var permissionService = EngineContext.Current.Resolve<Grand.Services.Security.IPermissionService>();
                    var hasManagePluginsPermission = permissionService.Authorize(Grand.Services.Security.StandardPermissionProvider.ManagePlugins);
                    pluginNode.Visible = hasManagePluginsPermission && pluginNode.ChildNodes.Any(x => x.Visible);
                }
                int i = 0;
            }
            @foreach (var item in rootNode.ChildNodes.Where(x => x.Visible))
            {
                @RenderMenuItem(item, i == 0)
                i++;
            }
        </ul>
    </div>
</div>

<script>
    $(document).ready(function() {
        $('.nav-item.active.open')
            .parentsUntil('.page-sidebar-menu')
            .each(function (i, v) {
                $(this)
                    .addClass("active open");
            });
    });
</script>

