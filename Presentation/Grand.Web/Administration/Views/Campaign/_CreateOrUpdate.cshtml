@model CampaignModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<div id="campaign-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Promotions.Campaigns.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Promotions.Campaigns.Conditions")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Promotions.Campaigns.Emails")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Promotions.Campaigns.History")
        </li>
        <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
            @T("Admin.Promotions.Campaigns.Test")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabConditions()
    </div>
    <div>
        @TabEmails()
    </div>
    <div>
        @TabHistory()
    </div>
    <div>
        @TabTest()
    </div>
</div>

<script>
    $(document).ready(function() {
        $('#campaign-edit').show();
        $("#campaign-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "campaign-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">


@helper TabInfo()
{

<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Subject)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Subject)
                @Html.ValidationMessageFor(model => model.Subject)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Body)
            <div class="col-md-9 col-sm-9">
                @{
                    ViewData["nop.RichEditor.EnableFullPage"] = true;
                }
                @Html.EditorFor(model => model.Body, "RichEditor")
                @Html.ValidationMessageFor(model => model.Body)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.EmailAccountId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.EmailAccountId, new SelectList(Model.AvailableEmailAccounts, "Id", "DisplayName"))
                @Html.ValidationMessageFor(model => model.EmailAccountId)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowedTokens)
            <div class="col-md-9 col-sm-9">
                @Html.DisplayFor(model => model.AllowedTokens)
            </div>
        </div>
    </div>
</div>

}

@helper TabConditions()
{
            <div class="col-md-12">
                <div class="form-horizontal">
                    <div class="form-body">
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerCreatedDateFrom)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandEditorFor(model => model.CustomerCreatedDateFrom)
                                <text>@T("Admin.Promotions.Campaigns.Fields.CustomerCreatedDateTo")</text>
                                @Html.GrandEditorFor(model => model.CustomerCreatedDateTo)
                                @Html.ValidationMessageFor(model => model.CustomerCreatedDateFrom)
                                @Html.ValidationMessageFor(model => model.CustomerCreatedDateTo)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerLastActivityDateFrom)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandEditorFor(model => model.CustomerLastActivityDateFrom)
                                <text>@T("Admin.Promotions.Campaigns.Fields.CustomerLastActivityDateTo")</text>
                                @Html.GrandEditorFor(model => model.CustomerLastActivityDateTo)
                                @Html.ValidationMessageFor(model => model.CustomerLastActivityDateFrom)
                                @Html.ValidationMessageFor(model => model.CustomerLastActivityDateTo)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerLastPurchaseDateFrom)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandEditorFor(model => model.CustomerLastPurchaseDateFrom)
                                <text>@T("Admin.Promotions.Campaigns.Fields.CustomerLastPurchaseDateTo")</text>
                                @Html.GrandEditorFor(model => model.CustomerLastPurchaseDateTo)
                                @Html.ValidationMessageFor(model => model.CustomerLastPurchaseDateFrom)
                                @Html.ValidationMessageFor(model => model.CustomerLastPurchaseDateTo)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerHasOrders)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandDropDownListFor(model => model.CustomerHasOrders, ((Grand.Core.Domain.Messages.CampaignCondition)Model.CustomerHasOrders).ToSelectList())
                                @Html.ValidationMessageFor(model => model.CustomerHasOrders)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerHasShoppingCart)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandDropDownListFor(model => model.CustomerHasShoppingCart, ((Grand.Core.Domain.Messages.CampaignCondition)Model.CustomerHasShoppingCart).ToSelectList())
                                @Html.ValidationMessageFor(model => model.CustomerHasShoppingCart)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.CustomerTags)
                            <div class="col-md-9 col-sm-9">
                                @Html.EditorFor(model => model.CustomerTags, new { SelectList = Model.AvailableCustomerTags })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.StoreId)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandDropDownListFor(model => model.StoreId, Model.AvailableStores)
                                @Html.ValidationMessageFor(model => model.StoreId)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
}





@helper TabEmails()
{

    if (!String.IsNullOrEmpty(Model.Id))
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="customers-grid"></div>
                </div>
                <div class="panel-footer">
                    <a href="@Url.Action("ExportCsv", new { campaignId = Model.Id })" class="btn default">
                        <i class="fa fa-file-excel-o"></i> @T("Admin.Common.ExportToCsv")
                    </a>
                </div>
            </div>
            <script>
            $(document).ready(function () {
                $("#customers-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("Customers", "Campaign", new { campaignId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                        },
                        requestEnd: function(e) {
                            if(e.type=="update") {
                                this.read();
                            }
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        pageSize: @(defaultGridPageSize),
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        pageSizes: [@(gridPageSizes)]
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [{
                        field: "Email",
                        title: "@T("Admin.Promotions.Campaigns.Fields.Email")"
                    }]
                });
            });
            </script>

    }
    else
    {
            <div class="note note-info">
                @T("Admin.Promotions.Campaigns.SaveBeforeEdit")
            </div>

    }

}

@helper TabHistory()
{

    if (!String.IsNullOrEmpty(Model.Id))
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="history-grid"></div>
                </div>
            </div>
            <script>
            $(document).ready(function () {
                $("#history-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("History", "Campaign", new { campaignId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                        },
                        requestEnd: function(e) {
                            if(e.type=="update") {
                                this.read();
                            }
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        pageSize: @(defaultGridPageSize),
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        pageSizes: [@(gridPageSizes)]
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [{
                        field: "Email",
                        title: "@T("Admin.Promotions.Campaigns.Fields.Email")"
                    },{
                        field: "SentDate",
                        title: "@T("Admin.Promotions.Campaigns.Fields.SentDate")",
                        type: "date",
                        format: "{0:G}",
                    }]
                });
            });
            </script>
    }
    else
    {
            <div class="note note-info">
                @T("Admin.Promotions.Campaigns.SaveBeforeEdit")
            </div>

    }

}


@helper TabTest()
{

    if (!String.IsNullOrEmpty(Model.Id))
    {
            <div class="form-horizontal">
                <div class="form-body">
                    <div class="note note-danger">
                        <strong>
                            @T("Admin.Promotions.Campaigns.Warning")
                        </strong>
                        <br />
                    </div>
                    <div class="form-group">
                        @Html.GrandLabelFor(model => model.TestEmail)
                        <div class="col-md-9 col-sm-9">
                            @Html.GrandEditorFor(model => model.TestEmail)
                            @Html.ValidationMessageFor(model => model.TestEmail)
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <div class="col-md-offset-3 col-sm-offset-3 col-md-9 col-sm-9">
                        <input type="submit" name="send-test-email" class="btn default margin-top-10" value="@T("Admin.Promotions.Campaigns.SendTestEmail")" />
                    </div>
                </div>
            </div>
    }
    else
    {
            <div class="note note-info">
                @T("Admin.Promotions.Campaigns.SaveBeforeEdit")
            </div>

    }

}