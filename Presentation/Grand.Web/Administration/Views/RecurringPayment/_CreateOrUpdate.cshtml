@model RecurringPaymentModel
@using Grand.Core.Domain.Catalog;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
<script>
    $(document).ready(function () {
        $("#recurringpayment-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

<div id="recurringpayment-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.RecurringPayments.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.RecurringPayments.History")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabHistory()
    </div>
</div>
@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "recurringpayment-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
    {
        
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.InitialOrderId)
                <div class="col-md-9 col-sm-9">
                    @Html.ActionLink(T("Admin.Common.View").Text, "Edit", "Order", new { id = Model.InitialOrderId }, new { })
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CustomerEmail)
                <div class="col-md-9 col-sm-9">
                    @Html.ActionLink(Model.CustomerEmail, "Edit", "Customer", new { id = Model.CustomerId }, new { })
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CycleLength)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CycleLength)
                    @Html.ValidationMessageFor(model => model.CycleLength)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CyclePeriodId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CyclePeriodId, ((RecurringProductCyclePeriod)Model.CyclePeriodId).ToSelectList())
                    @Html.ValidationMessageFor(model => model.CyclePeriodId)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.TotalCycles)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.TotalCycles)
                    @Html.ValidationMessageFor(model => model.TotalCycles)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CyclesRemaining)
                <div class="col-md-9 col-sm-9">
                    @Model.CyclesRemaining
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.PaymentType)
                <div class="col-md-9 col-sm-9">
                    @Model.PaymentType
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.StartDate)
                <div class="col-md-9 col-sm-9">
                    @Model.StartDate
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.IsActive)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive)
                </div>
            </div>
        </div>
    </div>
}
@helper TabHistory()
    { 
    <table class="table table-bordered table-striped table-hover">
        <tr>
            <td>
                @if (!String.IsNullOrEmpty(Model.NextPaymentDate))
                        {
                    @T("Admin.RecurringPayments.History.NextPaymentDate")
                    <text>:</text> @Model.NextPaymentDate
                    <input type="submit" name="processnextpayment" class="k-button" value="@T("Admin.RecurringPayments.History.ProcessNextPayment")" />
                        }
                @if (Model.CanCancelRecurringPayment)
                        {
                    <input type="submit" name="cancelpayment" class="k-button" value="@T("Admin.RecurringPayments.History.CancelPayment")" />
                        }
            </td>
        </tr>
    </table>
   
   <div id="history-grid"></div>

    <script>
        $(document).ready(function () {
            $("#history-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("HistoryList", "RecurringPayment", new { recurringPaymentId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "OrderId",
                    title: "@T("Admin.RecurringPayments.History.Order")",
                    width: 200,
                    template: '<a href="@Url.Content("~/Admin/Order/Edit/")#=OrderId#">#=OrderId# - @T("Admin.Common.View")</a>'
                }, {
                    field: "OrderStatus",
                    title: "@T("Admin.RecurringPayments.History.OrderStatus")",
                    width: 200
                }, {
                    field: "PaymentStatus",
                    title: "@T("Admin.RecurringPayments.History.PaymentStatus")",
                    width: 200
                }, {
                    field: "ShippingStatus",
                    title: "@T("Admin.RecurringPayments.History.ShippingStatus")",
                    width: 200
                }, {
                    field: "CreatedOn",
                    title: "@T("Admin.RecurringPayments.History.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>
           
}