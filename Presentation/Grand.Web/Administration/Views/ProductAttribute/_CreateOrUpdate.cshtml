@model ProductAttributeModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
<script>
    $(document).ready(function() {
        $('#product-attribute-edit').show();
        $("#product-attribute-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>


<div id="product-attribute-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.ProductAttributes.Info")
        </li>
        @if (!String.IsNullOrEmpty(Model.Id))
        {
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.ProductAttributes.UsedByProducts")
        </li>
        }
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    @if (!String.IsNullOrEmpty(Model.Id))
    {
        <div>
            @TabUsedByProducts()
        </div>
    }
    <div>
        @TabPredefinedValues()
    </div>
</div>
@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "product-attribute-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
    {
    @(Html.LocalizedEditor<ProductAttributeModel, ProductAttributeLocalizedModel>("productattribute-localized",
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].Name)
                     @Html.ValidationMessageFor(model => model.Locales[item].Name)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].Description)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                     @Html.ValidationMessageFor(model => model.Locales[item].Description)
                 </div>
             </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
         </div>
    </div>
    ,
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Name)
                     @Html.ValidationMessageFor(model => model.Name)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Description)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(x => x.Description, "RichEditor")
                     @Html.ValidationMessageFor(model => model.Description)
                 </div>
             </div>
         </div>
    </div>
    ))
}
@helper TabUsedByProducts()
{
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
    <div class="note note-info">
        @T("Admin.Catalog.Attributes.ProductAttributes.UsedByProducts.Hint")
    </div>
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="used-by-products-grid"></div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $("#used-by-products-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("UsedByProducts", "ProductAttribute", new { productAttributeId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "ProductName",
                    title: "@T("Admin.Catalog.Attributes.ProductAttributes.UsedByProducts.Product")",
                    width: 400
                }, {
                    field: "Published",
                    title: "@T("Admin.Catalog.Attributes.ProductAttributes.UsedByProducts.Published")",
                    width: 100,
                    headerAttributes: { style: "text-align:center" },
                    attributes: { style: "text-align:center" },
                    template: '# if(Published) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                },
                {
                    field: "Id",
                    title: "@T("Admin.Common.View")",
                    width: 100,
                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=Id#">@T("Admin.Common.View")</a>'
                }]
            });
        });
    </script>
}
@helper TabPredefinedValues()
{
    if (!String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Hint")
        </div>

        <div class="panel panel-default">
            <div class="panel-body">
                <div id="productattributevalues-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewValue" value="@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.AddNew")" onclick=" javascript:OpenWindow('@(Url.Action("PredefinedProductAttributeValueCreatePopup", "ProductAttribute", new {productAttributeId = Model.Id, btnId = "btnRefresh", formId = "productattribute-form"}))', 800, 550, true); return false; " class="k-button" />
                <input type="submit" id="btnRefresh" style="display:none" />
            </div>
        </div>

        <script>
            $(document).ready(function() {
                $("#productattributevalues-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("PredefinedProductAttributeValueList", "ProductAttribute", new { productAttributeId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("PredefinedProductAttributeValueDelete", "ProductAttribute"))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: {
                                id: "Id",
                                fields: {
                                    Product2Name: { editable: false, type: "string" },
                                    ProductId2: { editable: false, type: "string" }
                                }
                            }
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        numeric: false,
                        previousNext: false,
                        info: false
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [
                        {
                            field: "Name",
                            title: "@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Fields.Name")",
                            width: 200
                        }, {
                            field: "PriceAdjustmentStr",
                            title: "@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Fields.PriceAdjustment")",
                            width: 150
                        }, {
                            field: "WeightAdjustmentStr",
                            title: "@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Fields.WeightAdjustment")",
                            width: 150
                        }, {
                            field: "IsPreSelected",
                            title: "@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Fields.IsPreSelected")",
                            width: 100,
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: '# if(IsPreSelected) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                        }, {
                            field: "DisplayOrder",
                            title: "@T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.Fields.DisplayOrder")",
                            width: 100
                        }, {
                            field: "Id",
                            title: "@T("Admin.Common.Edit")",
                            width: 100,
                            template: "<input type='submit' value='@T("Admin.Common.Edit")' onclick=\"javascript:OpenWindow('@Url.Content("~/Admin/ProductAttribute/PredefinedProductAttributeValueEditPopup/")#=Id#?productAttributeId=@Model.Id&btnId=btnRefresh&formId=productattribute-form', 800, 500, true); return false;\" class='k-button' />"
                        }, {
                            command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                            title: "@T("Admin.Common.Delete")",
                            width: 200
                        }
                    ]
                });
            });
        </script>
        <script type="text/javascript">
            $(document).ready(function() {
                $('#btnRefresh').click(function() {
                    //refresh grid
                    var grid = $("#productattributevalues-grid").data('kendoGrid');
                    grid.dataSource.read();

                    //return false to don't reload a page
                    return false;
                });
            });
        </script>
    }
    else
    {
        <div class="note note-info">
            @T("Admin.Catalog.Attributes.ProductAttributes.PredefinedValues.SaveBeforeEdit")
        </div>
    }
}