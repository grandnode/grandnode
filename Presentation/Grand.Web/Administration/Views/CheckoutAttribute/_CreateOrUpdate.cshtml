@model CheckoutAttributeModel

@using Grand.Core.Domain.Catalog;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        $("#checkoutattribute-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>

<div id="checkoutattribute-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Values")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Stores")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Acl")
        </li>
        @if (Model.ConditionAllowed)
        {
            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                @T("Admin.Catalog.Attributes.CheckoutAttributes.Condition")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabValues()
    </div>
    <div>
        @TabStores()
    </div>
    <div>
        @TabAcl()
    </div>
    @if (Model.ConditionAllowed)
    {
        <div>
            @TabCondition()
        </div>
    }
</div>
@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "checkoutattribute-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
    {
        <script type="text/javascript">
            $(document).ready(function () {

                $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);
                $("#@Html.FieldIdFor(model => model.AttributeControlTypeId)").change(toggleAttributeControlType);

                toggleTax();
                toggleAttributeControlType();
            });

            function toggleTax() {
                if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
                    $('#pnlTaxCategory').hide();
                } else {
                    $('#pnlTaxCategory').show();
                }
            }

            function toggleAttributeControlType() {
                var selectedAttributeControlTypeId = $("#@Html.FieldIdFor(model => model.AttributeControlTypeId)").val();
                if (selectedAttributeControlTypeId == @(((int) AttributeControlType.TextBox).ToString())) {
                    $('#pnlValidationMinLength').show();
                    $('#pnlValidationMaxLength').show();
                    $('#pnlValidationFileMaximumSize').hide();
                    $('#pnlValidationFileAllowedExtensions').hide();
                    $('#pnlDefaultValue').show();
                } else if (selectedAttributeControlTypeId == @(((int) AttributeControlType.MultilineTextbox).ToString())) {
                    $('#pnlValidationMinLength').show();
                    $('#pnlValidationMaxLength').show();
                    $('#pnlValidationFileMaximumSize').hide();
                    $('#pnlValidationFileAllowedExtensions').hide();
                    $('#pnlDefaultValue').show();
                } else if (selectedAttributeControlTypeId == @(((int) AttributeControlType.FileUpload).ToString())) {
                    $('#pnlValidationMinLength').hide();
                    $('#pnlValidationMaxLength').hide();
                    $('#pnlValidationFileMaximumSize').show();
                    $('#pnlValidationFileAllowedExtensions').show();
                    $('#pnlDefaultValue').hide();
                } else {
                    $('#pnlValidationMinLength').hide();
                    $('#pnlValidationMaxLength').hide();
                    $('#pnlValidationFileMaximumSize').hide();
                    $('#pnlValidationFileAllowedExtensions').hide();
                    $('#pnlDefaultValue').hide();
                }
            }
        </script>
        
    @(Html.LocalizedEditor<CheckoutAttributeModel, CheckoutAttributeLocalizedModel>("checkoutattribute-localized",
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].Name)
                     @Html.ValidationMessageFor(model => model.Locales[item].Name)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].TextPrompt)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].TextPrompt)
                     @Html.ValidationMessageFor(model => model.Locales[item].TextPrompt)
                 </div>
             </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
         </div>
    </div>
    ,
    @<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.TextPrompt)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.TextPrompt)
                @Html.ValidationMessageFor(model => model.TextPrompt)
            </div>
        </div>
    </div>
    </div>
    ))
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.IsRequired)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.IsRequired)
                    @Html.ValidationMessageFor(model => model.IsRequired)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ShippableProductRequired)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.ShippableProductRequired)
                    @Html.ValidationMessageFor(model => model.ShippableProductRequired)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.IsTaxExempt)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.IsTaxExempt)
                    @Html.ValidationMessageFor(model => model.IsTaxExempt)
                </div>
            </div>
            <div class="form-group" id="pnlTaxCategory">
                @Html.GrandLabelFor(model => model.TaxCategoryId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories)
                    @Html.ValidationMessageFor(model => model.TaxCategoryId)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AttributeControlTypeId)
                <div class="col-md-9 col-sm-9">
                    @{
                        var attributeControlTypes = ((AttributeControlType)Model.AttributeControlTypeId).ToSelectList(valuesToExclude:
                            new[] { (int)AttributeControlType.ImageSquares });
                    }
                    @Html.GrandDropDownListFor(model => model.AttributeControlTypeId, attributeControlTypes)
                    @Html.ValidationMessageFor(model => model.AttributeControlTypeId)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.DisplayOrder)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
            <div class="form-group" id="pnlValidationMinLength">
                @Html.GrandLabelFor(model => model.ValidationMinLength)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ValidationMinLength)
                    @Html.ValidationMessageFor(model => model.ValidationMinLength)
                </div>
            </div>
            <div class="form-group" id="pnlValidationMaxLength">
                @Html.GrandLabelFor(model => model.ValidationMaxLength)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ValidationMaxLength)
                    @Html.ValidationMessageFor(model => model.ValidationMaxLength)
                </div>
            </div>
            <div class="form-group" id="pnlValidationFileAllowedExtensions">
                @Html.GrandLabelFor(model => model.ValidationFileAllowedExtensions)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ValidationFileAllowedExtensions)
                    @Html.ValidationMessageFor(model => model.ValidationFileAllowedExtensions)
                </div>
            </div>
            <tr id="pnlValidationFileMaximumSize">
                <td class="adminTitle">
                    @Html.GrandLabelFor(model => model.ValidationFileMaximumSize)
                </td>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ValidationFileMaximumSize)
                    @Html.ValidationMessageFor(model => model.ValidationFileMaximumSize)
                </div>
            </tr>
            <div class="form-group" id="pnlDefaultValue">
                @Html.GrandLabelFor(model => model.DefaultValue)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DefaultValue)
                    @Html.ValidationMessageFor(model => model.DefaultValue)
                </div>
            </div>
        </div>
    </div>
        
    }
@helper TabValues()
    {
if (!String.IsNullOrEmpty(Model.Id))
{
    /*TODO display the following warning if values are not supported by selected attribute control type
     'Values are not required for this attribute control type'
     */
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="checkoutattributevalues-grid"></div>
        </div>
        <div class="panel-footer">
            <input type="submit" id="btnAddNewValue" value="@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("ValueCreatePopup", "CheckoutAttribute", new { checkoutAttributeId = Model.Id, btnId = "btnRefresh", formId = "checkoutattribute-form" }))', 800, 350, true); return false;" class="k-button" />
            <input type="submit" id="btnRefresh" style="display: none" />
        </div>
    </div>



        <script>
            $(document).ready(function () {
                $("#checkoutattributevalues-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("ValueList", "CheckoutAttribute", new { checkoutAttributeId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("ValueDelete", "CheckoutAttribute"))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: {
                                id: "Id"
                            }
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        numeric: false,
                        previousNext: false,
                        info: false
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [{
                        field: "Name",
                        title: "@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.Fields.Name")"
                    }, {
                        field: "PriceAdjustment",
                        title: "@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.Fields.PriceAdjustment")",
                        width: 200
                    }, {
                        field: "WeightAdjustment",
                        title: "@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.Fields.WeightAdjustment")",
                        width: 200
                    }, {
                        field: "IsPreSelected",
                        title: "@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.Fields.IsPreSelected")",
                        width: 100,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(IsPreSelected) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                    }, {
                        field: "DisplayOrder",
                        title: "@T("Admin.Catalog.Attributes.CheckoutAttributes.Values.Fields.DisplayOrder")",
                        width: 100
                    },{
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 100,
                        template: "<input type='submit' value='@T("Admin.Common.Edit")' onclick=\"javascript:OpenWindow('@Url.Content("~/Admin/CheckoutAttribute/ValueEditPopup/")#=Id#?checkoutAttributeId=@Model.Id&btnId=btnRefresh&formId=checkoutattribute-form', 800, 350, true); return false;\" class='k-button' />"
                    }, {
                        command: {name: "destroy", text: "@T("Admin.Common.Delete")"},
                        title: "@T("Admin.Common.Delete")",
                        width: 100
                    }]
                });
            });
        </script>
        <script type="text/javascript">
            $(document).ready(function () {
                $('#btnRefresh').click(function () {
                    //refresh grid
                    var grid = $("#checkoutattributevalues-grid").data('kendoGrid');
                    grid.dataSource.read();

                    //return false to don't reload a page
                    return false;
                });                                
            });
        </script>
        
        }
        else
        {
            <div class="note note-info">
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Values.SaveBeforeEdit")
            </div>
        }
    }

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.LimitedToStores)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.LimitedToStores)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.LimitedToStores)
                </div>
            </div>
            <div class="form-group" id="pnl-available-stores">
                @Html.GrandLabelFor(model => model.AvailableStores)
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                    {
                        @Html.Action("MultistoreDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var store in Model.AvailableStores)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">
                            No stores defined
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}


@helper TabAcl()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);

            toggleAcl();
        });


        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('#pnl-acl').show();
            }
            else {
                $('#pnl-acl').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.SubjectToAcl)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.SubjectToAcl)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.SubjectToAcl)
                </div>
            </div>
            <div class="form-group" id="pnl-acl">
                @Html.GrandLabelFor(model => model.AvailableCustomerRoles)
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                    {
                        @Html.Action("AclDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var customerRole in Model.AvailableCustomerRoles)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds!=null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">No customer roles defined</div>
                    }
                </div>
            </div>
        </div>
    </div>

}

@helper TabCondition()
{
if (!String.IsNullOrEmpty(Model.Id))
{
        <script type="text/javascript">
                    $(document).ready(function () {
                        $("#@Html.FieldIdFor(model => model.ConditionModel.EnableCondition)").click(toggleEnableCondition);
                        toggleEnableCondition();
                    });

                    function toggleEnableCondition() {
                        if ($('#@Html.FieldIdFor(model => model.ConditionModel.EnableCondition)').is(':checked')) {
                            $('#pnlAttributes').show();
                        } else {
                            $('#pnlAttributes').hide();
                        }
                    }
        </script>

        <div class="form-horizontal">
            <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ConditionModel.EnableCondition)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.ConditionModel.EnableCondition)
                    @Html.ValidationMessageFor(model => model.ConditionModel.EnableCondition)
                </div>
            </div>
            </div>
        </div>
        <div id="pnlAttributes">
            @if (Model.ConditionModel.ConditionAttributes.Count > 0)
            {
                <div class="form-horizontal">
                    <div class="form-body">
                        <div class="form-group">
                            @Html.GrandLabelFor(model => model.ConditionModel.SelectedAttributeId)
                            <div class="col-md-9 col-sm-9">
                                @Html.GrandDropDownListFor(model => model.ConditionModel.SelectedAttributeId,
                                Model.ConditionModel.ConditionAttributes.Select(x => new SelectListItem() { Text = x.Name, Value = x.Id.ToString() }))
                                <script type="text/javascript">
                                    $(document).ready(function() {
                                        $("#@Html.FieldIdFor(model => model.ConditionModel.SelectedAttributeId)").change(toggleConditionAttributes);

                                        toggleConditionAttributes();
                                    });

                                    function toggleConditionAttributes() {
                                        var selectedCheckoutAttributeId = $("#@Html.FieldIdFor(model => model.ConditionModel.SelectedAttributeId)").val();
                                        $('[id^="pnl_attribute_values_"]').hide();
                                        $('#pnl_attribute_values_' + selectedCheckoutAttributeId).show();
                                    }
                                </script>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3"></label>
                            <div class="col-md-9 col-sm-9">
                                @for (int i = 0; i < Model.ConditionModel.ConditionAttributes.Count; i++)
                                {
                                    @Html.HiddenFor(model => Model.ConditionModel.ConditionAttributes[i].Id)
                                    <div id="@string.Format("pnl_attribute_values_{0}", Model.ConditionModel.ConditionAttributes[i].Id)">
                                        @switch (Model.ConditionModel.ConditionAttributes[i].AttributeControlType)
                                        {
                                            case AttributeControlType.DropdownList:
                                                @Html.DropDownListFor(model => Model.ConditionModel.ConditionAttributes[i].SelectedValueId,
                                                Model.ConditionModel.ConditionAttributes[i].Values)
                                                break;
                                            case AttributeControlType.RadioList:
                                            case AttributeControlType.ColorSquares:
                                            case AttributeControlType.ImageSquares:
                                                foreach (var value in Model.ConditionModel.ConditionAttributes[i].Values)
                                                {
                                                    <div>
                                                        @Html.RadioButtonFor(model => Model.ConditionModel.ConditionAttributes[i].SelectedValueId, value.Value,
                                                        value.Selected ? new { @checked = true } : null)
                                                        @Html.LabelFor(model => Model.ConditionModel.ConditionAttributes[i].SelectedValueId, value.Text)
                                                    </div>
                                                }
                                                break;
                                            case AttributeControlType.Checkboxes:
                                                for (var j = 0; j < Model.ConditionModel.ConditionAttributes[i].Values.Count; j++)
                                                {
                                                    <div>
                                                        @Html.HiddenFor(model => Model.ConditionModel.ConditionAttributes[i].Values[j].Value)
                                                        @Html.CheckBoxFor(model => Model.ConditionModel.ConditionAttributes[i].Values[j].Selected)
                                                        @Html.LabelFor(model => Model.ConditionModel.ConditionAttributes[i].Values[j].Selected,
                                                        Model.ConditionModel.ConditionAttributes[i].Values[j].Text)
                                                    </div>
                                                }
                                                break;
                                            case AttributeControlType.ReadonlyCheckboxes:
                                            case AttributeControlType.TextBox:
                                            case AttributeControlType.MultilineTextbox:
                                            case AttributeControlType.Datepicker:
                                            case AttributeControlType.FileUpload:
                                            default:
                                                //not supported as conditions
                                                break;
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="note note-info">
                    @T("Admin.Catalog.Attributes.CheckoutAttributes.Condition.NoAttributeExists")
                </div>
            }
        </div>
}
else
{
        <div class="note note-info">
            @T("Admin.Catalog.Attributes.CheckoutAttributes.Condition.SaveBeforeEdit")
        </div>
}
}