@model VendorModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)


<script>
    $(document).ready(function () {
        $("#vendor-edit").show();
        $("#vendor-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="vendor-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Vendors.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Common.SEO")
        </li>
        @if (!String.IsNullOrEmpty(Model.Id))
        {
            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                @T("Admin.Vendors.VendorNotes")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabSeo()
    </div>
    @if (!String.IsNullOrEmpty(Model.Id))
    {
        <div>
            @TabVendorNotes()
        </div>
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "vendor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">







@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-info-localized",
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].Name)
                     @Html.ValidationMessageFor(model => model.Locales[item].Name)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].Description)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                     @Html.ValidationMessageFor(model => model.Locales[item].Description)
                 </div>
             </div>
             @Html.HiddenFor(model => model.Locales[item].LanguageId)
         </div>
    </div>
        ,
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Name)
                     @Html.ValidationMessageFor(model => model.Name)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Description)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(x => x.Description, "RichEditor")
                     @Html.ValidationMessageFor(model => model.Description)
                 </div>
             </div>
         </div>
    </div>
    ))
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.Email)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                        @Html.GrandLabelFor(model => model.AssociatedCustomers)
                        <div class="col-md-9 col-sm-9">
                            <label class="control-label">
                                @if (Model.AssociatedCustomers.Count > 0)
                                {
                                    for (int i = 0; i < Model.AssociatedCustomers.Count; i++)
                                    {
                                        @Html.ActionLink(Model.AssociatedCustomers[i].Email, "Edit", "Customer", new { id = Model.AssociatedCustomers[i].Id }, new { })
                                        if (i != Model.AssociatedCustomers.Count - 1)
                                        {
                                            <text>, </text>
                                        }
                                    }
                                }
                                else
                                {
                                    @T("Admin.Vendors.Fields.AssociatedCustomerEmails.None")
                                }
                            </label>
                    </div>
                </div>
            }
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.PictureId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.PictureId)
                    @Html.ValidationMessageFor(model => model.PictureId)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.AdminComment)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(model => model.AdminComment, new { style = "Height: 100px;" })
                    @Html.ValidationMessageFor(model => model.AdminComment)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.AllowCustomersToSelectPageSize)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(x => x.AllowCustomersToSelectPageSize)
                    @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
                </div>
            </div>
            <div class="form-group" id="pnlPageSize">
                    @Html.GrandLabelFor(model => model.PageSize)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(x => x.PageSize)
                    @Html.ValidationMessageFor(model => model.PageSize)
                </div>
            </div>
            <div class="form-group" id="pnlPageSizeOptions">
                    @Html.GrandLabelFor(model => model.PageSizeOptions)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.PageSizeOptions)
                    @Html.ValidationMessageFor(model => model.PageSizeOptions)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.Active)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.DisplayOrder)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
        </div>
    </div>
}
@helper TabSeo()
{
    @(Html.LocalizedEditor<VendorModel, VendorLocalizedModel>("vendor-seo-localized",
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].MetaKeywords)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].MetaKeywords)
                     @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].MetaDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandTextAreaFor(model => model.Locales[item].MetaDescription)
                     @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].MetaTitle)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].MetaTitle)
                     @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].SeName)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].SeName)
                     @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                 </div>
             </div>
             @Html.HiddenFor(model => model.Locales[item].LanguageId)
         </div>
    </div>
        ,
    @<div class="form-horizontal">
         <div class="form-body">
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.MetaKeywords)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(x => x.MetaKeywords)
                     @Html.ValidationMessageFor(model => model.MetaKeywords)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.MetaDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandTextAreaFor(x => x.MetaDescription)
                     @Html.ValidationMessageFor(model => model.MetaDescription)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.MetaTitle)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(x => x.MetaTitle)
                     @Html.ValidationMessageFor(model => model.MetaTitle)
                 </div>
             </div>
             <div class="form-group">
                     @Html.GrandLabelFor(model => model.SeName)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(x => x.SeName)
                     @Html.ValidationMessageFor(model => model.SeName)
                 </div>
             </div>
         </div>
    </div>))
}
@helper TabVendorNotes()
{

                <div id="vendornotes-grid"></div>

                <script>
                $(document).ready(function () {
                    $("#vendornotes-grid").kendoGrid({
                        dataSource: {
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("VendorNotesSelect", "Vendor", new { vendorId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("VendorNoteDelete", "Vendor", new { vendorId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        //do not implicitly specify all fields
                                        //we do it only for fields which implicitly require it
                                        //otherwise, they'll be formatted wrong way
                                        CreatedOn: {type: "date" }
                                    }
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            numeric: false,
                            previousNext: false,
                            info: false
                        },
                        editable: {
                            confirmation: false,
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [{
                            field: "CreatedOn",
                            title: "@T("Admin.Vendors.VendorNotes.Fields.CreatedOn")",
                            width: 200,
                            type: "date",
                            format: "{0:G}"
                        }, {
                            field: "Note",
                            title: "@T("Admin.Vendors.VendorNotes.Fields.Note")",
                            encoded: false
                        }, {
                            command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                            title: "@T("Admin.Common.Delete")",
                            width: 100
                        }]
                    });
                });
                </script>
          
    <p>
        <strong>
            @T("Admin.Vendors.VendorNotes.AddTitle")
        </strong>
    </p>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AddVendorNoteMessage)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(model => model.AddVendorNoteMessage, new { style = "Height: 100px;" })
                    @Html.ValidationMessageFor(model => model.AddVendorNoteMessage)
                </div>
            </div>
        </div>
        <div class="actions">
            <div class="col-md-offset-3 col-sm-offset-3 col-md-9 col-sm-9">
                <input type="button" id="addVendorNote" class="btn default" value="@T("Admin.Vendors.VendorNotes.AddButton")" />
            </div>
        </div>
    </div>

    <script type="text/javascript">
    $(document).ready(function () {
        $('#addVendorNote').click(function () {
            var vendorNoteMessage = $("#@Html.FieldIdFor(model => model.AddVendorNoteMessage)").val();
            $('#addVendorNote').attr('disabled', true);

            var postData = {
                message: vendorNoteMessage,
                vendorId: '@Model.Id'
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("VendorNoteAdd", "Vendor"))",
                data: postData,
                success: function (data) {
                    var grid = $("#vendornotes-grid").data('kendoGrid');
                    grid.dataSource.read();
                    $('#addVendorNote').attr('disabled', false);
                },
                error:function (xhr, ajaxOptions, thrownError){
                    alert('Failed to add vendor note.');
                    $('#addVendorNote').attr('disabled', false);
                }
            });
        });
    });
    </script>
}