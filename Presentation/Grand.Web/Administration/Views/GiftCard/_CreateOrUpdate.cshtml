@model GiftCardModel
@using Grand.Core.Domain.Catalog;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        $("#giftcard-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="giftcard-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.GiftCards.Info")
        </li>
        @if (!String.IsNullOrEmpty(Model.Id))
        {
            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                @T("Admin.GiftCards.History")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    @if (!String.IsNullOrEmpty(Model.Id))
    {
        <div>
            @TabHistory()
        </div>
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "giftcard-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}



@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
    $(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.GiftCardTypeId)").change(toggleGiftCardType);

        toggleGiftCardType();
    });

    function toggleGiftCardType() {
        var selectedGiftCardTypeId = $("#@Html.FieldIdFor(model => model.GiftCardTypeId)").val();
        if (selectedGiftCardTypeId == @(((int)GiftCardType.Virtual).ToString())) {
            $('#pnlRecipientEmail').show();
            $('#pnlSenderEmail').show();
            $('#pnlNotifyRecipient').show();
        }
        else {
            $('#pnlRecipientEmail').hide();
            $('#pnlSenderEmail').hide();
            $('#pnlNotifyRecipient').hide();
        }
    }
    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.GiftCardTypeId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.GiftCardTypeId, ((GiftCardType)Model.GiftCardTypeId).ToSelectList())
                    @Html.ValidationMessageFor(model => model.GiftCardTypeId)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.PurchasedWithOrderId))
            {
                <div class="form-group">
                        @Html.GrandLabelFor(model => model.PurchasedWithOrderId)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"><a href="@Url.Action("Edit", "Order", new { Id = Model.PurchasedWithOrderId })">@Model.PurchasedWithOrderId - @T("Admin.Common.View")</a></label> 
                    </div>
                </div>
            }
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.Amount)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Amount) [@Model.PrimaryStoreCurrencyCode]
                    @Html.ValidationMessageFor(model => model.Amount)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                        @Html.GrandLabelFor(model => model.RemainingAmountStr)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label">@Model.RemainingAmountStr</label>
                    </div>
                </div>
            }
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.IsGiftCardActivated)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.IsGiftCardActivated)
                    @Html.ValidationMessageFor(model => model.IsGiftCardActivated)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.GiftCardCouponCode)
                <div class="col-md-4 col-sm-6">
                    <div class="input-group">
                        <div class="input-group-control">
                            @Html.GrandEditorFor(model => model.GiftCardCouponCode)
                        </div>
                        <div class="input-group-btn">
                            <input type="button" id="generateCouponCode" class="btn default" value="@T("Admin.GiftCards.Fields.GiftCardCouponCode.Generate")" />
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.GiftCardCouponCode)
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#generateCouponCode').click(function () {

                                var postData = {
                                };
                                addAntiForgeryToken(postData);

                                $.ajax({
                                    cache:false,
                                    type: "POST",
                                    url: "@(Url.Action("GenerateCouponCode", "GiftCard"))",
                                    data: postData,
                                    success: function (data) {
                                        $('#@Html.FieldIdFor(model => model.GiftCardCouponCode)').val(data.CouponCode);
                                    },
                                    error:function (xhr, ajaxOptions, thrownError){
                                        alert('Failed to generate code.');
                                    }
                                });
                            });
                        });
                    </script>
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.RecipientName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.RecipientName)
                    @Html.ValidationMessageFor(model => model.RecipientName)
                </div>
            </div>
            <div class="form-group" id="pnlRecipientEmail">
                    @Html.GrandLabelFor(model => model.RecipientEmail)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.RecipientEmail)
                    @Html.ValidationMessageFor(model => model.RecipientEmail)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.SenderName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SenderName)
                    @Html.ValidationMessageFor(model => model.SenderName)
                </div>
            </div>
            <div class="form-group" id="pnlSenderEmail">
                    @Html.GrandLabelFor(model => model.SenderEmail)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SenderEmail)
                    @Html.ValidationMessageFor(model => model.SenderEmail)
                </div>
            </div>
            <div class="form-group">
                    @Html.GrandLabelFor(model => model.Message)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(model => model.Message)
                    @Html.ValidationMessageFor(model => model.Message)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group" id="pnlNotifyRecipient">
                        @Html.GrandLabelFor(model => model.IsRecipientNotified)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label">@Model.IsRecipientNotified.ToString()</label>
                        <input type="submit" name="notifyRecipient" class="k-button" value="@T("Admin.GiftCards.Fields.IsRecipientNotified.Notify")" />
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                        @Html.GrandLabelFor(model => model.CreatedOn)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.CreatedOn)</label>
                    </div>
                </div>
            }
        </div>
    </div>
}
@helper TabHistory()
{
var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <div id="usagehistory-grid"></div>

    <script>
        $(document).ready(function () {
            $("#usagehistory-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("UsageHistoryList", "GiftCard", new { giftCardId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "CreatedOn",
                    title: "@T("Admin.GiftCards.History.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }, {
                    field: "OrderId",
                    title: "@T("Admin.GiftCards.History.Order")",
                    width: 200,
                    template: '<a href="@Url.Content("~/Admin/Order/Edit/")#=OrderId#">#=OrderNumber# - @T("Admin.Common.View")</a>'
                }, {
                    field: "UsedValue",
                    title: "@T("Admin.GiftCards.History.UsedValue")",
                    width: 200
                }]
            });
        });
    </script>
}