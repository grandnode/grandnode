@model CustomerActionModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)

@{
    var validationSummary = Html.ValidationSummary(false);
    if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
    {
        <div class="message-error">@validationSummary</div>
    }
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#customeraction-edit").show();
        $("#customeraction-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });

        $("#@Html.FieldIdFor(model => model.ReactionTypeId)").change(toggleReaction);
        toggleReaction();

        function toggleReaction() {
            var selectedReactionTypeId = $("#@Html.FieldIdFor(model => model.ReactionTypeId)").val();
            if (selectedReactionTypeId == @(((int)Grand.Core.Domain.Customers.CustomerReactionTypeEnum.Banner).ToString()))
            {
                $('#plnBanner').show();
                $('#plnMessage').hide();
                $('#plnRole').hide();
                $('#plnTag').hide();
            }
            else if (selectedReactionTypeId == @(((int)Grand.Core.Domain.Customers.CustomerReactionTypeEnum.Email).ToString()))
            {
                $('#plnBanner').hide();
                $('#plnMessage').show();
                $('#plnRole').hide();
                $('#plnTag').hide();

            } else if (selectedReactionTypeId == @(((int)Grand.Core.Domain.Customers.CustomerReactionTypeEnum.AssignToCustomerRole).ToString()))
            {
                $('#plnBanner').hide();
                $('#plnMessage').hide();
                $('#plnRole').show();
                $('#plnTag').hide();

            } else if (selectedReactionTypeId == @(((int)Grand.Core.Domain.Customers.CustomerReactionTypeEnum.AssignToCustomerTag).ToString()))
            {
                $('#plnBanner').hide();
                $('#plnMessage').hide();
                $('#plnRole').hide();
                $('#plnTag').show();
            } else
            {
                $('#plnBanner').hide();
                $('#plnMessage').hide();
                $('#plnRole').hide();
                $('#plnTag').hide();
            }
        }


    });



</script>


   
<div id="customeraction-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerAction.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerAction.Conditions")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerAction.Reaction")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerAction.History")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabConditions()
    </div>
    <div>
        @TabReaction()
    </div>
    <div>
        @TabHistory()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customeraction-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Active)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.StartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.StartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.StartDateTimeUtc)
            </div>
        </div>

        <div class="form-group">
            @Html.GrandLabelFor(model => model.EndDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.EndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.EndDateTimeUtc)
            </div>
        </div>

        <div class="form-group">
            @Html.GrandLabelFor(model => model.ActionTypeId)
            <div class="col-md-9 col-sm-9">
                @if (Model.ConditionCount > 0)
                {
                    @Html.GrandDropDownListFor(model => model.ActionTypeId, Model.ActionType, new { @disabled = "disabled" })
                }
                else
                {
                    @Html.GrandDropDownListFor(model => model.ActionTypeId, Model.ActionType)
                }

                @Html.ValidationMessageFor(model => model.ActionTypeId)
                <div class="note note-info margin-top-10">
                    <p>@T("admin.customers.actiontype.helpText.AddToCart")</p>
                    <p>@T("admin.customers.actiontype.helpText.AddOrder")</p>
                    <p>@T("admin.customers.actiontype.helpText.Viewed")</p>
                    <p>@T("admin.customers.actiontype.helpText.Url")</p>
                    <p>@T("admin.customers.actiontype.helpText.Registration")</p>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ConditionId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.ConditionId, ((Grand.Core.Domain.Customers.CustomerActionConditionEnum)Model.ConditionId).ToSelectList())
                @Html.ValidationMessageFor(model => model.ConditionId)
                <div class="note note-info margin-top-10">
                    <p>@T("admin.customers.actiontype.helpText.OneOfThem")</p>
                    <p>@T("admin.customers.actiontype.helpText.AllOfThem")</p>
                </div>
            </div>
        </div>
    </div>
</div>
}

@helper TabConditions()
{

    if (String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @T("Admin.Customers.CustomerAction.SaveBeforeEdit")
        </div>
    }

    if (!String.IsNullOrEmpty(Model.Id))
    {
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="conditions-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewCondition" name="btnAddNewCondition" value="@T("Admin.Customers.CustomerAction.Conditions.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddCondition", "CustomerAction", new { customerActionId = Model.Id }))'); return false;" class="btn default" />
            </div>
        </div>

            var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
            var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
                    
                    
        <script>
            $(document).ready(function () {
                $("#conditions-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("Conditions", "CustomerAction", new { customerActionId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("ConditionDelete", "CustomerAction", new { customerActionId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: {
                                id: "Id",
                            }
                        },
                        error: function (e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        numeric: false,
                        previousNext: false,
                        info: false
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [
                    {
                        field: "Name",
                        title: "@T("Admin.Customers.CustomerAction.Fields.Name")",
                        width: 300,
                        filterable: false,
                        sortable: false
                    },
                    {
                        field: "Condition",
                        title: "@T("Admin.Customers.CustomerAction.Fields.ConditionType")",
                        width: 100,
                    },
                    {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 100,
                        template: '<a href="@Url.Content("~/Admin/CustomerAction/EditCondition")?customerActionId=@(Model.Id)&cid=#=Id#">@T("Admin.Common.Edit")</a>'
                    },
                    {
                        command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                        title: "@T("Admin.Common.Delete")",
                        width: 100
                    }]
                });
            });
    </script>                                        
           
    }
}
@helper TabReaction()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ReactionTypeId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.ReactionTypeId, ((Grand.Core.Domain.Customers.CustomerReactionTypeEnum)Model.ReactionTypeId).ToSelectList())
                    @Html.ValidationMessageFor(model => model.ReactionTypeId)
                    <div class="note note-info margin-top-10">
                        <p>@T("admin.customers.actiontype.helpText.Banner")</p>
                        <p>@T("admin.customers.actiontype.helpText.Email")</p>
                        <p>@T("admin.customers.actiontype.helpText.Customerrole")</p>
                        <p>@T("admin.customers.actiontype.helpText.Customertag")</p>
                    </div>
                </div>
            </div>
            <div class="form-group" id="plnBanner">
                @Html.GrandLabelFor(model => model.BannerId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.BannerId, Model.Banners)
                    @Html.ValidationMessageFor(model => model.BannerId)
                </div>
            </div>
            <div class="form-group" id="plnMessage">
                @Html.GrandLabelFor(model => model.MessageTemplateId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.MessageTemplateId, Model.MessageTemplates)
                    @Html.ValidationMessageFor(model => model.MessageTemplateId)
                </div>
            </div>
            <div class="form-group" id="plnRole">
                @Html.GrandLabelFor(model => model.CustomerRoleId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CustomerRoleId, Model.CustomerRoles)
                    @Html.ValidationMessageFor(model => model.CustomerRoleId)
                </div>
            </div>
            <div class="form-group" id="plnTag">
                @Html.GrandLabelFor(model => model.CustomerTagId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CustomerTagId, Model.CustomerTags)
                    @Html.ValidationMessageFor(model => model.CustomerTagId)
                </div>
            </div>
        </div>
    </div>
}



@helper TabHistory()
{

if (String.IsNullOrEmpty(Model.Id))
{
        <div class="note note-info">
            @T("Admin.Customers.CustomerAction.SaveBeforeEdit")
        </div>
}
if (!String.IsNullOrEmpty(Model.Id))
{

    var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

       
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="history-grid"></div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            $("#history-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("History", "CustomerAction", new { customerActionId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                    },
                schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [
                {
                    field: "CreateDateUtc",
                    title: "@T("Admin.Customers.CustomerAction.History.Fields.CreateDateUtc")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                },
                {
                    field: "Email",
                    title: "@T("Admin.Customers.CustomerAction.History.Fields.Customer")",
                    width: 100,
                }]
            });
        });
    </script>

        }
}




