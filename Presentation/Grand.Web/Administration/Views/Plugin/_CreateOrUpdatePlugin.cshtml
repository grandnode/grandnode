@model PluginModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.SystemName)
@if (ViewBag.RefreshPage == true)
{
    <script type="text/javascript">
        try {window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();}
        catch (e){}
        window.close();
    </script>
}
<script>
    $(document).ready(function() {
        $("#plugin-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="plugin-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Configuration.Plugins.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Configuration.Plugins.Stores")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabStores()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "plugin-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}


@helper TabInfo()
{
    @(Html.LocalizedEditor<PluginModel, PluginLocalizedModel>("plugin-localized",
        @<div class="form-horizontal">
             <div class="form-body">
                 <div class="form-group">
                     @Html.GrandLabelFor(model => model.Locales[item].FriendlyName)
                     <div class="col-md-9 col-sm-9">
                         @Html.GrandEditorFor(model => model.Locales[item].FriendlyName)
                         @Html.ValidationMessageFor(model => model.Locales[item].FriendlyName)
                     </div>
                 </div>
                         @Html.HiddenFor(model => model.Locales[item].LanguageId)
             </div>
        </div>
        ,
        @<div class="form-horizontal">
            <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.FriendlyName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.FriendlyName)
                    @Html.ValidationMessageFor(model => model.FriendlyName)
                </div>
            </div>
            </div>
        </div>
))
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.DisplayOrder)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
            @if (Model.CanChangeEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.IsEnabled)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.IsEnabled)
                        @Html.ValidationMessageFor(model => model.IsEnabled)
                    </div>
                </div>
            }
        </div>
    </div>

}
@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.LimitedToStores)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.LimitedToStores)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.LimitedToStores)
                </div>
            </div>
            <div class="form-group" id="pnl-available-stores">
                @Html.GrandLabelFor(model => model.AvailableStores)
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                    {
                        @Html.Action("MultistoreDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var store in Model.AvailableStores)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">
                            No stores defined
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
}
