@model CustomerUserSettingsModel
@using Grand.Core.Domain.Customers;
@{
    //page title
    ViewBag.Title = T("Admin.Configuration.Settings.CustomerUser").Text;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-fw fa-sliders"></i>
                        @T("Admin.Configuration.Settings.CustomerUser")
                    </div>
                    <div class="actions">
                        <div class="btn-group btn-group-devided">
                            <button class="btn btn-success" type="submit" name="save"><i class="fa fa-check"></i> @T("Admin.Common.Save") </button>
                        </div>
                    </div>
                </div>                
                <div class="portlet-body form">
                    <div id="customersettings-edit" style="display:none">
                        <ul>
                            <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.CustomerUser.CustomerSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.CustomerUser.CustomerFormFields")
                            </li>
                            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.CustomerUser.AddressFormFields")
                            </li>
                            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.CustomerUser.DateTimeSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.CustomerUser.ExternalAuthenticationSettings")
                            </li>
                        </ul>
                        <div>
                            @TabCustomerSettings()
                        </div>
                        <div>
                            @TabCustomerFormFields()
                        </div>
                        <div>
                            @TabAddressFormFields()
                        </div>
                        <div>
                            @TabDateTimeSettings()
                        </div>
                        <div>
                            @TabExternalAuthenticationSettings()
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @Html.ValidationSummary(false)

    <script>
        $(document).ready(function () {
            $("#customersettings-edit").show();
            $("#customersettings-edit").kendoTabStrip({
                animation:  {
                    open: {
                        effects: "fadeIn"
                    }
                },
                select: tabstrip_on_tab_select
            });
        });
    </script>
    

    {
        //custom tabs
        var eventMessage = new AdminTabStripCreated(this.Html, "customersettings-edit");
        EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
        foreach (var eventBlock in eventMessage.BlocksToRender)
        {
            @eventBlock
        }
    }

    @*save selected tab index*@
    <input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

}
@helper TabCustomerSettings()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.CustomerSettings.AllowCustomersToUploadAvatars)").click(toggleAvatar);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.UsernamesEnabled)").click(toggleUsername);


            toggleAvatar();
            toggleUsername();
        });

        function toggleAvatar() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.AllowCustomersToUploadAvatars)').is(':checked')) {
                $('#pnlDefaultAvatarEnabled').show();
            }
            else {
                $('#pnlDefaultAvatarEnabled').hide();
            }
        }

        function toggleUsername() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.UsernamesEnabled)').is(':checked')) {
                $('#pnlAllowUsersToChangeUsernames').show();
                $('#pnlCheckUsernameAvailability').show();
            }
            else {
                $('#pnlAllowUsersToChangeUsernames').hide();
                $('#pnlCheckUsernameAvailability').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.UsernamesEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.UsernamesEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.UsernamesEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAllowUsersToChangeUsernames">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.AllowUsersToChangeUsernames, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.AllowUsersToChangeUsernames)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.AllowUsersToChangeUsernames)
                </div>
            </div>
            <div class="form-group" id="pnlCheckUsernameAvailability">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CheckUsernameAvailabilityEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CheckUsernameAvailabilityEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CheckUsernameAvailabilityEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.UserRegistrationType, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CustomerSettings.UserRegistrationType, ((UserRegistrationType)Model.CustomerSettings.UserRegistrationType).ToSelectList())
                    @Html.ValidationMessageFor(model => model.CustomerSettings.UserRegistrationType)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.AllowCustomersToUploadAvatars, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.AllowCustomersToUploadAvatars)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.AllowCustomersToUploadAvatars)
                </div>
            </div>
            <div class="form-group" id="pnlDefaultAvatarEnabled">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.DefaultAvatarEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.DefaultAvatarEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.DefaultAvatarEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.ShowCustomersLocation, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.ShowCustomersLocation)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.ShowCustomersLocation)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.ShowCustomersJoinDate, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.ShowCustomersJoinDate)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.ShowCustomersJoinDate)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.AllowViewingProfiles, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.AllowViewingProfiles)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.AllowViewingProfiles)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.NotifyNewCustomerRegistration, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.NotifyNewCustomerRegistration)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.NotifyNewCustomerRegistration)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.HideDownloadableProductsTab, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.HideDownloadableProductsTab)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.HideDownloadableProductsTab)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.HideBackInStockSubscriptionsTab, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.HideBackInStockSubscriptionsTab)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.HideBackInStockSubscriptionsTab)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CustomerNameFormat, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CustomerSettings.CustomerNameFormat, ((CustomerNameFormat)Model.CustomerSettings.CustomerNameFormat).ToSelectList())
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CustomerNameFormat)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.DefaultPasswordFormat, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.CustomerSettings.DefaultPasswordFormat, ((PasswordFormat)Model.CustomerSettings.DefaultPasswordFormat).ToSelectList())
                    @Html.ValidationMessageFor(model => model.CustomerSettings.DefaultPasswordFormat)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.PasswordMinLength, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.PasswordMinLength)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.PasswordMinLength)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.PasswordRecoveryLinkDaysValid, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.PasswordRecoveryLinkDaysValid)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.PasswordRecoveryLinkDaysValid)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.HideNewsletterBlock, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.HideNewsletterBlock)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.HideNewsletterBlock)
                </div>
            </div>
            <div class="form-group" id="pnlNewsletterBlockAllowToUnsubscribe">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.NewsletterBlockAllowToUnsubscribe, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.NewsletterBlockAllowToUnsubscribe)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.NewsletterBlockAllowToUnsubscribe)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.RegistrationFreeShipping, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.RegistrationFreeShipping)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.RegistrationFreeShipping)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StoreLastVisitedPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StoreLastVisitedPage)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StoreLastVisitedPage)
                </div>
            </div>
        </div>
    </div>
}
@helper TabCustomerFormFields()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.CustomerSettings.DateOfBirthEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.DateOfBirthRequired)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.CountryEnabled)").click(toggleCustomerCountryFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.StateProvinceEnabled)").click(toggleCustomerStateProvinceFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.CompanyEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.StreetAddressEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.StreetAddress2Enabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.ZipPostalCodeEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.CityEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.PhoneEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.FaxEnabled)").click(toggleCustomerRequiredFormField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.NewsletterEnabled)").click(toggleNewsletterEnabledField);
            $("#@Html.FieldIdFor(model => model.CustomerSettings.HideNewsletterBlock)").click(toggleHideNewsletterBlock);


            toggleCustomerCountryFormField();
            toggleCustomerStateProvinceFormField();
            toggleCustomerRequiredFormField();
            toggleNewsletterEnabledField();
            toggleHideNewsletterBlock();
        });

        function toggleCustomerCountryFormField() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.CountryEnabled)').is(':checked')) {
                $('#pnlCustomerCountryRequired').show();
                $('#pnlCustomerStateProvinceEnabled').show();
                toggleCustomerStateProvinceFormField();
            } else {
                $('#pnlCustomerCountryRequired').hide();
                $('#pnlCustomerStateProvinceEnabled').hide();
                toggleCustomerStateProvinceFormField();
            }
        }

        function toggleCustomerStateProvinceFormField() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.CountryEnabled)').is(':checked') &&
                $('#@Html.FieldIdFor(model => model.CustomerSettings.StateProvinceEnabled)').is(':checked')) {
                $('#pnlCustomerStateProvinceRequired').show();
            } else {
                $('#pnlCustomerStateProvinceRequired').hide();
            }
        }

        function toggleCustomerRequiredFormField() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.DateOfBirthEnabled)').is(':checked')) {
                $('#pnlCustomerDateOfBirthRequired').show();
            } else {
                $('#pnlCustomerDateOfBirthRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.DateOfBirthEnabled)').is(':checked') &&
                $('#@Html.FieldIdFor(model => model.CustomerSettings.DateOfBirthRequired)').is(':checked')) {
                $('#pnlDateOfBirthMinimumAge').show();
            } else {
                $('#pnlDateOfBirthMinimumAge').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.CompanyEnabled)').is(':checked')) {
                $('#pnlCustomerCompanyRequired').show();
            } else {
                $('#pnlCustomerCompanyRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.StreetAddressEnabled)').is(':checked')) {
                $('#pnlCustomerStreetAddressRequired').show();
            } else {
                $('#pnlCustomerStreetAddressRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.StreetAddress2Enabled)').is(':checked')) {
                $('#pnlCustomerStreetAddress2Required').show();
            } else {
                $('#pnlCustomerStreetAddress2Required').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.ZipPostalCodeEnabled)').is(':checked')) {
                $('#pnlCustomerZipPostalCodeRequired').show();
            } else {
                $('#pnlCustomerZipPostalCodeRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.CityEnabled)').is(':checked')) {
                $('#pnlCustomerCityRequired').show();
            } else {
                $('#pnlCustomerCityRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.PhoneEnabled)').is(':checked')) {
                $('#pnlCustomerPhoneRequired').show();
            } else {
                $('#pnlCustomerPhoneRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.FaxEnabled)').is(':checked')) {
                $('#pnlCustomerFaxRequired').show();
            } else {
                $('#pnlCustomerFaxRequired').hide();
            }
        }

        function toggleNewsletterEnabledField() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.NewsletterEnabled)').is(':checked')) {
                $('#pnlCustomerNewsletterTickedByDefault').show();
            } else {
                $('#pnlCustomerNewsletterTickedByDefault').hide();
            }
        }

        function toggleHideNewsletterBlock() {
            if ($('#@Html.FieldIdFor(model => model.CustomerSettings.HideNewsletterBlock)').is(':checked')) {
                $('#pnlNewsletterBlockAllowToUnsubscribe').hide();
            }
            else {
                $('#pnlNewsletterBlockAllowToUnsubscribe').show();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="note note-info">
                    @T("Admin.Configuration.Settings.CustomerUser.CustomerFormFields.Description")
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.GenderEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.GenderEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.GenderEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.DateOfBirthEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.DateOfBirthEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.DateOfBirthEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerDateOfBirthRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.DateOfBirthRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.DateOfBirthRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.DateOfBirthRequired)
                </div>
            </div>
            <div class="form-group" id="pnlDateOfBirthMinimumAge">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.DateOfBirthMinimumAge, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.DateOfBirthMinimumAge)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.DateOfBirthMinimumAge)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CompanyEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CompanyEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CompanyEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerCompanyRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CompanyRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CompanyRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CompanyRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StreetAddressEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StreetAddressEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StreetAddressEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerStreetAddressRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StreetAddressRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StreetAddressRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StreetAddressRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StreetAddress2Enabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StreetAddress2Enabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StreetAddress2Enabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerStreetAddress2Required">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StreetAddress2Required, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StreetAddress2Required)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StreetAddress2Required)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.ZipPostalCodeEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.ZipPostalCodeEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.ZipPostalCodeEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerZipPostalCodeRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.ZipPostalCodeRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.ZipPostalCodeRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.ZipPostalCodeRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CityEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CityEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CityEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerCityRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CityRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CityRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CityRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CountryEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CountryEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CountryEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerCountryRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.CountryRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.CountryRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.CountryRequired)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerStateProvinceEnabled">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StateProvinceEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StateProvinceEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StateProvinceEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerStateProvinceRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.StateProvinceRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.StateProvinceRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.StateProvinceRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.PhoneEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.PhoneEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.PhoneEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerPhoneRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.PhoneRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.PhoneRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.PhoneRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.FaxEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.FaxEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.FaxEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerFaxRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.FaxRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.FaxRequired)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.FaxRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.AcceptPrivacyPolicyEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.AcceptPrivacyPolicyEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.AcceptPrivacyPolicyEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.NewsletterEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.NewsletterEnabled)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.NewsletterEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlCustomerNewsletterTickedByDefault">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.CustomerSettings.NewsletterTickedByDefault, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.CustomerSettings.NewsletterTickedByDefault)
                    @Html.ValidationMessageFor(model => model.CustomerSettings.NewsletterTickedByDefault)
                </div>
            </div>
        </div>
    </div>
//render custom customer attributes
    @Html.Action("ListBlock", "CustomerAttribute")
}
@helper TabAddressFormFields()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.AddressSettings.CountryEnabled)").click(toggleAddressCountryFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.CompanyEnabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.StreetAddressEnabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.StreetAddress2Enabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.ZipPostalCodeEnabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.CityEnabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.PhoneEnabled)").click(toggleAddressRequiredFormField);
            $("#@Html.FieldIdFor(model => model.AddressSettings.FaxEnabled)").click(toggleAddressRequiredFormField);


            toggleAddressCountryFormField();
            toggleAddressRequiredFormField();
        });

        function toggleAddressCountryFormField() {
            if ($('#@Html.FieldIdFor(model => model.AddressSettings.CountryEnabled)').is(':checked')) {
                $('#pnlAddressStateProvinceEnabled').show();
            }
            else {
                $('#pnlAddressStateProvinceEnabled').hide();
            }
        }

        function toggleAddressRequiredFormField() {
            if ($('#@Html.FieldIdFor(model => model.AddressSettings.CompanyEnabled)').is(':checked')) {
                $('#pnlAddressCompanyRequired').show();
            }
            else {
                $('#pnlAddressCompanyRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.StreetAddressEnabled)').is(':checked')) {
                $('#pnlAddressStreetAddressRequired').show();
            }
            else {
                $('#pnlAddressStreetAddressRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.StreetAddress2Enabled)').is(':checked')) {
                $('#pnlAddressStreetAddress2Required').show();
            }
            else {
                $('#pnlAddressStreetAddress2Required').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.ZipPostalCodeEnabled)').is(':checked')) {
                $('#pnlAddressZipPostalCodeRequired').show();
            }
            else {
                $('#pnlAddressZipPostalCodeRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.CityEnabled)').is(':checked')) {
                $('#pnlAddressCityRequired').show();
            }
            else {
                $('#pnlAddressCityRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.PhoneEnabled)').is(':checked')) {
                $('#pnlAddressPhoneRequired').show();
            }
            else {
                $('#pnlAddressPhoneRequired').hide();
            }

            if ($('#@Html.FieldIdFor(model => model.AddressSettings.FaxEnabled)').is(':checked')) {
                $('#pnlAddressFaxRequired').show();
            }
            else {
                $('#pnlAddressFaxRequired').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="note note-info">
                    @T("Admin.Configuration.Settings.CustomerUser.AddressFormFields.Description")
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.CompanyEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.CompanyEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.CompanyEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressCompanyRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.CompanyRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.CompanyRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.CompanyRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.StreetAddressEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.StreetAddressEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.StreetAddressEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressStreetAddressRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.StreetAddressRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.StreetAddressRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.StreetAddressRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.StreetAddress2Enabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.StreetAddress2Enabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.StreetAddress2Enabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressStreetAddress2Required">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.StreetAddress2Required, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.StreetAddress2Required)
                    @Html.ValidationMessageFor(model => model.AddressSettings.StreetAddress2Required)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.ZipPostalCodeEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.ZipPostalCodeEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.ZipPostalCodeEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressZipPostalCodeRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.ZipPostalCodeRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.ZipPostalCodeRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.ZipPostalCodeRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.CityEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.CityEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.CityEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressCityRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.CityRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.CityRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.CityRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.CountryEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.CountryEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.CountryEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressStateProvinceEnabled">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.StateProvinceEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.StateProvinceEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.StateProvinceEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.PhoneEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.PhoneEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.PhoneEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressPhoneRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.PhoneRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.PhoneRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.PhoneRequired)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.FaxEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.FaxEnabled)
                    @Html.ValidationMessageFor(model => model.AddressSettings.FaxEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlAddressFaxRequired">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.AddressSettings.FaxRequired, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddressSettings.FaxRequired)
                    @Html.ValidationMessageFor(model => model.AddressSettings.FaxRequired)
                </div>
            </div>
        </div>
    </div>
//render custom address attributes
    @Html.Action("ListBlock", "AddressAttribute")
}
@helper TabDateTimeSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.DateTimeSettings.AllowCustomersToSetTimeZone, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DateTimeSettings.AllowCustomersToSetTimeZone)
                    @Html.ValidationMessageFor(model => model.DateTimeSettings.AllowCustomersToSetTimeZone)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.DateTimeSettings.DefaultStoreTimeZoneId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.DateTimeSettings.DefaultStoreTimeZoneId, Model.DateTimeSettings.AvailableTimeZones)
                    @Html.ValidationMessageFor(model => model.DateTimeSettings.DefaultStoreTimeZoneId)
                </div>
            </div>
        </div>
    </div>
}
@helper TabExternalAuthenticationSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.ExternalAuthenticationSettings.AutoRegisterEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ExternalAuthenticationSettings.AutoRegisterEnabled)
                    @Html.ValidationMessageFor(model => model.ExternalAuthenticationSettings.AutoRegisterEnabled)
                </div>
            </div>
        </div>
    </div>
}