@model GeneralCommonSettingsModel
@{
    //page title
    ViewBag.Title = T("Admin.Configuration.Settings.GeneralCommon").Text;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-fw fa-sliders"></i>
                        @T("Admin.Configuration.Settings.GeneralCommon")
                    </div>
                    <div class="actions">
                        <div class="btn-group btn-group-devided">
                            <button class="btn btn-success" type="submit" name="save"><i class="fa fa-check"></i> @T("Admin.Common.Save") </button>
                        </div>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="form-horizontal">
                        <div class="form-body">
                            @Html.Action("StoreScopeConfiguration", "Setting")
                        </div>
                    </div>
                </div>
                <div class="portlet-body form">
                    <div id="generalsettings-edit" style="display:none">
                        <ul>
                            <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.StoreInformationSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.SEOSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.SecuritySettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.PdfSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.LocalizationSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.FullTextSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(6, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics")
                            </li>
                        </ul>
                        <div>
                            @TabStoreInformationSettings()
                        </div>
                        <div>
                            @TabSEOSettings()
                        </div>
                        <div>
                            @TabSecuritySettings()
                        </div>
                        <div>
                            @TabPdfSettings()
                        </div>
                        <div>
                            @TabLocalizationSettings()
                        </div>
                        <div>
                            @TabFullTextSettings()
                        </div>
                        <div>
                            @TabGoogleAnalyticsSettings()
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#generalsettings-edit").show();
            $("#generalsettings-edit").kendoTabStrip({
                animation:  {
                    open: {
                        effects: "fadeIn"
                    }
                },
                select: tabstrip_on_tab_select
            });
        });
    </script>

  

    {
        //custom tabs
        var eventMessage = new AdminTabStripCreated(this.Html, "generalsettings-edit");
        EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
        foreach (var eventBlock in eventMessage.BlocksToRender)
        {
            @eventBlock
        }
    }


    
    
    @*save selected tab index*@
    <input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">
    
}
@helper TabStoreInformationSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.StoreClosed_OverrideForStore, model => model.StoreInformationSettings.StoreClosed, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.StoreClosed, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.StoreClosed)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.StoreClosed)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.DefaultStoreTheme_OverrideForStore, "theme-selection-block", Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.DefaultStoreTheme, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    <div class="row">
                        <ul class="clearer" style="list-style: none;" id="theme-selection-block">
                            @foreach (var theme in Model.StoreInformationSettings.AvailableStoreThemes)
                            {
                                <li style="float: left; width: 210px;">
                                    <p style="float: left; padding-top: 55px;">
                                        <input type="radio" name="@Html.FieldNameFor(x => x.StoreInformationSettings.DefaultStoreTheme)" value="@theme.ThemeName" id="id_image_@theme.ThemeName"
                                               @if (theme.ThemeName == Model.StoreInformationSettings.DefaultStoreTheme) { <text> checked="checked" </text>     }>
                                    </p>
                                    <p style="float: left;">
                                        <label for="id_image_@theme.ThemeName">
                                            <img src="@Url.Content(theme.PreviewImageUrl)" alt="@theme.PreviewText" title="@theme.PreviewText" width="175">
                                            <br />
                                            <label style="text-align:center;font-weight:bold;width:170px;">@theme.ThemeTitle</label>
                                        </label>
                                    </p>
                                </li>
                            }
                        </ul>
                    </div>
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.DefaultStoreTheme)
                    <div class="note note-info">@T("Admin.Configuration.Settings.GeneralCommon.DefaultStoreTheme.GetMore") <a href="http://www.grandnode.com/extensions?category=4&utm_source=admin-panel&utm_medium=theme-settings&utm_campaign=admin-panel" target="_blank">http://www.grandnode.com/extensions</a></div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.AllowCustomerToSelectTheme_OverrideForStore, model => model.StoreInformationSettings.AllowCustomerToSelectTheme, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.AllowCustomerToSelectTheme, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.AllowCustomerToSelectTheme)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.AllowCustomerToSelectTheme)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.LogoPictureId_OverrideForStore, model => model.StoreInformationSettings.LogoPictureId, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.LogoPictureId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.LogoPictureId)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.LogoPictureId)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.DisplayEuCookieLawWarning_OverrideForStore, model => model.StoreInformationSettings.DisplayEuCookieLawWarning, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.DisplayEuCookieLawWarning, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.DisplayEuCookieLawWarning)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.DisplayEuCookieLawWarning)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.FacebookLink_OverrideForStore, model => model.StoreInformationSettings.FacebookLink, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.FacebookLink, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.FacebookLink)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.FacebookLink)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.TwitterLink_OverrideForStore, model => model.StoreInformationSettings.TwitterLink, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.TwitterLink, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.TwitterLink)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.TwitterLink)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.YoutubeLink_OverrideForStore, model => model.StoreInformationSettings.YoutubeLink, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.YoutubeLink, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.YoutubeLink)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.YoutubeLink)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.GooglePlusLink_OverrideForStore, model => model.StoreInformationSettings.GooglePlusLink, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.GooglePlusLink, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.GooglePlusLink)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.GooglePlusLink)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.StoreInDatabaseContactUsForm_OverrideForStore, model => model.StoreInformationSettings.StoreInDatabaseContactUsForm, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.StoreInDatabaseContactUsForm, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.StoreInDatabaseContactUsForm)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.StoreInDatabaseContactUsForm)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.SubjectFieldOnContactUsForm_OverrideForStore, model => model.StoreInformationSettings.SubjectFieldOnContactUsForm, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.SubjectFieldOnContactUsForm, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.SubjectFieldOnContactUsForm)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.SubjectFieldOnContactUsForm)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.StoreInformationSettings.UseSystemEmailForContactUsForm_OverrideForStore, model => model.StoreInformationSettings.UseSystemEmailForContactUsForm, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.StoreInformationSettings.UseSystemEmailForContactUsForm, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.StoreInformationSettings.UseSystemEmailForContactUsForm)
                    @Html.ValidationMessageFor(model => model.StoreInformationSettings.UseSystemEmailForContactUsForm)
                </div>
            </div>
        </div>
    </div>
}
@helper TabSEOSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.PageTitleSeparator_OverrideForStore, model => model.SeoSettings.PageTitleSeparator, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.PageTitleSeparator, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.PageTitleSeparator)
                    @Html.ValidationMessageFor(model => model.SeoSettings.PageTitleSeparator)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.PageTitleSeoAdjustment_OverrideForStore, model => model.SeoSettings.PageTitleSeoAdjustment, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.PageTitleSeoAdjustment, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.SeoSettings.PageTitleSeoAdjustment, Model.SeoSettings.PageTitleSeoAdjustmentValues)
                    @Html.ValidationMessageFor(model => model.SeoSettings.PageTitleSeoAdjustment)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.DefaultTitle_OverrideForStore, model => model.SeoSettings.DefaultTitle, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.DefaultTitle, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.DefaultTitle)
                    @Html.ValidationMessageFor(model => model.SeoSettings.DefaultTitle)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.DefaultMetaKeywords_OverrideForStore, model => model.SeoSettings.DefaultMetaKeywords, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.DefaultMetaKeywords, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.DefaultMetaKeywords)
                    @Html.ValidationMessageFor(model => model.SeoSettings.DefaultMetaKeywords)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.DefaultMetaDescription_OverrideForStore, model => model.SeoSettings.DefaultMetaDescription, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.DefaultMetaDescription, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.DefaultMetaDescription)
                    @Html.ValidationMessageFor(model => model.SeoSettings.DefaultMetaDescription)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.GenerateProductMetaDescription_OverrideForStore, model => model.SeoSettings.GenerateProductMetaDescription, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.GenerateProductMetaDescription, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.GenerateProductMetaDescription)
                    @Html.ValidationMessageFor(model => model.SeoSettings.GenerateProductMetaDescription)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.ConvertNonWesternChars_OverrideForStore, model => model.SeoSettings.ConvertNonWesternChars, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.ConvertNonWesternChars, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.ConvertNonWesternChars)
                    @Html.ValidationMessageFor(model => model.SeoSettings.ConvertNonWesternChars)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.CanonicalUrlsEnabled_OverrideForStore, model => model.SeoSettings.CanonicalUrlsEnabled, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.CanonicalUrlsEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.CanonicalUrlsEnabled)
                    @Html.ValidationMessageFor(model => model.SeoSettings.CanonicalUrlsEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.WwwRequirement_OverrideForStore, model => model.SeoSettings.WwwRequirement, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.WwwRequirement, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.SeoSettings.WwwRequirement, Model.SeoSettings.WwwRequirementValues)
                    @Html.ValidationMessageFor(model => model.SeoSettings.WwwRequirement)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.EnableJsBundling_OverrideForStore, model => model.SeoSettings.EnableJsBundling, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.EnableJsBundling, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.EnableJsBundling)
                    @Html.ValidationMessageFor(model => model.SeoSettings.EnableJsBundling)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.EnableCssBundling_OverrideForStore, model => model.SeoSettings.EnableCssBundling, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.EnableCssBundling, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.EnableCssBundling)
                    @Html.ValidationMessageFor(model => model.SeoSettings.EnableCssBundling)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.TwitterMetaTags_OverrideForStore, model => model.SeoSettings.TwitterMetaTags, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.TwitterMetaTags, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.TwitterMetaTags)
                    @Html.ValidationMessageFor(model => model.SeoSettings.TwitterMetaTags)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.SeoSettings.OpenGraphMetaTags_OverrideForStore, model => model.SeoSettings.OpenGraphMetaTags, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.SeoSettings.OpenGraphMetaTags, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SeoSettings.OpenGraphMetaTags)
                    @Html.ValidationMessageFor(model => model.SeoSettings.OpenGraphMetaTags)
                </div>
            </div>
        </div>
    </div>
}
@helper TabSecuritySettings()
{
    <script type="text/javascript">
    $(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.SecuritySettings.CaptchaEnabled)").click(toggleReCaptcha);

        toggleReCaptcha();
    });

    function toggleReCaptcha() {
        if ($('#@Html.FieldIdFor(model => model.SecuritySettings.CaptchaEnabled)').is(':checked')) {
            $('#ssCaptchaShowOnLoginPagepnl').show();
            $('#ssCaptchaShowOnRegistrationPagepnl').show();
            $('#ssCaptchaShowOnContactUsPagepnl').show();
            $('#ssCaptchaShowOnEmailWishlistToFriendPagepnl').show();
            $('#ssCaptchaShowOnEmailProductToFriendPagepnl').show();
            $('#ssCaptchaShowOnAskQuestionPagepnl').show();
            $('#ssCaptchaShowOnBlogCommentPagepnl').show();
            $('#ssCaptchaShowOnNewsCommentPagepnl').show();
            $('#ssCaptchaShowOnProductReviewPagepnl').show();
            $('#ssReCaptchaPublicKeypnl').show();
            $('#ssCaptchaShowOnApplyVendorPagepnl').show();
            $('#ssReCaptchaPrivateKeypnl').show();
            $('#ssReCaptchaVersionpnl').show();
        }
        else {
            $('#ssCaptchaShowOnLoginPagepnl').hide();
            $('#ssCaptchaShowOnRegistrationPagepnl').hide();
            $('#ssCaptchaShowOnContactUsPagepnl').hide();
            $('#ssCaptchaShowOnEmailWishlistToFriendPagepnl').hide();
            $('#ssCaptchaShowOnEmailProductToFriendPagepnl').hide();
            $('#ssCaptchaShowOnAskQuestionPagepnl').hide();
            $('#ssCaptchaShowOnBlogCommentPagepnl').hide();
            $('#ssCaptchaShowOnNewsCommentPagepnl').hide();
            $('#ssCaptchaShowOnProductReviewPagepnl').hide();
            $('#ssReCaptchaPublicKeypnl').hide();
            $('#ssCaptchaShowOnApplyVendorPagepnl').hide();
            $('#ssReCaptchaPrivateKeypnl').hide();
            $('#ssReCaptchaVersionpnl').hide();
        }
    }
    </script>

    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.EncryptionKey, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.EncryptionKey)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.EncryptionKey)
                    <input type="submit" name="changeencryptionkey" value="@T("Admin.Common.Change")" id="changeencryptionkey" class="btn default" onclick="return confirm('@T("Admin.Common.AreYouSure")');" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.AdminAreaAllowedIpAddresses)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.ForceSslForAllPages, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.ForceSslForAllPages)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.ForceSslForAllPages)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.EnableXsrfProtectionForAdminArea, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.EnableXsrfProtectionForAdminArea)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.EnableXsrfProtectionForAdminArea)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.EnableXsrfProtectionForPublicStore, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.EnableXsrfProtectionForPublicStore)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.EnableXsrfProtectionForPublicStore)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.HoneypotEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.HoneypotEnabled)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.HoneypotEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="note note-info">
                    A CAPTCHA is a program that can tell whether its user is a human or a computer.
                    You've probably seen them — colorful images with distorted text at the bottom of
                    Web registration forms. CAPTCHAs are used by many websites to prevent abuse from
                    "bots," or automated programs usually written to generate spam. No computer program
                    can read distorted text as well as humans can, so bots cannot navigate sites protected
                    by CAPTCHAs. nopCommerce uses <a href="http://www.google.com/recaptcha" target="_blank">reCAPTCHA</a>.
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaEnabled)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaEnabled)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnLoginPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnLoginPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnLoginPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnLoginPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnRegistrationPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnRegistrationPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnRegistrationPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnRegistrationPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnContactUsPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnContactUsPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnContactUsPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnContactUsPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnEmailWishlistToFriendPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnEmailWishlistToFriendPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnEmailWishlistToFriendPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnEmailWishlistToFriendPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnEmailProductToFriendPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnEmailProductToFriendPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnEmailProductToFriendPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnEmailProductToFriendPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnAskQuestionPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnAskQuestionPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnAskQuestionPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnAskQuestionPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnBlogCommentPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnBlogCommentPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnBlogCommentPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnBlogCommentPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnNewsCommentPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnNewsCommentPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnNewsCommentPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnNewsCommentPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnProductReviewPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnProductReviewPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnProductReviewPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnProductReviewPage)
                </div>
            </div>
            <div class="form-group" id="ssCaptchaShowOnApplyVendorPagepnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.CaptchaShowOnApplyVendorPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.CaptchaShowOnApplyVendorPage)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.CaptchaShowOnApplyVendorPage)
                </div>
            </div>
            <div class="form-group" id="ssReCaptchaVersionpnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.ReCaptchaVersion, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.SecuritySettings.ReCaptchaVersion, Model.SecuritySettings.AvailableReCaptchaVersions)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.ReCaptchaVersion)
                </div>
            </div>
            <div class="form-group" id="ssReCaptchaPublicKeypnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.ReCaptchaPublicKey, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.ReCaptchaPublicKey)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.ReCaptchaPublicKey)
                </div>
            </div>
            <div class="form-group" id="ssReCaptchaPrivateKeypnl">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.SecuritySettings.ReCaptchaPrivateKey, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.SecuritySettings.ReCaptchaPrivateKey)
                    @Html.ValidationMessageFor(model => model.SecuritySettings.ReCaptchaPrivateKey)
                </div>
            </div>
        </div>
    </div>
}
@helper TabPdfSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PdfSettings.LetterPageSizeEnabled_OverrideForStore, model => model.PdfSettings.LetterPageSizeEnabled, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PdfSettings.LetterPageSizeEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.PdfSettings.LetterPageSizeEnabled)
                    @Html.ValidationMessageFor(model => model.PdfSettings.LetterPageSizeEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PdfSettings.LogoPictureId_OverrideForStore, "pdf-logo-picture", Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PdfSettings.LogoPictureId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9" class="adminData" id="pdf-logo-picture">
                    @Html.GrandEditorFor(model => model.PdfSettings.LogoPictureId)
                    @Html.ValidationMessageFor(model => model.PdfSettings.LogoPictureId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PdfSettings.DisablePdfInvoicesForPendingOrders_OverrideForStore, model => model.PdfSettings.DisablePdfInvoicesForPendingOrders, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PdfSettings.DisablePdfInvoicesForPendingOrders, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.PdfSettings.DisablePdfInvoicesForPendingOrders)
                    @Html.ValidationMessageFor(model => model.PdfSettings.DisablePdfInvoicesForPendingOrders)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PdfSettings.InvoiceFooterTextColumn1_OverrideForStore, model => model.PdfSettings.InvoiceFooterTextColumn1, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PdfSettings.InvoiceFooterTextColumn1, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.TextAreaFor(model => model.PdfSettings.InvoiceFooterTextColumn1, new { style = "Width: 250px; Height: 150px;" })
                    @Html.ValidationMessageFor(model => model.PdfSettings.InvoiceFooterTextColumn1)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.PdfSettings.InvoiceFooterTextColumn2_OverrideForStore, model => model.PdfSettings.InvoiceFooterTextColumn2, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.PdfSettings.InvoiceFooterTextColumn2, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.TextAreaFor(model => model.PdfSettings.InvoiceFooterTextColumn2, new { style = "Width: 250px; Height: 150px;" })
                    @Html.ValidationMessageFor(model => model.PdfSettings.InvoiceFooterTextColumn2)
                </div>
            </div>
        </div>
    </div>
}
@helper TabLocalizationSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.UseImagesForLanguageSelection, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.UseImagesForLanguageSelection)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.UseImagesForLanguageSelection)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.AutomaticallyDetectLanguage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.AutomaticallyDetectLanguage)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.AutomaticallyDetectLanguage)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.LoadAllLocaleRecordsOnStartup, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.LoadAllLocaleRecordsOnStartup)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.LoadAllLocaleRecordsOnStartup)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.LoadAllLocalizedPropertiesOnStartup, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.LoadAllLocalizedPropertiesOnStartup)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.LoadAllLocalizedPropertiesOnStartup)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.LocalizationSettings.LoadAllUrlRecordsOnStartup, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LocalizationSettings.LoadAllUrlRecordsOnStartup)
                    @Html.ValidationMessageFor(model => model.LocalizationSettings.LoadAllUrlRecordsOnStartup)
                </div>
            </div>
        </div>
    </div>
}
@helper TabFullTextSettings()
{
    <div class="form-horizontal">
        <div class="form-body"></div>
        <div class="note note-info">
            @if (Model.FullTextSettings.Enabled)
            {
                @T("Admin.Configuration.Settings.GeneralCommon.FullTextSettings.CurrenlyEnabled")
            }
            else
            {
                @T("Admin.Configuration.Settings.GeneralCommon.FullTextSettings.CurrenlyDisabled")
            }
        </div>
            <div class="form-group">
                <div class="">
                    <input type="submit" name="togglefulltext" value="@(Model.FullTextSettings.Enabled ? T("Admin.Configuration.Settings.GeneralCommon.FullTextSettings.Disable").Text : T("Admin.Configuration.Settings.GeneralCommon.FullTextSettings.Enable").Text)" class="btn red" />
                </div>
            </div>
    </div>
}

@helper TabGoogleAnalyticsSettings()
{
    <div class="form-horizontal">
        <div class="note note-info">
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help1")</p>
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help2")</p>
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help3")</p>
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help4")</p>
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help5")</p>
            <p>@T("Admin.Configuration.Settings.GeneralCommon.GoogleAnalytics_help6")</p>
        </div>
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.GoogleAnalyticsSettings.gaprivateKey_OverrideForStore, model => model.GoogleAnalyticsSettings.gaprivateKey, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.GoogleAnalyticsSettings.gaprivateKey, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.GoogleAnalyticsSettings.gaprivateKey)
                    @Html.ValidationMessageFor(model => model.GoogleAnalyticsSettings.gaprivateKey)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.GoogleAnalyticsSettings.gaserviceAccountEmail_OverrideForStore, model => model.GoogleAnalyticsSettings.gaserviceAccountEmail, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.GoogleAnalyticsSettings.gaserviceAccountEmail, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.GoogleAnalyticsSettings.gaserviceAccountEmail)
                    @Html.ValidationMessageFor(model => model.GoogleAnalyticsSettings.gaserviceAccountEmail)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.GoogleAnalyticsSettings.gaviewID_OverrideForStore, model => model.GoogleAnalyticsSettings.gaviewID, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.GoogleAnalyticsSettings.gaviewID, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.GoogleAnalyticsSettings.gaviewID)
                    @Html.ValidationMessageFor(model => model.GoogleAnalyticsSettings.gaviewID)
                </div>
            </div>
        </div>
    </div>
}