@model StoreScopeConfigurationModel
@using Grand.Core
@{
    var webHelper = EngineContext.Current.Resolve<IWebHelper>();

    var stores = Model.Stores.Select(store => new SelectListItem
        {
            Text = store.Name,
            Value = webHelper.ModifyQueryString(Url.Action("ChangeStoreScopeConfiguration", new { storeid = store.Id }), "returnurl=" + HttpUtility.UrlEncode(HttpContext.Current.Request.RawUrl), null),
            Selected = store.Id.Equals(Model.StoreId)
        })
        .ToList();
    stores.Insert(0, new SelectListItem
    {
        Text = T("Admin.Configuration.Settings.StoreScope.AllStores").Text,
        Value = webHelper.ModifyQueryString(Url.Action("ChangeStoreScopeConfiguration", new { storeid = " " }), "returnurl=" + HttpUtility.UrlEncode(HttpContext.Current.Request.RawUrl), null),
        Selected = 0.Equals(Model.StoreId)
    });
}

<div class="form-group">
    <div class="col-md-12">
        <label class="control-label" style="float:left;margin-right:10px;">@T("Admin.Configuration.Settings.StoreScope")</label>
        @Html.DropDownList("store-scope-configuration", stores, new { onchange = "setLocation(this.value);", style = "width: auto;min-width: 300px;" , @class= "form-control" })
        @if (!String.IsNullOrEmpty(Model.StoreId))
        {
            <div class="checkbox">
                <label>
                    <input type="checkbox" onclick="checkAllOverriddenStoreValue(this)" style="margin-top: 4px;">
                    <b>@T("Admin.Configuration.Settings.StoreScope.CheckAll")</b> @T("Admin.Configuration.Settings.StoreScope.CheckAll.Hint")
                </label>
            </div>
        }
    </div>
</div>



