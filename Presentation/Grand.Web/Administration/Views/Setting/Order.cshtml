@model OrderSettingsModel
@{
    //page title
    ViewBag.Title = T("Admin.Configuration.Settings.Order").Text;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-fw fa-sliders"></i>
                        @T("Admin.Configuration.Settings.Order")
                    </div>
                    <div class="actions">
                        <div class="btn-group btn-group-devided">
                            <button class="btn btn-success" type="submit" name="save"><i class="fa fa-check"></i> @T("Admin.Common.Save") </button>
                        </div>
                    </div>
                </div>
                <div class="portlet-body">
                    <div class="form-horizontal">
                        <div class="form-body">
                            @Html.Action("StoreScopeConfiguration", "Setting")
                        </div>
                    </div>
                </div>
                <div class="portlet-body form">
                    <div id="ordersettings-edit" style="display:none">
                        <ul>
                            <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.Order.OrderSettings")
                            </li>
                            <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
                                @T("Admin.Configuration.Settings.Order.ReturnRequestSettings")
                            </li>
                        </ul>
                        <div>
                            @TabOrderSettings()
                        </div>
                        <div>
                            @TabReturnRequestSettings()
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            $("#ordersettings-edit").show();
            $("#ordersettings-edit").kendoTabStrip({
                animation:  {
                    open: {
                        effects: "fadeIn"
                    }
                },
                select: tabstrip_on_tab_select
            });
        });
    </script>
    

    {
        //custom tabs
        var eventMessage = new AdminTabStripCreated(this.Html, "ordersettings-edit");
        EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
        foreach (var eventBlock in eventMessage.BlocksToRender)
        {
            @eventBlock
        }
    }


    @*save selected tab index*@
    <input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">
}
@helper TabOrderSettings()
{

    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.OnePageCheckoutEnabled)").click(toggleOnePageCheckoutEnabled);

            toggleOnePageCheckoutEnabled();
        });

        function toggleOnePageCheckoutEnabled() {
            if ($('#@Html.FieldIdFor(model => model.OnePageCheckoutEnabled)').is(':checked')) {
                $('#pnlOnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab').show();
            }
            else {
                $('#pnlOnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.IsReOrderAllowed_OverrideForStore, model => model.IsReOrderAllowed, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.IsReOrderAllowed, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.IsReOrderAllowed)
                    @Html.ValidationMessageFor(model => model.IsReOrderAllowed)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.MinOrderSubtotalAmount_OverrideForStore, model => model.MinOrderSubtotalAmount, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.MinOrderSubtotalAmount, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.MinOrderSubtotalAmount)
                    @Html.ValidationMessageFor(model => model.MinOrderSubtotalAmount) @Model.PrimaryStoreCurrencyCode
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.MinOrderSubtotalAmountIncludingTax_OverrideForStore, model => model.MinOrderSubtotalAmountIncludingTax, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.MinOrderSubtotalAmountIncludingTax, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.MinOrderSubtotalAmountIncludingTax)
                    @Html.ValidationMessageFor(model => model.MinOrderSubtotalAmountIncludingTax)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.MinOrderTotalAmount_OverrideForStore, model => model.MinOrderTotalAmount, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.MinOrderTotalAmount, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.MinOrderTotalAmount)
                    @Html.ValidationMessageFor(model => model.MinOrderTotalAmount) @Model.PrimaryStoreCurrencyCode
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AnonymousCheckoutAllowed_OverrideForStore, model => model.AnonymousCheckoutAllowed, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AnonymousCheckoutAllowed, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AnonymousCheckoutAllowed)
                    @Html.ValidationMessageFor(model => model.AnonymousCheckoutAllowed)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.TermsOfServiceOnShoppingCartPage_OverrideForStore, model => model.TermsOfServiceOnShoppingCartPage, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.TermsOfServiceOnShoppingCartPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.TermsOfServiceOnShoppingCartPage)
                    @Html.ValidationMessageFor(model => model.TermsOfServiceOnShoppingCartPage)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.TermsOfServiceOnOrderConfirmPage_OverrideForStore, model => model.TermsOfServiceOnOrderConfirmPage, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.TermsOfServiceOnOrderConfirmPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.TermsOfServiceOnOrderConfirmPage)
                    @Html.ValidationMessageFor(model => model.TermsOfServiceOnOrderConfirmPage)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.OnePageCheckoutEnabled_OverrideForStore, model => model.OnePageCheckoutEnabled, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.OnePageCheckoutEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.OnePageCheckoutEnabled)
                    @Html.ValidationMessageFor(model => model.OnePageCheckoutEnabled)
                </div>
            </div>
            <div class="form-group" id="pnlOnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab_OverrideForStore, model => model.OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab)
                    @Html.ValidationMessageFor(model => model.OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.DisableBillingAddressCheckoutStep_OverrideForStore, model => model.DisableBillingAddressCheckoutStep, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.DisableBillingAddressCheckoutStep, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisableBillingAddressCheckoutStep)
                    @Html.ValidationMessageFor(model => model.DisableBillingAddressCheckoutStep)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.DisableOrderCompletedPage_OverrideForStore, model => model.DisableOrderCompletedPage, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.DisableOrderCompletedPage, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisableOrderCompletedPage)
                    @Html.ValidationMessageFor(model => model.DisableOrderCompletedPage)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AttachPdfInvoiceToOrderPlacedEmail_OverrideForStore, model => model.AttachPdfInvoiceToOrderPlacedEmail, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AttachPdfInvoiceToOrderPlacedEmail, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AttachPdfInvoiceToOrderPlacedEmail)
                    @Html.ValidationMessageFor(model => model.AttachPdfInvoiceToOrderPlacedEmail)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AttachPdfInvoiceToOrderPaidEmail_OverrideForStore, model => model.AttachPdfInvoiceToOrderPaidEmail, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AttachPdfInvoiceToOrderPaidEmail, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AttachPdfInvoiceToOrderPaidEmail)
                    @Html.ValidationMessageFor(model => model.AttachPdfInvoiceToOrderPaidEmail)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.AttachPdfInvoiceToOrderCompletedEmail_OverrideForStore, model => model.AttachPdfInvoiceToOrderCompletedEmail, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.AttachPdfInvoiceToOrderCompletedEmail, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AttachPdfInvoiceToOrderCompletedEmail)
                    @Html.ValidationMessageFor(model => model.AttachPdfInvoiceToOrderCompletedEmail)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.GiftCards_Activated_OrderStatusId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.GiftCards_Activated_OrderStatusId, Model.GiftCards_Activated_OrderStatuses)
                    @Html.ValidationMessageFor(model => model.GiftCards_Activated_OrderStatusId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.GrandLabelFor(model => model.GiftCards_Deactivated_OrderStatusId, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.GiftCards_Deactivated_OrderStatusId, Model.GiftCards_Deactivated_OrderStatuses)
                    @Html.ValidationMessageFor(model => model.GiftCards_Deactivated_OrderStatusId)
                </div>
            </div>
            @if (Model.OrderIdent.HasValue)
            {
                <div class="form-group">
                    <div class="col-md-3 col-sm-3 text-right">
                        @Html.GrandLabelFor(model => model.OrderIdent, new Dictionary<string, object> { { "class", "control-label" } }, false)
                    </div>
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.OrderIdent)
                    </div>
                </div>
            }
        </div>
    </div>
}
@helper TabReturnRequestSettings()
{
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                <div class="note note-info">
                    @T("Admin.Configuration.Settings.Order.ReturnRequestsDescription1")
                    <br />
                    @T("Admin.Configuration.Settings.Order.ReturnRequestsDescription2")
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.ReturnRequestsEnabled_OverrideForStore, model => model.ReturnRequestsEnabled, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.ReturnRequestsEnabled, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ReturnRequestsEnabled)
                    @Html.ValidationMessageFor(model => model.ReturnRequestsEnabled)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3 col-sm-3 text-right">
                    @Html.OverrideStoreCheckboxFor(model => model.NumberOfDaysReturnRequestAvailable_OverrideForStore, model => model.NumberOfDaysReturnRequestAvailable, Model.ActiveStoreScopeConfiguration)
                    @Html.GrandLabelFor(model => model.NumberOfDaysReturnRequestAvailable, new Dictionary<string, object> { { "class", "control-label" } }, false)
                </div>
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.NumberOfDaysReturnRequestAvailable)
                    @Html.ValidationMessageFor(model => model.NumberOfDaysReturnRequestAvailable)
                </div>
            </div>
        </div>
    </div>
    @Html.Partial("_ReturnRequestReasons")
    @Html.Partial("_ReturnRequestActions")
}