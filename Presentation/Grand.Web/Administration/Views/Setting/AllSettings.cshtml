@using Grand.Services.Stores
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = T("Admin.Configuration.Settings.AllSettings").Text;
}
@Html.AntiForgeryToken()


<div class="row">
    <div class="col-md-12">
        <div class="portlet light form-fit">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-cubes"></i>
                    @T("Admin.Configuration.Settings.AllSettings")
                </div>
               
            </div>

            <div class="portlet-body form">
                <div class="note note-info">
                    @T("Admin.Configuration.Settings.AllSettings.Description")
                </div>
                <div id="settings-grid"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#settings-grid").kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("AllSettings", "Setting"))",
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json"
                        //any-forgery does not work with this contentType for some reasons
                        //data: addAntiForgeryToken
                    },
                    create: {
                        url: "@Html.Raw(Url.Action("SettingAdd", "Setting"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    update: {
                        url:"@Html.Raw(Url.Action("SettingUpdate", "Setting"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    destroy: {
                        url: "@Html.Raw(Url.Action("SettingDelete", "Setting"))",
                        type: "POST",
                        dataType: "json",
                        data: addAntiForgeryToken
                    },
                    parameterMap: function(data, operation) {
                        if (operation != "read") {
                            return data;
                        } else {
                            //for some reasons only such "Filter" data be parsed
                            return JSON.stringify(data);
                        }
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Name: { editable: true, type: "string" },
                            Value: { editable: true, type: "string" },
                            Store: { editable: true, type: "string" },
                            StoreId: { editable: true, type: "string" },
                            Id: { editable: false, type: "string" }
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                },
                error: function (e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: @(defaultGridPageSize),
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                pageSizes: [@(gridPageSizes)]
            },
            sortable: true,
            toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
            editable: {
                confirmation: false,
                mode: "inline"
            },
            filterable: {
                extra: false,
                operators: {
                    string: {
                        contains: "Contains",
                        eq: "Is equal to",
                        startswith: "Starts with"
                    }
                }
            },
            scrollable: false,
            columns: [{
                field: "Name",
                title: "@T("Admin.Configuration.Settings.AllSettings.Fields.Name")",
                width: 300,
                filterable: true,
                sortable: true
            }, {
                field: "Value",
                title: "@T("Admin.Configuration.Settings.AllSettings.Fields.Value")",
                width: 300,
                filterable: true,
                sortable: true
            }, {
                field: "StoreId",
                title: "@T("Admin.Configuration.Settings.AllSettings.Fields.StoreName")",
                width: 150,
                editor: storeDropDownEditor,
                template: "#:Store#",
                filterable: false,
                sortable: false
            }, {
                command: [{
                    name: "edit",
                    text: {
                        edit: "@T("Admin.Common.Edit")",
                        update: "@T("Admin.Common.Update")",
                        cancel: "@T("Admin.Common.Cancel")"
                    }
                }, {
                    name: "destroy",
                    text: "@T("Admin.Common.Delete")"
                }],
                width: 200,
                filterable: false
            }]
        });
    });

    //local datasource
    var allStores = [
        {
            Id : " ",
            Name : "@T("Admin.Configuration.Settings.AllSettings.Fields.StoreName.AllStores")"
        }
        @{
            var storeService = EngineContext.Current.Resolve<IStoreService>();
            var allStores = storeService.GetAllStores();
        }
        @foreach (var store in allStores)
        {
            <text>
            , {
                Id: "@(store.Id)",
                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(store.Name)))"
            }
            </text>
        }
    ];

    function storeDropDownEditor(container, options) {
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:StoreId"/>')
            .appendTo(container)
            .kendoDropDownList({
                dataSource: allStores,                            
                autoBind: false,                            
            });
    }
</script>
