@model CustomerReminderModel
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)


<script type="text/javascript">
    $(document).ready(function () {
        $("#customerreminder-edit").show();
        $("#customerreminder-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });

        $("#@Html.FieldIdFor(model => model.AllowRenew)").change(toggleAllowRenew);

        toggleAllowRenew();

        function toggleAllowRenew() {
            if ($('#@Html.FieldIdFor(model => model.AllowRenew)').is(':checked')) {
                $('#pnlAllowRenew').show();
            } else {
                $('#pnlAllowRenew').hide();
            }
        }

    });
</script>


   
<div id="customerreminder-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Conditions")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.Levels")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Customers.CustomerReminder.History")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabConditions()
    </div>
    <div>
        @TabLevels()
    </div>
    <div>
        @TabHistory()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customerreminder-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Name)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Active)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.StartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.StartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.StartDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.EndDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.EndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.EndDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.LastUpdateDate)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.LastUpdateDate)
                @Html.ValidationMessageFor(model => model.LastUpdateDate)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayOrder)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowRenew)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AllowRenew)
                @Html.ValidationMessageFor(model => model.AllowRenew)
            </div>
        </div>
        <div class="form-group" id="pnlAllowRenew">
            @Html.GrandLabelFor(model => model.RenewedDay)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.RenewedDay)
                @Html.ValidationMessageFor(model => model.RenewedDay)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ReminderRuleId)
            <div class="col-md-9 col-sm-9">
                @if (Model.ConditionCount > 0)
                {
                    @Html.GrandDropDownListFor(model => model.ReminderRuleId, ((Grand.Core.Domain.Customers.CustomerReminderRuleEnum)Model.ReminderRuleId).ToSelectList(), new { @disabled = "disabled" })
                }
                else
                {
                    @Html.GrandDropDownListFor(model => model.ReminderRuleId, ((Grand.Core.Domain.Customers.CustomerReminderRuleEnum)Model.ReminderRuleId).ToSelectList())
                }
                @Html.ValidationMessageFor(model => model.ReminderRuleId)
                <div class="note note-info margin-top-10">
                        @T("admin.customers.customerreminder.text1")
                </div>
                <div class="note note-warning">
                        @T("admin.customers.customerreminder.text2")
                </div>
                <div class="note note-info">
                        @T("admin.customers.customerreminder.text3")
                </div>
                <div class="note note-warning">
                        @T("admin.customers.customerreminder.text4")
                </div>
                <div class="note note-info">
                        @T("admin.customers.customerreminder.text5")
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.GrandLabelFor(model => model.ConditionId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.ConditionId, ((Grand.Core.Domain.Customers.CustomerReminderConditionEnum)Model.ConditionId).ToSelectList())
                @Html.ValidationMessageFor(model => model.ConditionId)
                <div class="note note-info margin-top-10">
                        @T("admin.customers.actiontype.helpText.OneOfThem")
                </div>
                <div class="note note-warning">
                        @T("admin.customers.actiontype.helpText.AllOfThem")
                </div>
            </div>
        </div>
    </div>
</div>
}

@helper TabConditions()
{
    if (String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
        </div>
    }
    if (!String.IsNullOrEmpty(Model.Id))
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

        <div class="panel panel-default">
            <div class="panel-body">
                <div id="conditions-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewCondition" name="btnAddNewCondition" value="@T("Admin.Customers.CustomerReminder.Conditions.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddCondition", "CustomerReminder", new { customerReminderId = Model.Id }))'); return false;" class="btn default" />
            </div>
        </div>


                    
                    <script>
                        $(document).ready(function () {
                            $("#conditions-grid").kendoGrid({
                                dataSource: {
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("Conditions", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("ConditionDelete", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                        }
                                    },
                                    error: function (e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    numeric: false,
                                    previousNext: false,
                                    info: false
                                },
                                editable: {
                                    confirmation: false,
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                {
                                    field: "Name",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.Name")",
                                    width: 300,
                                    filterable: false,
                                    sortable: false
                                },
                                {
                                    field: "Condition",
                                    title: "@T("Admin.Customers.CustomerReminder.Fields.ConditionType")",
                                    width: 100,
                                },
                                {
                                    field: "Id",
                                    title: "@T("Admin.Common.Edit")",
                                    width: 100,
                                    template: '<a href="@Url.Content("~/Admin/CustomerReminder/EditCondition")?customerReminderId=@(Model.Id)&cid=#=Id#">@T("Admin.Common.Edit")</a>'
                                },
                                {
                                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                    title: "@T("Admin.Common.Delete")",
                                    width: 100
                                }]
                            });
                        });
                </script>                                        
        }
}

@helper TabLevels()
{

    if (String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
        </div>
    }
    if (!String.IsNullOrEmpty(Model.Id))
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
        
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="levels-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewLevel" name="btnAddNewLevel" value="@T("Admin.Customers.CustomerReminder.Levels.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddLevel", "CustomerReminder", new { customerReminderId = Model.Id }))'); return false;" class="btn default" />
            </div>
        </div>
        <script>
            $(document).ready(function () {
                $("#levels-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("Levels", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("DeleteLevel", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: {
                                id: "Id",
                            }
                        },
                        error: function (e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        numeric: false,
                        previousNext: false,
                        info: false
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [
                    {
                        field: "Name",
                        title: "@T("Admin.Customers.CustomerReminder.Fields.Name")",
                        width: 300,
                        filterable: false,
                        sortable: false
                    },
                    {
                        field: "Level",
                        title: "@T("Admin.Customers.CustomerReminder.Fields.Level")",
                        width: 100,
                    },
                    {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 100,
                        template: '<a href="@Url.Content("~/Admin/CustomerReminder/EditLevel")?customerReminderId=@(Model.Id)&cid=#=Id#">@T("Admin.Common.Edit")</a>'
                    },
                    {
                        command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                        title: "@T("Admin.Common.Delete")",
                        width: 100
                    }]
                });
            });
        </script>
    }
}

@helper TabHistory()
{

    if (String.IsNullOrEmpty(Model.Id))
    {
        <div class="note note-info">
            @T("Admin.Customers.CustomerReminder.SaveBeforeEdit")
        </div>
    }


    if (!String.IsNullOrEmpty(Model.Id))
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

        <div class="panel panel-default">
            <div class="panel-body">
                <div id="history-grid"></div>
            </div>
        </div>

        <script>
            $(document).ready(function () {
                $("#history-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("History", "CustomerReminder", new { customerReminderId = Model.Id }))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            },
                        },
                    schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors"
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        pageSize: @(defaultGridPageSize),
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        pageSizes: [@(gridPageSizes)]
                    },
                    editable: {
                        confirmation: false,
                        mode: "inline"
                    },
                    scrollable: false,
                    columns: [
                    {
                        field: "SendDate",
                        title: "@T("Admin.Customers.CustomerReminder.History.Fields.SendDate")",
                        width: 200,
                        type: "date",
                        format: "{0:G}"
                    },
                    {
                        field: "Email",
                        title: "@T("Admin.Customers.CustomerReminder.History.Fields.Customer")",
                        width: 100,
                    },
                    {
                        field: "Level",
                        title: "@T("Admin.Customers.CustomerReminder.History.Fields.Level")",
                        width: 50,
                    },
                    {
                        field: "OrderId",
                        title: "@T("Admin.Customers.CustomerReminder.History.Fields.Order")",
                        width: 50,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(OrderId) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                    }]
                });
            });
        </script>
    }
}




