@model ManufacturerModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        $('#manufacturer-edit').show();
        $("#manufacturer-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="manufacturer-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Common.SEO")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Products")
        </li>
        <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Discounts")
        </li>
        <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Acl")
        </li>
        <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.Stores")
        </li>
        <li @Html.RenderSelectedTabIndex(6, GetSelectedTabIndex())>
            @T("Admin.Catalog.Manufacturers.ActivityLog")
        </li>
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabSeo()
    </div>
    <div>
        @TabProducts()
    </div>
    <div>
        @TabDiscounts()
    </div>
    <div>
        @TabAcl()
    </div>
    <div>
        @TabStores()
    </div>
    <div>
        @TabActivityLog()
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "manufacturer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-info-localized",
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].Name)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].Name)
                    @Html.ValidationMessageFor(model => model.Locales[item].Name)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].Description)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Locales[item].Description)
                </div>
            </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
        </div>
    </div>
    ,
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Name)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Name)
                    @Html.ValidationMessageFor(model => model.Name)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Description)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(x => x.Description, "RichEditor")
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
        </div>
    </div>
    ))
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ManufacturerTemplateId)               
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.ManufacturerTemplateId, Model.AvailableManufacturerTemplates)
                    @Html.ValidationMessageFor(model => model.ManufacturerTemplateId)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.PictureId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.PictureId)
                    @Html.ValidationMessageFor(model => model.PictureId)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.PriceRanges)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.PriceRanges)
                    @Html.ValidationMessageFor(model => model.PriceRanges)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AllowCustomersToSelectPageSize)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.AllowCustomersToSelectPageSize)
                    @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
                </div>
            </div>
            <div class="form-group" id="pnlPageSize">
                @Html.GrandLabelFor(model => model.PageSize)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.PageSize)
                    @Html.ValidationMessageFor(model => model.PageSize)
                </div>
            </div>
            <div class="form-group" id="pnlPageSizeOptions">                
                @Html.GrandLabelFor(model => model.PageSizeOptions)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.PageSizeOptions)
                    @Html.ValidationMessageFor(model => model.PageSizeOptions)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Published)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.Published)
                    @Html.ValidationMessageFor(model => model.Published)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.DisplayOrder)       
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.DisplayOrder)
                </div>
            </div>
        </div>
    </div>
}
@helper TabSeo()
{
    @(Html.LocalizedEditor<ManufacturerModel, ManufacturerLocalizedModel>("manufacturer-seo-localized",
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].MetaKeywords)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].MetaKeywords)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].MetaDescription)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(model => model.Locales[item].MetaDescription)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].MetaTitle)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].MetaTitle)
                    @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Locales[item].SeName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Locales[item].SeName)
                    @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                </div>
            </div>
            @Html.HiddenFor(model => model.Locales[item].LanguageId)
        </div>
    </div>
               ,
    @<div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.MetaKeywords)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.MetaKeywords)
                    @Html.ValidationMessageFor(model => model.MetaKeywords)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.MetaDescription)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(x => x.MetaDescription)
                    @Html.ValidationMessageFor(model => model.MetaDescription)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.MetaTitle)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.MetaTitle)
                    @Html.ValidationMessageFor(model => model.MetaTitle)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.SeName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(x => x.SeName)
                    @Html.ValidationMessageFor(model => model.SeName)
                </div>
            </div>
        </div>
    </div>))
}
@helper TabProducts()
{
if (!String.IsNullOrEmpty(Model.Id))
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

        <div class="panel panel-default">
            <div class="panel-body">
                <div id="products-grid"></div>
            </div>
            <div class="panel-footer">
                <input type="submit" id="btnAddNewProduct" value="@T("Admin.Catalog.Manufacturers.Products.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("ProductAddPopup", "Manufacturer", new { manufacturerId = Model.Id, btnId = "btnRefreshProducts", formId = "manufacturer-form" }))', 800, 800, true); return false;" class="k-button" />
                <input type="submit" id="btnRefreshProducts" style="display: none" />
            </div>
        </div>

                    <script>
                            $(document).ready(function () {
                                $("#products-grid").kendoGrid({
                                    dataSource: {
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("ProductList", "Manufacturer", new { manufacturerId = Model.Id }))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            update: {
                                                url:"@Html.Raw(Url.Action("ProductUpdate", "Manufacturer"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy: {
                                                url: "@Html.Raw(Url.Action("ProductDelete", "Manufacturer"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    ProductName: {editable: false, type: "string" },
                                                    IsFeaturedProduct: {editable: true, type: "boolean" },
                                                    DisplayOrder: {editable: true, type: "number" },
                                                    ProductId: {editable: false, type: "string" }
                                                }
                                            }
                                        },
                                        requestEnd: function(e) {
                                            if(e.type=="update") {
                                                this.read();
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)]
                                    },
                                    editable: {
                                        confirmation: false,
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    columns: [{
                                        field: "ProductName",
                                        editable: false,
                                        type: "string",
                                        title: "@T("Admin.Catalog.Manufacturers.Products.Fields.Product")"
                                    }, {
                                        field: "IsFeaturedProduct",
                                        title: "@T("Admin.Catalog.Manufacturers.Products.Fields.IsFeaturedProduct")",
                                        width: 150,
                                        headerAttributes: { style: "text-align:center" },
                                        attributes: { style: "text-align:center" },
                                        template: '# if(IsFeaturedProduct) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                                    }, {
                                        field: "DisplayOrder",
                                        title: "@T("Admin.Catalog.Manufacturers.Products.Fields.DisplayOrder")",
                                        //integer format
                                        format: "{0:0}",
                                        width: 150
                                    }, {
                                        field: "ProductId",
                                        title: "@T("Admin.Common.View")",
                                        width: 100,
                                        template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">@T("Admin.Common.View")</a>'
                                    }, {
                                        command: [{
                                            name: "edit",
                                            text: {
                                                edit: "@T("Admin.Common.Edit")",
                                                update: "@T("Admin.Common.Update")",
                                                cancel: "@T("Admin.Common.Cancel")"
                                            }
                                        }, {
                                            name: "destroy",
                                            text: "@T("Admin.Common.Delete")"
                                        }],
                                        width: 200
                                    }]
                                });
                            });
                    </script>

                    <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshProducts').click(function () {
                                    //refresh grid
                                    var grid = $("#products-grid").data('kendoGrid');
                                    grid.dataSource.read();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                    </script>
}
else
{
        <div class="note note-info">
            @T("Admin.Catalog.Manufacturers.Products.SaveBeforeEdit")
        </div>
}
}
@helper TabDiscounts()
{
if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0)
{
    <div class="mt-checkbox-list">
        @foreach (var discount in Model.AvailableDiscounts)
        {
            <label class="mt-checkbox mt-checkbox-outline">
                <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                        @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) { <text> checked="checked" </text> } />@discount.Name
                    <span></span>
                </label>
        }
    </div>
}
else
{
    <div class="note note-info">
        @T("Admin.Catalog.Manufacturers.Discounts.NoDiscounts")
    </div>
}
}
@helper TabAcl()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);

            toggleAcl();
        });


        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('#pnl-acl').show();
            }
            else {
                $('#pnl-acl').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.SubjectToAcl)                
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.SubjectToAcl)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.SubjectToAcl)
                </div>
            </div>
            <div class="form-group" id="pnl-acl">
                @Html.GrandLabelFor(model => model.AvailableCustomerRoles)                
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                    {
                        @Html.Action("AclDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var customerRole in Model.AvailableCustomerRoles)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds!=null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">No customer roles defined</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@helper TabStores()
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);

            toggleStoreMapping();
        });


        function toggleStoreMapping() {
            if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
                $('#pnl-available-stores').show();
            }
            else {
                $('#pnl-available-stores').hide();
            }
        }

    </script>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.LimitedToStores)
                <div class="col-md-9 col-sm-9">
                    <label class="mt-checkbox mt-checkbox-outline">
                        @Html.GrandEditorFor(model => model.LimitedToStores)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.LimitedToStores)
                </div>
            </div>
            <div class="form-group" id="pnl-available-stores">
                @Html.GrandLabelFor(model => model.AvailableStores)                
                <div class="col-md-9 col-sm-9">
                    @if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
                    {
                        @Html.Action("MultistoreDisabledWarning", "Common")
                        <div class="mt-checkbox-list">
                            @foreach (var store in Model.AvailableStores)
                            {
                                <label class="mt-checkbox mt-checkbox-outline">
                                    <input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />@store.Name
                                    <span></span>
                                </label>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="note note-info">
                            No stores defined
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@helper TabActivityLog()
{

var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;


    <div class="panel panel-default">
        <div class="panel-body">
            <div id="activitylog-grid"></div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $("#activitylog-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ListActivityLog", "Manufacturer", new { manufacturerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "ActivityLogTypeName",
                    title: "@T("Admin.Catalog.Manufacturers.ActivityLog.ActivityLogType")",
                    width: 200,
                }, {
                    field: "CustomerId",
                    title: "@T("Admin.Catalog.Manufacturers.ActivityLog.Customer")",
                    width: 200,
                    template: '<a href="@Url.Content("~/Admin/Customer/Edit/")#=CustomerId#">#:CustomerEmail#</a>'
                }, {
                    field: "Comment",
                    title: "@T("Admin.Catalog.Manufacturers.ActivityLog.Comment")"
                }, {
                    field: "CreatedOn",
                    title: "@T("Admin.Catalog.Manufacturers.ActivityLog.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>
}
