@model CustomerListModel
@using System.Globalization;
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = T("Admin.Customers.Customers").Text;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-users"></i>
                        @T("Admin.Customers.Customers")
                    </div>
                    <div class="actions btn-group btn-group-devided">
                        <a href="@Url.Action("Create")" class="btn green"><i class="fa fa-plus"></i><span class="hidden-xs"> @T("Admin.Common.AddNew") </span></a>

                        <div class="btn-group btn-group-devided">
                            <a class="btn default" href="javascript:;" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">
                                <i class="fa fa-download"></i>
                                @T("Admin.Common.Export")
                                <i class="fa fa-angle-down"></i>
                            </a>
                            <ul class="dropdown-menu pull-right">
                                <li>
                                    <input type="submit" name="exportxml-all" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToXml.All")" />
                                </li>
                                <li>
                                    <input type="button" id="exportxml-selected" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToXml.Selected")" />
                                </li>
                                <li>
                                    <input type="submit" name="exportexcel-all" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToExcel.All")" />
                                </li>
                                <li>
                                    <input type="button" id="exportexcel-selected" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToExcel.Selected")" />
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="portlet-body form">
                    <div class="form-horizontal">
                        <div class="form-body col-md-6">
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchCustomerRoleIds, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.EditorFor(model => model.SearchCustomerRoleIds, new { SelectList = Model.AvailableCustomerRoles })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchCustomerTagIds, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.EditorFor(model => model.SearchCustomerTagIds, new { SelectList = Model.AvailableCustomerTags })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchEmail, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandEditorFor(model => model.SearchEmail)
                                </div>
                            </div>
                        </div>
                        <div class="form-body col-md-6">
                            @if (Model.UsernamesEnabled)
                            {
                                <div class="form-group">
                                    @Html.GrandLabelFor(model => model.SearchUsername, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                    <div class="col-md-8 col-sm-8">
                                        @Html.GrandEditorFor(model => model.SearchUsername)
                                    </div>
                                </div>
                            }
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchFirstName, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandEditorFor(model => model.SearchFirstName)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchLastName, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandEditorFor(model => model.SearchLastName)
                                </div>
                            </div>
                            @if (Model.CompanyEnabled)
                            {
                                <div class="form-group">
                                    @Html.GrandLabelFor(model => model.SearchCompany, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                    <div class="col-md-8 col-sm-8">
                                        @Html.GrandEditorFor(model => model.SearchCompany)
                                    </div>
                                </div>
                            }
                            @if (Model.PhoneEnabled)
                            {
                                <div class="form-group">
                                    @Html.GrandLabelFor(model => model.SearchPhone, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                    <div class="col-md-8 col-sm-8">
                                        @Html.GrandEditorFor(model => model.SearchPhone)
                                    </div>
                                </div>
                            }
                            @if (Model.ZipPostalCodeEnabled)
                            {
                                <div class="form-group">
                                    @Html.GrandLabelFor(model => model.SearchZipPostalCode, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                    <div class="col-md-8 col-sm-8">
                                        @Html.GrandEditorFor(model => model.SearchZipPostalCode)
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="form-actions">
                            <div class="row">
                                <div class="col-md-offset-3 col-sm-offset-3 col-md-8 col-sm-8">
                                    <button class="btn btn-success filter-submit" id="search-customers">
                                        <i class="fa fa-search"></i> @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="portlet-body">
                    <div id="customers-grid"></div>
                </div>
            </div>
        </div>
    </div>



        <script>
            $(document).ready(function () {
                $("#customers-grid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("CustomerList", "Customer"))",
                                type: "POST",
                                dataType: "json",
                                data: additionalData
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors"
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            // Cancel the changes
                            this.cancelChanges();
                        },
                        pageSize: @(defaultGridPageSize),
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    pageable: {
                        refresh: true,
                        pageSizes: [@(gridPageSizes)]
                    },
                    scrollable: false,
                    dataBound: onDataBound,
                    columns: [{
                            field: "Id",
                            headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50
                        }, {
                            field: "Email",
                            title: "@T("Admin.Customers.Customers.Fields.Email")",
                            width: 200
                        },
                        @if (Model.UsernamesEnabled)
                        {
                            <text>{
                                field: "Username",
                                title: "@T("Admin.Customers.Customers.Fields.Username")",
                                width: 200
                            },</text>
                        }
                        {
                            field: "FullName",
                            title: "@T("Admin.Customers.Customers.Fields.FullName")",
                            width: 200
                        }, {
                            field: "CustomerRoleNames",
                            title: "@T("Admin.Customers.Customers.Fields.CustomerRoles")",
                            width: 200
                        }, 
            
                        @if (Model.CompanyEnabled)
                        {
                                                    <text>{
                                field: "Company",
                                                    title: "@T("Admin.Customers.Customers.Fields.Company")",
                            width: 200
                        },</text>
                                                }
        
                                                @if (Model.PhoneEnabled)
                                                {
                                                    <text>{
                                field: "Phone",
                                    title: "@T("Admin.Customers.Customers.Fields.Phone")",
                            width: 200
                        },</text>
                                                }
        
                                                @if (Model.ZipPostalCodeEnabled)
                                                {
                                                    <text>{
                                field: "ZipPostalCode",
                                    title: "@T("Admin.Customers.Customers.Fields.ZipPostalCode")",
                            width: 200
                        },</text>
                        }
                    {
                        field: "Active",
                        title: "@T("Admin.Customers.Customers.Fields.Active")",
                        width: 100,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(Active) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                    }, {
                        field: "CreatedOn",
                        title: "@T("Admin.Customers.Customers.Fields.CreatedOn")",
                        width: 200,
                        type: "date",
                        format: "{0:G}"
                    }, {
                        field: "LastActivityDate",
                        title: "@T("Admin.Customers.Customers.Fields.LastActivityDate")",
                        width: 200,
                        type: "date",
                        format: "{0:G}"
                    }, {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 50,
                        template: '<a class="btn btn-sm btn-default" href="Edit/#=Id#"><i class="fa fa-pencil"></i> @T("Admin.Common.Edit")</a>'
                    }]
                });
            });
        </script>

        <script type="text/javascript">

            var selectedIds = [];

            $(document).ready(function () {

                //search button
                $('#search-customers').click(function () {
                    var grid = $('#customers-grid').data('kendoGrid');
                    grid.dataSource.page(1); //new search. Set page size to 1
                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                    //clear selected checkboxes
                    $('.checkboxGroups').prop('checked', false).change();
                    selectedIds = [];
                    return false;
                });
                $("#@Html.FieldIdFor(model => model.SearchCustomerTagIds)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });

                $("#@Html.FieldIdFor(model => model.SearchCustomerTagIds)").data().kendoMultiSelect.input.on('keydown',function(e){
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                })


                $("#@Html.FieldIdFor(model => model.SearchEmail)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchUsername)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchFirstName)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchLastName)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchCompany)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchPhone)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });
                $("#@Html.FieldIdFor(model => model.SearchZipPostalCode)").keydown(function (event) {
                    if (event.keyCode == 13) {
                        $("#search-customers").click();
                        return false;
                    }
                });

                $('#mastercheckbox').click(function () {
                    $('.checkboxGroups').prop('checked', $(this).is(':checked')).change();
                });

                //wire up checkboxes.
                $('#customers-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                    var $check = $(this);
                    if ($check.is(":checked") == true) {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked == -1) {
                            //add id to selectedIds.
                            selectedIds.push($check.val());
                        }
                    }
                    else {
                        var checked = jQuery.inArray($check.val(), selectedIds);
                        if (checked > -1) {
                            //remove id from selectedIds.
                            selectedIds = $.grep(selectedIds, function (item, index) {
                                return item != $check.val();
                            });
                        }
                    }
                    updateMasterCheckbox();
                });
            });

            function onDataBound(e) {

                $('#customers-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                    var currentId = $(this).val();
                    var checked = jQuery.inArray(currentId, selectedIds);
                    //set checked based on if current checkbox's value is in selectedIds.
                    $(this).prop('checked', checked > -1);
                });

                updateMasterCheckbox();
            }

            function updateMasterCheckbox() {
                var numChkBoxes = $('#customers-grid input[type=checkbox][id!=mastercheckbox]').length;
                var numChkBoxesChecked = $('#customers-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                $('#mastercheckbox').prop('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
            }

            function additionalData() {
                var customerRoleIds = [];
                if($('#@Html.FieldIdFor(model => model.SearchCustomerRoleIds)').val()!=null){
                    customerRoleIds = $('#@Html.FieldIdFor(model => model.SearchCustomerRoleIds)').val();
                }

                var customerTagIds = [];
                if($('#@Html.FieldIdFor(model => model.SearchCustomerTagIds)').val()!=null){
                    customerTagIds = $('#@Html.FieldIdFor(model => model.SearchCustomerTagIds)').val();
                }

                var data = {
                    SearchCustomerRoleIds: customerRoleIds,
                    SearchCustomerTagIds: customerTagIds,
                    SearchEmail: $('#@Html.FieldIdFor(model => model.SearchEmail)').val(),
                    SearchUsername: $('#@Html.FieldIdFor(model => model.SearchUsername)').val(),
                    SearchFirstName: $('#@Html.FieldIdFor(model => model.SearchFirstName)').val(),
                    SearchLastName: $('#@Html.FieldIdFor(model => model.SearchLastName)').val(),
                    SearchCompany: $('#@Html.FieldIdFor(model => model.SearchCompany)').val(),
                    SearchPhone: $('#@Html.FieldIdFor(model => model.SearchPhone)').val(),
                    SearchZipPostalCode: $('#@Html.FieldIdFor(model => model.SearchZipPostalCode)').val()
                };
                addAntiForgeryToken(data);
                return data;
            }
        </script>
}

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportXmlSelected", "Customer", FormMethod.Post, new { id = "export-xml-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            return false;
        });
    });

</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportExcelSelected", "Customer", FormMethod.Post, new { id = "export-excel-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            return false;
        });
    });

</script>