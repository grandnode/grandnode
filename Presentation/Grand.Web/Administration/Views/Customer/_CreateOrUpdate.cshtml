@model CustomerModel
@using Grand.Core.Domain.Orders;
@using Grand.Services.Customers;
@using System.Text;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@{
    //resources for product tags input
    Html.AppendCssFileParts("~/Content/tagEditor/jquery.tag-editor.css");
    Html.AppendScriptParts("~/Scripts/tagEditor/jquery.tag-editor.min.js");
    Html.AppendScriptParts("~/Scripts/tagEditor/jquery.caret.min.js");
}

<script>
    $(document).ready(function() {
        var tabPos = 'left';
        if (window.devicePixelRatio == 2)
            tabPos = 'top';

        $('#customer-edit').show();
        $("#customer-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            tabPosition: tabPos,
            select: tabstrip_on_tab_select
        });
    });
    


    //tags
    $(document).ready(function () {
        $("#@Html.FieldIdFor(model => model.CustomerTags)").tagEditor({
            autocomplete: {
                delay: 0,
                position: { collision: 'flip' },
                source: '/Admin/CustomerTag/Search',
                minLength: 3,
                //source: initialProductTags
            },
            delimiter: ',',
            placeholder: 'Enter tags ...'
        });
    });


</script>
<div id="customer-edit" style="display:none">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.CustomerRoles")
        </li>
        @if (!String.IsNullOrEmpty(Model.Id))
        {
            <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Orders")
            </li>
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Addresses")
            </li>
            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.CurrentShoppingCart")
            </li>
            <li @Html.RenderSelectedTabIndex(5, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.CurrentWishlist")
            </li>
            <li @Html.RenderSelectedTabIndex(6, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.ActivityLog")
            </li>
            <li @Html.RenderSelectedTabIndex(7, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Impersonate")
            </li>
            <li @Html.RenderSelectedTabIndex(8, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.BackInStockSubscriptions")
            </li>
        }
        @if (Model.DisplayRewardPointsHistory)
        {
            <li>
                @T("Admin.Customers.Customers.RewardPoints")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabCustomerRoles()
    </div>
    @if (!String.IsNullOrEmpty(Model.Id))
    {
        <div>
            @TabOrders()
        </div>
        <div>
            @TabAddresses()
        </div>
        <div>
            @TabCurrentShoppingCart()
        </div>
        <div>
            @TabCurrentWishlist()
        </div>
        <div>
            @TabActivityLog()
        </div>
        <div>
            @TabImpersonate()
        </div>
        <div>
            @TabBackInStockSubscriptions()
        </div>
    }
    @if (Model.DisplayRewardPointsHistory)
    {
        <div>
            @TabRewardPoints()
        </div>
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
        <script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");

                var postData = {
                    countryId: selectedItem,
                    addSelectStateItem: "true"
                };

                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: postData,
                    success: function(data) {
                        ddlStates.html('');
                        $.each(data, function(id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            });
        });
        </script>
}
    <div class="form-horizontal">
        <div class="form-body">
            @if (Model.UsernamesEnabled)
            {
                if (String.IsNullOrEmpty(Model.Id) || Model.AllowUsersToChangeUsernames)
                {
                    <div class="form-group">
                        @Html.GrandLabelFor(model => model.Username)
                        <div class="col-md-9 col-sm-9">
                            @Html.GrandEditorFor(model => model.Username)
                            @Html.ValidationMessageFor(model => model.Username)
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.GrandLabelFor(model => model.Username)
                        <div class="col-md-9 col-sm-9">
                            <label class="control-label"> @Model.Username</label>
                            @Html.HiddenFor(model => model.Username)
                        </div>
                    </div>
                }
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Email)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Password)
                <div class="col-md-9 col-sm-9">
                    <div class="input-group">
                        <div class="input-icon">
                            <i class="fa fa-lock fa-fw"></i>
                            <input id="Password" class="form-control" type="text" name="Password" placeholder="password">
                        </div>
                        <span class="input-group-btn">
                            <input type="submit" name="changepassword" class="btn btn-success" value="@T("Admin.Customers.Customers.Fields.Password.Change")" />
                        </span>
                    </div>

                </div>
            </div>

            <div class="form-group">
                @Html.GrandLabelFor(model => model.CustomerTags)
                <div class="col-md-9 col-sm-9">
                    @Html.EditorFor(model => model.CustomerTags)
                    @Html.ValidationMessageFor(model => model.CustomerTags)
                </div>
            </div>

            @if (!String.IsNullOrEmpty(Model.Id) && Model.AssociatedExternalAuthRecords.Count > 0)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.AssociatedExternalAuthRecords)
                    <div class="col-md-9 col-sm-9">

                        <div id="externalauthrecords-grid"></div>

                        <script>

                            //local datasource
                            var externalauthrecords = [
                                @for (int i = 0; i < Model.AssociatedExternalAuthRecords.Count; i++)
                            {
                                var aear = Model.AssociatedExternalAuthRecords[i];
                                <text>
        {
            AuthMethodName: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.AuthMethodName)))",
            Email: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.Email)))",
            ExternalIdentifier: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.ExternalIdentifier)))"
        }
    </text>
                                if (i != Model.AssociatedExternalAuthRecords.Count - 1)
                                {
                                    <text>,</text>
                                }
                            }
                            ];

                            $(document).ready(function () {
                                $("#externalauthrecords-grid").kendoGrid({
                                    dataSource: {
                                        data: externalauthrecords,
                                        schema: {
                                            model: {
                                                fields: {
                                                    AuthMethodName: { type: "string" },
                                                    Email: { type: "string" },
                                                    ExternalIdentifier: { type: "string" }
                                                }
                                            }
                                        },
                                        error: function (e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        }
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeric: false,
                                        previousNext: false,
                                        info: false
                                    },
                                    scrollable: false,
                                    columns: [
                                        {
                                            field: "AuthMethodName",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.AuthMethodName")",
                                            width: 100
                                        }, {
                                            field: "Email",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.Email")",
                                            width: 100
                                        },{
                                            field: "ExternalIdentifier",
                                            title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.ExternalIdentifier")",
                                            width: 300
                                        }
                                    ]
                                });
                            });

                        </script>
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.VendorId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                    @Html.ValidationMessageFor(model => model.VendorId)

                    <em>@T("Admin.Customers.Customers.VendorShouldBeInVendorsRole")</em>
                </div>
            </div>
            @if (Model.GenderEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.Gender)
                    <div class="col-md-9 col-sm-9">
                        <div class="gender">
                            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                            <label class="forcheckbox" for="Gender_Male">@T("Admin.Customers.Customers.Fields.Gender.Male")</label>
                        </div>
                        <div class="gender">
                            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                            <label class="forcheckbox" for="Gender_Female">@T("Admin.Customers.Customers.Fields.Gender.Female")</label>
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.FirstName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.FirstName)
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.LastName)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.LastName)
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>
            </div>
            @if (Model.DateOfBirthEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.DateOfBirth)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.DateOfBirth)
                        @Html.ValidationMessageFor(model => model.DateOfBirth)
                    </div>
                </div>
            }
            @if (Model.CompanyEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.Company)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.Company)
                        @Html.ValidationMessageFor(model => model.Company)
                    </div>
                </div>
            }
            @if (Model.StreetAddressEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.StreetAddress)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.StreetAddress)
                        @Html.ValidationMessageFor(model => model.StreetAddress)
                    </div>
                </div>
            }
            @if (Model.StreetAddress2Enabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.StreetAddress2)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.StreetAddress2)
                        @Html.ValidationMessageFor(model => model.StreetAddress2)
                    </div>
                </div>
            }
            @if (Model.ZipPostalCodeEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.ZipPostalCode)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.ZipPostalCode)
                        @Html.ValidationMessageFor(model => model.ZipPostalCode)
                    </div>
                </div>
            }
            @if (Model.CityEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.City)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.City)
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
            }
            @if (Model.CountryEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.CountryId)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandDropDownListFor(model => model.CountryId, Model.AvailableCountries)
                        @Html.ValidationMessageFor(model => model.CountryId)
                    </div>
                </div>
            }
            @if (Model.CountryEnabled && Model.StateProvinceEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.StateProvinceId)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandDropDownListFor(model => model.StateProvinceId, Model.AvailableStates)
                        @Html.ValidationMessageFor(model => model.StateProvinceId)
                    </div>
                </div>
            }
            @if (Model.PhoneEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.Phone)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.Phone)
                        @Html.ValidationMessageFor(model => model.Phone)
                    </div>
                </div>
            }
            @if (Model.FaxEnabled)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.Fax)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandEditorFor(model => model.Fax)
                        @Html.ValidationMessageFor(model => model.Fax)
                    </div>
                </div>
            }
            @if (Model.CustomerAttributes.Count > 0)
            {
                <div class="form-group">
                    @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AdminComment)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandTextAreaFor(model => model.AdminComment, new { style = "Height: 100px;" })
                    @Html.ValidationMessageFor(model => model.AdminComment)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.IsTaxExempt)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.IsTaxExempt)
                    @Html.ValidationMessageFor(model => model.IsTaxExempt)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.FreeShipping)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.FreeShipping)
                    @Html.ValidationMessageFor(model => model.FreeShipping)
                </div>
            </div>
            @if (Model.AllowCustomersToSetTimeZone)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.TimeZoneId)
                    <div class="col-md-9 col-sm-9">
                        @Html.GrandDropDownListFor(model => model.TimeZoneId, Model.AvailableTimeZones)
                        @Html.ValidationMessageFor(model => model.TimeZoneId)
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.AffiliateId))
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.AffiliateId)
                    <div class="col-md-9 col-sm-9">
                        <a class="btn default" href="@Url.Action("Edit", "Affiliate", new { id = Model.AffiliateId })">@Model.AffiliateName - @T("Admin.Common.View")</a>
                        <input type="submit" name="remove-affiliate" class="btn red" value="@T("Admin.Customers.Customers.Fields.Affiliate.Remove")" />
                    </div>
                </div>
            }
            @if (Model.DisplayVatNumber)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.VatNumber)
                    <div class="col-md-9 col-sm-9">
                        <div class="input-group-control">
                            @Html.GrandEditorFor(model => model.VatNumber)
                            <label class="control-label">
                                (@string.Format(T("Admin.Customers.Customers.Fields.VatNumberStatus").Text, Model.VatNumberStatusNote))
                            </label>

                            <input type="submit" name="markVatNumberAsValid" class="btn green" value="@T("Admin.Customers.Customers.Fields.VatNumber.MarkAsValid")" />
                            <input type="submit" name="markVatNumberAsInvalid" class="btn red" value="@T("Admin.Customers.Customers.Fields.VatNumber.MarkAsInvalid")" />

                        </div>
                        @Html.ValidationMessageFor(model => model.VatNumber)
                    </div>
                </div>
            }
            @if (Model.AvailableNewsletterSubscriptionStores != null && Model.AvailableNewsletterSubscriptionStores.Count > 0)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.SelectedNewsletterSubscriptionStoreIds)
                    <div class="col-md-9 col-sm-9">
                        @foreach (var store in Model.AvailableNewsletterSubscriptionStores)
                        {
                            <div>
                                <input type="checkbox" name="SelectedNewsletterSubscriptionStoreIds" value="@store.Id" checked="@(Model.SelectedNewsletterSubscriptionStoreIds != null && Model.SelectedNewsletterSubscriptionStoreIds.Contains(store.Id))" />(@(store.Name))
                            </div>

                        }
                    </div>
                </div>
            }
            else
            {
                <div class="note note-info">
                    @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
                </div>
            }
            <div class="form-group">
                @Html.GrandLabelFor(model => model.Active)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active)
                </div>
            </div>
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.LastIpAddress)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.LastIpAddress)</label>
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.CreatedOn)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.CreatedOn)</label>
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.Id))
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.LastActivityDate)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.LastActivityDate)</label>
                    </div>
                </div>
            }

            @if (!String.IsNullOrEmpty(Model.Id) && !String.IsNullOrEmpty(Model.LastVisitedPage))
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.LastVisitedPage)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.LastVisitedPage)</label>
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.Id) && Model.LastPurchaseDate.HasValue)
            {
                <div class="form-group">
                    @Html.GrandLabelFor(model => model.LastPurchaseDate)
                    <div class="col-md-9 col-sm-9">
                        <label class="control-label"> @Html.DisplayFor(model => model.LastPurchaseDate)</label>
                    </div>
                </div>
            }
        </div>
    </div>
}
@helper TabCustomerRoles()
{
if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
{
   
        <div class="mt-checkbox-list">
            @foreach (var customerRole in Model.AvailableCustomerRoles)
            {
                <label class="mt-checkbox mt-checkbox-outline">
                    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds!=null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                    <span></span>
                </label>
            }
        </div>

}
else
{
        @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
}
}
@helper TabOrders()
{
var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <div class="panel panel-default">
        <div class="panel-body">
            <div id="order-grid"></div>
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#order-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("OrderList", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "OrderNumber",
                    title: "@T("Admin.Customers.Customers.Orders.ID")",
                    width: 50
                }, {
                    field: "OrderTotal",
                    title: "@T("Admin.Customers.Customers.Orders.OrderTotal")",
                    width: 200
                }, {
                    field: "OrderStatus",
                    title: "@T("Admin.Customers.Customers.Orders.OrderStatus")",
                    width: 200
                }, {
                    field: "PaymentStatus",
                    title: "@T("Admin.Customers.Customers.Orders.PaymentStatus")",
                    width: 200
                }, {
                    field: "ShippingStatus",
                    title: "@T("Admin.Customers.Customers.Orders.ShippingStatus")",
                    width: 200
                }, {
                    field: "StoreName",
                    title: "@T("Admin.Customers.Customers.Orders.Store")",
                    width: 200
                }, {
                    field: "CreatedOn",
                    title: "@T("Admin.System.Log.Fields.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }, {
                    field: "Id",
                    title: "@T("Admin.Common.View")",
                    width: 100,
                    template: '<a href="@Url.Content("~/Admin/Order/Edit/")#=Id#">@T("Admin.Common.View")</a>'
                }]
            });
        });
    </script>
}
@helper TabRewardPoints()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="customer-rewardpoints-grid"></div>
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#customer-rewardpoints-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("RewardPointsHistorySelect", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "StoreName",
                    title: "@T("Admin.Customers.Customers.RewardPoints.Fields.Store")"
                },{
                    field: "Points",
                    title: "@T("Admin.Customers.Customers.RewardPoints.Fields.Points")"
                }, {
                    field: "PointsBalance",
                    title: "@T("Admin.Customers.Customers.RewardPoints.Fields.PointsBalance")"
                },{
                    field: "Message",
                    title: "@T("Admin.Customers.Customers.RewardPoints.Fields.Message")"
                },{
                    field: "CreatedOn",
                    title: "@T("Admin.Promotions.Campaigns.Fields.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>
    <p>
        <strong> @T("Admin.Customers.Customers.RewardPoints.AddTitle")</strong>
    </p>
    <div class="form-horizontal">
        <div class="form-body">
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AddRewardPointsValue)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddRewardPointsValue)
                    @Html.ValidationMessageFor(model => model.AddRewardPointsValue)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AddRewardPointsMessage)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.AddRewardPointsMessage)
                    @Html.ValidationMessageFor(model => model.AddRewardPointsMessage)
                </div>
            </div>
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AddRewardPointsStoreId)
                <div class="col-md-9 col-sm-9">
                    @Html.GrandDropDownListFor(model => model.AddRewardPointsStoreId, Model.RewardPointsAvailableStores)
                    @Html.ValidationMessageFor(model => model.AddRewardPointsStoreId)
                </div>
            </div>
        </div>
        <div class="form-actions">
            <div class="col-md-offset-3">
                <input type="button" id="addRewardPoints" class="btn default" value="@T("Admin.Customers.Customers.RewardPoints.AddButton")" />
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#addRewardPoints').click(function () {
                var rewardPointsValue = $("#@Html.FieldIdFor(model => model.AddRewardPointsValue)").val();
                var rewardPointsMessage = $("#@Html.FieldIdFor(model => model.AddRewardPointsMessage)").val();
                var rewardPointsStoreId = $("#@Html.FieldIdFor(model => model.AddRewardPointsStoreId)").val();
                $('#addRewardPoints').attr('disabled', true);

                var postData = {
                    addRewardPointsValue: rewardPointsValue,
                    addRewardPointsMessage: rewardPointsMessage,
                    storeId: rewardPointsStoreId,
                    customerId: '@Model.Id'
                };
                addAntiForgeryToken(postData);

                $.ajax({
                    cache:false,
                    type: "POST",
                    url: "@(Url.Action("RewardPointsHistoryAdd", "Customer"))",
                    data: postData,
                    success: function (data) {
                        var grid = $("#customer-rewardpoints-grid").data('kendoGrid');
                        grid.dataSource.read();
                        $('#addRewardPoints').attr('disabled', false);
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to add reward points.');
                        $('#addRewardPoints').attr('disabled', false);
                    }
                });
            });
        });
    </script>
}
@helper TabAddresses()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="customer-addresses-grid"></div>
        </div>
        <div class="panel-footer">
            <input type="button" class="btn default" onclick="location.href='@Url.Action("AddressCreate", new { customerId = Model.Id })'" value='@T("Admin.Customers.Customers.Addresses.AddButton")' />
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#customer-addresses-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("AddressesSelect", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        destroy: {
                            url: "@Html.Raw(Url.Action("AddressDelete", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id"
                        }
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "FirstName",
                    title: "@T("Admin.Address.Fields.FirstName")"
                }, {
                    field: "LastName",
                    title: "@T("Admin.Address.Fields.LastName")"
                }, {
                    field: "Email",
                    title: "@T("Admin.Address.Fields.Email")"
                }, {
                    field: "PhoneNumber",
                    title: "@T("Admin.Address.Fields.PhoneNumber")"
                }, {
                    field: "FaxNumber",
                    title: "@T("Admin.Address.Fields.FaxNumber")"
                }, {
                    field: "AddressHtml",
                    title: "@T("Admin.Address")",
                    encoded: false
                }, {
                    field: "Id",
                    title: "@T("Admin.Common.Edit")",
                    width: 100,
                    template: '<a href="@Url.Content("~/Admin/Customer/AddressEdit?customerId=")@Model.Id&addressid=#=Id#">@T("Admin.Common.Edit")</a>'
                }, {
                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                    title: "@T("Admin.Common.Delete")",
                    width: 100
                }]
            });
        });
    </script>
}
@helper TabCurrentShoppingCart()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="currentshoppingcart-grid"></div>
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#currentshoppingcart-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("GetCartList", "Customer", new { customerId = Model.Id, cartTypeId = (int)ShoppingCartType.ShoppingCart }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "ProductName",
                    title: "@T("Admin.CurrentCarts.Product")",
                    width:500,
                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">#:ProductName#</a>' +
                        '# if(AttributeInfo && AttributeInfo.length > 0) {# <br />#=AttributeInfo# #} #'
                }, {
                    field: "Quantity",
                    title: "@T("Admin.CurrentCarts.Quantity")",
                    width:200
                },{
                    field: "UnitPrice",
                    title: "@T("Admin.CurrentCarts.UnitPrice")",
                    width:200
                },{
                    field: "Total",
                    title: "@T("Admin.CurrentCarts.Total")",
                    width:200
                },{
                    field: "Store",
                    title: "@T("Admin.CurrentCarts.Store")",
                    width:200
                },{
                    field: "UpdatedOn",
                    title: "@T("Admin.CurrentCarts.UpdatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>
}
@helper TabCurrentWishlist()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="currentwishlist-grid"></div>
        </div>
    </div>


    <script>
        $(document).ready(function () {
            $("#currentwishlist-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("GetCartList", "Customer", new { customerId = Model.Id, cartTypeId = (int)ShoppingCartType.Wishlist }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "ProductName",
                    title: "@T("Admin.CurrentCarts.Product")",
                    width:500,
                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">#:ProductName#</a>' +
                        '# if(AttributeInfo && AttributeInfo.length > 0) {# <br />#=AttributeInfo# #} #'
                }, {
                    field: "Quantity",
                    title: "@T("Admin.CurrentCarts.Quantity")",
                    width:200
                },{
                    field: "UnitPrice",
                    title: "@T("Admin.CurrentCarts.UnitPrice")",
                    width:200
                },{
                    field: "Total",
                    title: "@T("Admin.CurrentCarts.Total")",
                    width:200
                },{
                    field: "Store",
                    title: "@T("Admin.CurrentCarts.Store")",
                    width:200
                },{
                    field: "UpdatedOn",
                    title: "@T("Admin.CurrentCarts.UpdatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>
}
@helper TabActivityLog()
{
var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <br />
    <strong>@T("Admin.Configuration.Activitylog")</strong>
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="activitylog-grid"></div>
        </div>
    </div>

                <script>
                    $(document).ready(function () {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "Customer", new { customerId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "ActivityLogTypeName",
                                title: "@T("Admin.Customers.Customers.ActivityLog.ActivityLogType")",
                                width: 300,
                            }, {
                                field: "Comment",
                                title: "@T("Admin.Customers.Customers.ActivityLog.Comment")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Customers.Customers.ActivityLog.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            }]
                        });
                    });
                </script>

    if (Model.ShowMessageContactForm)
    {
    <br />
    <strong>@T("Admin.System.ContactForm")</strong>

    <div class="panel panel-default">
        <div class="panel-body">
            <div id="contactform-grid"></div>
        </div>
    </div>


                <script>
                    $(document).ready(function () {
                        $("#contactform-grid").kendoGrid({
                            dataSource: {
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ContactFormList", "Customer", new { customerId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            scrollable: false,
                            columns: [{
                                field: "CreatedOn",
                                title: "@T("Admin.System.ContactForm.Fields.CreatedOn")",
                                width: 100,
                                type: "date",
                                format: "{0:G}"
                            }, {
                                field: "Store",
                                title: "@T("Admin.System.ContactForm.Fields.Store")",
                                width: 100
                            }, {
                                field: "Email",
                                title: "@T("Admin.System.ContactForm.Fields.FullName")",
                                width: 150
                            }, {
                                field: "IpAddress",
                                title: "@T("Admin.System.ContactForm.Fields.IpAddress")",
                                width: 50
                            }, {
                                field: "Subject",
                                title: "@T("Admin.System.ContactForm.Fields.Subject")",
                                width: 300
                            }, {
                                field: "Id",
                                title: "@T("Admin.Common.View")",
                                width: 30,
                                template: '<a href="@Url.Content("~/Admin/ContactForm/Details/")#=Id#">@T("admin.common.view")</a>'
                            }]
                        });
                    });
                </script>
    }
}
@helper TabImpersonate()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div class="note note-info">
                <p>@T("Admin.Customers.Customers.Impersonate.Description1")</p>
                <p>@T("Admin.Customers.Customers.Impersonate.Description2")</p>
            </div>
        </div>
        <div class="panel-footer">
            <input type="submit" name="impersonate" class="btn red" value="@T("Admin.Customers.Customers.Impersonate.Button")" />
        </div>
    </div>
}
@helper TabBackInStockSubscriptions()
{
var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;


    <div class="panel panel-default">
        <div class="panel-body">
            <div id="backinstock-subscriptions-grid"></div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            $("#backinstock-subscriptions-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("BackInStockSubscriptionList", "Customer", new { customerId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "StoreName",
                    title: "@T("Admin.Customers.Customers.BackInStockSubscriptions.Store")",
                    width: 200,
                }, {
                    field: "ProductId",
                    title: "@T("Admin.Customers.Customers.BackInStockSubscriptions.Product")",
                    width: 300,
                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">#:ProductName#</a>'
                },{
                    field: "CreatedOn",
                    title: "@T("Admin.Customers.Customers.BackInStockSubscriptions.CreatedOn")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }]
            });
        });
    </script>

}