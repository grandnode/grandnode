@using Grand.Core.Domain.Catalog
@model ProductListModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Grand.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = T("Admin.Catalog.Products.Manage").Text;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-cubes"></i>
                        @T("Admin.Catalog.Products.Manage")
                    </div>
                    <div class="actions btn-group btn-group-devided util-btn-margin-bottom-5">
                        <a href="@Url.Action("Create")" class="btn green"><i class="fa fa-plus"></i><span class="hidden-xs"> @T("Admin.Common.AddNew") </span></a>
                        <button type="submit" name="download-catalog-pdf" class="btn purple">
                            <i class="fa fa-file-pdf-o"></i>
                            @T("Admin.Catalog.Products.List.DownloadPDF")
                        </button>
                        <div class="btn-group btn-group-devided">
                            <a class="btn default" href="javascript:;" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">
                                <i class="fa fa-download"></i>
                                @T("Admin.Common.Export")
                                <i class="fa fa-angle-down"></i>
                            </a>
                            <ul class="dropdown-menu pull-right">
                                <li>
                                    <input type="submit" name="exportxml-all" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToXml.All")" />
                                </li>
                                <li>
                                    <input type="button" id="exportxml-selected" class="btn default" style="width: 100%;"value="@T("Admin.Common.ExportToXml.Selected")" />
                                </li>
                                <li>
                                    <input type="submit" name="exportexcel-all" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToExcel.All")" />
                                </li>
                                <li>
                                    <input type="button" id="exportexcel-selected" class="btn default" style="width: 100%;" value="@T("Admin.Common.ExportToExcel.Selected")" />
                                </li>
                            </ul>
                        </div>
                        @if (!Model.IsLoggedInAsVendor)
                        {
                            //a vendor cannot import products
                            <button type="button" id="importexcel" name="importexcel" class="btn default">
                                <i class="fa fa-upload"></i>
                                @T("Admin.Common.ImportFromExcel")
                            </button>

                        }
                        <button type="button" name="delete-selected" id="delete-selected" class="btn red">
                            <i class="fa fa-trash-o"></i>
                            @T("Admin.Common.Delete.Selected")
                        </button>

                    </div>
                </div>

                <div class="portlet-body form">
                    <div class="form-horizontal">
                        <div class="form-body col-md-6">
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchProductName, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false )
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandEditorFor(model => model.SearchProductName)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchProductTypeId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchProductTypeId, Model.AvailableProductTypes)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchPublishedId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchPublishedId, Model.AvailablePublishedOptions)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchWarehouseId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchWarehouseId, Model.AvailableWarehouses)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.GoDirectlyToSku, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    <div class="input-group" style="text-align:left">
                                        @Html.GrandEditorFor(model => model.GoDirectlyToSku)
                                        <span class="input-group-btn">
                                            <input type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="btn default" value="@T("Admin.Common.Go")" />
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-body col-md-6">
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchCategoryId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchCategoryId, Model.AvailableCategories)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchIncludeSubCategories, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandEditorFor(model => model.SearchIncludeSubCategories)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchManufacturerId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchManufacturerId, Model.AvailableManufacturers)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.GrandLabelFor(model => model.SearchStoreId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchStoreId, Model.AvailableStores)
                                </div>
                            </div>
                            <div class="form-group" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.SearchVendorId, new Dictionary<string, object> { { "class", "control-label col-md-4 col-sm-4 " } }, false)
                                <div class="col-md-8 col-sm-8">
                                    @Html.GrandDropDownListFor(model => model.SearchVendorId, Model.AvailableVendors)
                                </div>
                            </div>
                        </div>
                        <div class="form-actions">
                            <div class="row">
                                <div class="col-md-offset-5 col-sm-offset-5 col-md-7 col-sm-7">
                                    <button class="btn btn-success filter-submit" id="search-products">
                                        <i class="fa fa-search"></i> @T("Admin.Common.Search")
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="portlet-body">
                            <div id="products-grid" ></div>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            $("#products-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ProductList", "Product"))",
                            type: "POST",
                            dataType: "json",
                            data: additionalData
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors"
                    },
                    error: function(e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    pageSize: @(defaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    pageSizes: [@(gridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                dataBound: onDataBound,
                columns: [
                    {
                        field: "Id",
                        headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                        width: 50
                    },
                    {
                        field: "PictureThumbnailUrl",
                        title: "@T("Admin.Catalog.Products.Fields.PictureThumbnailUrl")",
                        template: '<img src="#=PictureThumbnailUrl#" />',
                        width: 100
                    },
                    {
                        field: "Name",
                        title: "@T("Admin.Catalog.Products.Fields.Name")",
                        width: 300
                    }, {
                        field: "Sku",
                        title: "@T("Admin.Catalog.Products.Fields.Sku")",
                        width: 100
                    }, {
                        field: "Price",
                        title: "@T("Admin.Catalog.Products.Fields.Price")",
                        width: 150,
                        //if not a grouped product, then display
                        template: "# if(ProductTypeId != @((int)ProductType.GroupedProduct)) {# #:Price# #}  #"
                    }, {
                        field: "StockQuantityStr",
                        title: "@T("Admin.Catalog.Products.Fields.StockQuantity")",
                        width: 100
                    }, {
                        field: "ProductTypeName",
                        title: "@T("Admin.Catalog.Products.Fields.ProductType")",
                        width: 100
                    }, {
                        field: "Published",
                        title: "@T("Admin.Catalog.Products.Fields.Published")",
                        width: 100,
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '# if(Published) {# <i class="fa fa-check" aria-hidden="true" style="color:green"></i> #} else {# <i class="fa fa-times" aria-hidden="true" style="color:red"></i> #} #'
                    }, {
                        field: "Id",
                        title: "@T("Admin.Common.Edit")",
                        width: 80,
                        template: '<a class="btn btn-sm btn-default" href="Edit/#=Id#"><i class="fa fa-pencil"></i> @T("Admin.Common.Edit")</a>'
                    }
                ]
            } );
        });
    </script>

    <script type="text/javascript">

        var selectedIds = [];

        $(document).ready(function () {

            //search button
            $('#search-products').click(function () {
                //search
                var grid = $('#products-grid').data('kendoGrid');
                grid.dataSource.page(1); //new search. Set page size to 1
                //grid.dataSource.read(); we already loaded the grid above using "page" function
                //clear selected checkboxes
                $('.checkboxGroups').prop('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-products").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#go-to-product-by-sku").click();
                    return false;
                }
            });

            //delete selected
            $('#delete-selected').click(function(e) {

                e.preventDefault();

                var postData = {
                    selectedIds: selectedIds
                };
                addAntiForgeryToken(postData);

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("DeleteSelected", "Product"))",
                    data: postData,
                    complete: function(data) {
                        //reload grid
                        var grid = $('#products-grid').data('kendoGrid');
                        grid.dataSource.read();
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    },
                    traditional: true
                });
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').prop('checked', $(this).is(':checked')).change();
            });

            //wire up checkboxes.
            $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateMasterCheckbox();
            });
        });

        function additionalData() {
            var data = {
                SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchIncludeSubCategories: $('#@Html.FieldIdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchStoreId: $('#SearchStoreId').val(),
                SearchWarehouseId: $('#SearchWarehouseId').val(),
                SearchVendorId: $('#SearchVendorId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val(),
                SearchPublishedId: $('#SearchPublishedId').val()
            };
            addAntiForgeryToken(data);
            return data;
        }

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.
                $(this).prop('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox]').length;
            var numChkBoxesChecked = $('#products-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
            $('#mastercheckbox').prop('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
    </script>
}


@*import products form*@
<div id="importexcel-window" style="display:none;">
    @using (Html.BeginForm("ImportExcel", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <table style="text-align:left;">
            <tr>
                <td colspan="2">
                    <em>@T("Admin.Catalog.Products.List.ImportFromExcelTip")</em>
                </td>
            </tr>
            <tr>
                <td>
                    @T("Admin.Common.ExcelFile"):
                </td>
                <td>
                    <input type="file" id="importexcelfile" name="importexcelfile" />
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <input type="submit" class="k-button" value="@T("Admin.Common.ImportFromExcel")" />
                </td>
            </tr>
        </table>
    }
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#importexcel").click(function (e) {
            e.preventDefault();
            var window = $("#importexcel-window");
            if (!window.data("kendoWindow")) {
                window.kendoWindow({
                    modal: true,
                    width: "400px",
                    title: "@T("Admin.Common.ImportFromExcel")",
                    actions: ["Close"]
                });
            }
            window.data('kendoWindow').center().open();
        });
    });
</script>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportXmlSelected", "Product", FormMethod.Post, new { id = "export-xml-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            return false;
        });
    });

</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportExcelSelected", "Product", FormMethod.Post, new { id = "export-excel-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            return false;
        });
    });

</script>
