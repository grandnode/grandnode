@{
    Layout = "~/Administration/Views/Shared/_AdminPopupLayout.cshtml";
}
@using Grand.Core.Domain.Catalog
@model ProductModel.ProductAttributeMappingModel
@{
    //page title
    ViewBag.Title = T("Admin.Catalog.Products.ProductAttributes.Attributes.ValidationRules").Text;

    var attributeControlType = (AttributeControlType)Model.AttributeControlTypeId;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-12">
            <div class="portlet light form-fit">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="fa fa-cubes"></i>
                        @T("Admin.Catalog.Products.ProductAttributes.Attributes.ValidationRules")
                    </div>
                </div>
                <div class="portlet-body form">

                    <div class="form-horizontal">
                        <div class="form-body">
                            <div class="form-group" @(attributeControlType != AttributeControlType.TextBox && attributeControlType != AttributeControlType.MultilineTextbox ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.ValidationMinLength, new Dictionary<string, object> { { "class", "col-sm-3" } })
                                <div class="col-md-9 col-sm-9">
                                    @Html.EditorFor(model => model.ValidationMinLength)
                                    @Html.ValidationMessageFor(model => model.ValidationMinLength)
                                </div>
                            </div>
                            <div class="form-group" @(attributeControlType != AttributeControlType.TextBox && attributeControlType != AttributeControlType.MultilineTextbox ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.ValidationMaxLength, new Dictionary<string, object> { { "class", "col-sm-3" } })
                                <div class="col-md-9 col-sm-9">
                                    @Html.GrandEditorFor(model => model.ValidationMaxLength)
                                    @Html.ValidationMessageFor(model => model.ValidationMaxLength)
                                </div>
                            </div>
                            <div class="form-group" @(attributeControlType != AttributeControlType.FileUpload ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.ValidationFileAllowedExtensions, new Dictionary<string, object> { { "class", "col-sm-3" } }))
                                <div class="col-md-9 col-sm-9">
                                    @Html.EditorFor(model => model.ValidationFileAllowedExtensions)
                                    @Html.ValidationMessageFor(model => model.ValidationFileAllowedExtensions)
                                </div>
                            </div>
                            <div class="form-group" @(attributeControlType != AttributeControlType.FileUpload ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.ValidationFileMaximumSize, new Dictionary<string, object> { { "class", "col-sm-3" } }))
                                <div class="col-md-9 col-sm-9">
                                    @Html.EditorFor(model => model.ValidationFileMaximumSize)
                                    @Html.ValidationMessageFor(model => model.ValidationFileMaximumSize)
                                </div>
                            </div>
                            <div class="form-group" @(attributeControlType != AttributeControlType.TextBox && attributeControlType != AttributeControlType.MultilineTextbox ? Html.Raw("style='display: none;'") : null)>
                                @Html.GrandLabelFor(model => model.DefaultValue, new Dictionary<string, object> { { "class", "col-sm-3" } })
                                <div class="col-md-9 col-sm-9">
                                    @Html.GrandEditorFor(model => model.DefaultValue)
                                    @Html.ValidationMessageFor(model => model.DefaultValue)
                                </div>
                            </div>
                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-sm-offset-3 col-md-offset-3 col-md-9 col-sm-9">
                                        <button class="btn btn-success" type="submit" name="save"><i class="fa fa-check"></i> @T("Admin.Common.Save") </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                               

    if (ViewBag.RefreshPage == true)
    {
    <script type="text/javascript">
        try {
            window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();
        } catch (e) {
        }
        window.close();
    </script>
    }
    if (!Model.ValidationRulesAllowed)
    {
        <div class="note note-danger">>This attribute type cannot have validation rules</div>
    }
                                
}
