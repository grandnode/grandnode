@model ProductModel
@{
    //resources for product tags input
    Html.AppendCssFileParts("~/Content/tagEditor/jquery.tag-editor.css");
    Html.AppendScriptParts("~/Scripts/tagEditor/jquery.tag-editor.min.js");
    Html.AppendScriptParts("~/Scripts/tagEditor/jquery.caret.min.js");
}
@using Grand.Core.Domain.Catalog;
@using Grand.Services.Catalog;
@using System.Text;
<script type="text/javascript">
    $(document).ready(function() {

        @if (!Model.IsLoggedInAsVendor)
        {
            <text>$("#@Html.FieldIdFor(model => model.ShowOnHomePage)").click(toggleShowOnHomePage);</text>
        }
        $("#@Html.FieldIdFor(model => model.ProductTypeId)").change(toggleProductType);
        $("#@Html.FieldIdFor(model => model.RequireOtherProducts)").click(toggleRequireOtherProducts);
        $("#@Html.FieldIdFor(model => model.AvailableForPreOrder)").click(togglePreOrder);
        $("#@Html.FieldIdFor(model => model.IsGiftCard)").click(toggleGiftCard);
        $("#@Html.FieldIdFor(model => model.CustomerEntersPrice)").click(toggleCustomerEntersPrice);
        $("#@Html.FieldIdFor(model => model.BasepriceEnabled)").click(toggleBasepriceEnabled);
        $("#@Html.FieldIdFor(model => model.IsDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.UnlimitedDownloads)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasSampleDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasUserAgreement)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.IsRecurring)").click(toggleRecurring);
        $("#@Html.FieldIdFor(model => model.IsRental)").click(toggleRental);
        $("#@Html.FieldIdFor(model => model.IsShipEnabled)").click(toggleShipping);
        $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);
        $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.UseMultipleWarehouses)").click(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.BackorderModeId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.DisplayStockAvailability)").click(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.MarkAsNew)").click(toggleMarkAsNew);

        @if (!Model.IsLoggedInAsVendor)
        {
            <text>toggleShowOnHomePage();</text>
        }
        toggleProductType();
        togglePreOrder();
        toggleRequireOtherProducts();
        toggleGiftCard();
        toggleCustomerEntersPrice();
        toggleBasepriceEnabled();
        toggleDownloadableProduct();
        toggleRecurring();
        toggleRental();
        toggleShipping();
        toggleTax();
        toggleManageStock();
        toggleMarkAsNew();
    });

    function toggleShowOnHomePage() {
        if ($('#@Html.FieldIdFor(model => model.ShowOnHomePage)').is(':checked')) {
            $('#pnlDisplayOrder').show();
        } else {
            $('#pnlDisplayOrder').hide();
        }
    }

    function toggleProductType() {
        var selectedProductTypeId = $("#@Html.FieldIdFor(model => model.ProductTypeId)").val();
        if (selectedProductTypeId == @(((int) ProductType.SimpleProduct).ToString())) {
            $('#group-prices').show();
            $('#group-required-other-products').show();
            $('#group-giftcard').show();
            $('#group-downloads').show();
            $('#group-recurring').show();
            $('#group-rental').show();
            $('#group-shipping').show();
            $('#group-tax').show();
            $('#group-inventory').show();
            $('#tab-associated-products').hide();
        } else if (selectedProductTypeId == @(((int) ProductType.GroupedProduct).ToString())) {
            $('#group-prices').hide();
            $('#group-required-other-products').hide();
            $('#group-giftcard').hide();
            $('#group-downloads').hide();
            $('#group-recurring').hide();
            $('#group-rental').hide();
            $('#group-shipping').hide();
            $('#group-tax').hide();
            $('#group-inventory').hide();
            $('#tab-associated-products').show();
        }
    }

    function togglePreOrder() {
        if ($('#@Html.FieldIdFor(model => model.AvailableForPreOrder)').is(':checked')) {
            $('#pnlPreOrderAvailabilityStartDateTimeUtc').show();
        } else {
            $('#pnlPreOrderAvailabilityStartDateTimeUtc').hide();
        }
    }

    function toggleRequireOtherProducts() {
        if ($('#@Html.FieldIdFor(model => model.RequireOtherProducts)').is(':checked')) {
            $('#pnlRequiredProductIds').show();
            $('#pnlAutomaticallyAddRequiredProducts').show();
        } else {
            $('#pnlRequiredProductIds').hide();
            $('#pnlAutomaticallyAddRequiredProducts').hide();
        }
    }

    function toggleGiftCard() {
        if ($('#@Html.FieldIdFor(model => model.IsGiftCard)').is(':checked')) {
            $('#pnlGiftCardType').show();
            $('#pnlOverriddenGiftCardAmount').show();
        } else {
            $('#pnlGiftCardType').hide();
            $('#pnlOverriddenGiftCardAmount').hide();
        }
    }

    function toggleCustomerEntersPrice() {
        if ($('#@Html.FieldIdFor(model => model.CustomerEntersPrice)').is(':checked')) {
            $('#pnlMinimumCustomerEnteredPrice').show();
            $('#pnlMaximumCustomerEnteredPrice').show();
        } else {
            $('#pnlMinimumCustomerEnteredPrice').hide();
            $('#pnlMaximumCustomerEnteredPrice').hide();
        }
    }

    function toggleBasepriceEnabled() {
        if ($('#@Html.FieldIdFor(model => model.BasepriceEnabled)').is(':checked')) {
            $('#pnlBasepriceAmount').show();
            $('#pnlBasepriceUnit').show();
            $('#pnlBasepriceBaseAmount').show();
            $('#pnlBasepriceBaseUnit').show();
        } else {
            $('#pnlBasepriceAmount').hide();
            $('#pnlBasepriceUnit').hide();
            $('#pnlBasepriceBaseAmount').hide();
            $('#pnlBasepriceBaseUnit').hide();
        }
    }

    function toggleDownloadableProduct() {
        if ($('#@Html.FieldIdFor(model => model.IsDownload)').is(':checked')) {

            $('#pnlDownloadFile').show();
            $('#pnlUnlimitedDownloads').show();
            if ($('#@Html.FieldIdFor(model => model.UnlimitedDownloads)').is(':checked')) {
                $('#pnlMaxNumberOfDownloads').hide();
            } else {
                $('#pnlMaxNumberOfDownloads').show();
            }
            $('#pnlDownloadExpirationDays').show();
            $('#pnlDownloadActivationType').show();

            $('#pnlHasUserAgreement').show();
            if ($('#@Html.FieldIdFor(model => model.HasUserAgreement)').is(':checked')) {
                $('#pnlUserAgreementText').show();
            } else {
                $('#pnlUserAgreementText').hide();
            }

            $('#pnlHasSampleDownload').show();

            if ($('#@Html.FieldIdFor(model => model.HasSampleDownload)').is(':checked')) {
                $('#pnlSampleDownloadFile').show();
            } else {
                $('#pnlSampleDownloadFile').hide();
            }
        } else {
            $('#pnlDownloadFile').hide();
            $('#pnlUnlimitedDownloads').hide();
            $('#pnlMaxNumberOfDownloads').hide();
            $('#pnlDownloadExpirationDays').hide();
            $('#pnlDownloadActivationType').hide();
            $('#pnlHasUserAgreement').hide();
            $('#pnlUserAgreementText').hide();
            $('#pnlHasSampleDownload').hide();
            $('#pnlSampleDownloadFile').hide();
        }
    }

    function toggleShipping() {
        if ($('#@Html.FieldIdFor(model => model.IsShipEnabled)').is(':checked')) {
            $('#pnlFreeShipping').show();
            $('#pnlShipSeparately').show();
            $('#pnlAdditionalShippingCharge').show();
            $('#pnlWeight').show();
            $('#pnlLength').show();
            $('#pnlWidth').show();
            $('#pnlHeight').show();
            $('#pnlDeliveryDate').show();
        } else {
            $('#pnlFreeShipping').hide();
            $('#pnlShipSeparately').hide();
            $('#pnlAdditionalShippingCharge').hide();
            $('#pnlWeight').hide();
            $('#pnlLength').hide();
            $('#pnlWidth').hide();
            $('#pnlHeight').hide();
            $('#pnlDeliveryDate').hide();
        }
    }

    function toggleRecurring() {
        if ($('#@Html.FieldIdFor(model => model.IsRecurring)').is(':checked')) {
            $('#pnlCycleLength').show();
            $('#pnlCyclePeriod').show();
            $('#pnlTotalCycles').show();
        } else {
            $('#pnlCycleLength').hide();
            $('#pnlCyclePeriod').hide();
            $('#pnlTotalCycles').hide();
        }
    }

    function toggleRental() {
        if ($('#@Html.FieldIdFor(model => model.IsRental)').is(':checked')) {
            $('#pnlRentalPriceLength').show();
            $('#pnlRentalPricePeriod').show();
        } else {
            $('#pnlRentalPriceLength').hide();
            $('#pnlRentalPricePeriod').hide();
        }
    }

    function toggleTax() {
        if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
            $('#pnlTaxCategory').hide();
        } else {
            $('#pnlTaxCategory').show();
        }
    }

    function toggleManageStock() {
        var selectedManageInventoryMethodId = $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").val();
        if (selectedManageInventoryMethodId == @(((int) ManageInventoryMethod.DontManageStock).ToString())) {
            $('#pnlUseMultipleWarehouses').hide();
            $('#pnlWarehouse').show();
            $('#pnlMultipleWarehouses').hide();
            $('#pnlStockQuantity').hide();
            $('#pnlDisplayStockAvailability').hide();
            $('#pnlDisplayStockQuantity').hide();
            $('#pnlMinStockQuantity').hide();
            $('#pnlLowStockActivity').hide();
            $('#pnlNotifyForQuantityBelow').hide();
            $('#pnlAllowBackInStockSubscriptions').hide();
            $('#pnlBackorders').hide();
            $('#pnlAllowAddingOnlyExistingAttributeCombinations').hide();
        } else if (selectedManageInventoryMethodId == @(((int) ManageInventoryMethod.ManageStock).ToString())) {
            $('#pnlUseMultipleWarehouses').show();

            if ($('#@Html.FieldIdFor(model => model.UseMultipleWarehouses)').is(':checked')) {
                $('#pnlWarehouse').hide();
                $('#pnlMultipleWarehouses').show();
                $('#pnlStockQuantity').hide();
            } else {
                $('#pnlWarehouse').show();
                $('#pnlMultipleWarehouses').hide();
                $('#pnlStockQuantity').show();
            }

            $('#pnlDisplayStockAvailability').show();
            if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
                $('#pnlDisplayStockQuantity').show();
            } else {
                $('#pnlDisplayStockQuantity').hide();
            }

            $('#pnlMinStockQuantity').show();
            $('#pnlLowStockActivity').show();
            $('#pnlNotifyForQuantityBelow').show();
            $('#pnlBackorders').show();
            var selectedBackorderModeId = $("#@Html.FieldIdFor(model => model.BackorderModeId)").val();
            if (selectedBackorderModeId == @(((int) BackorderMode.NoBackorders).ToString())) {
                //no backorders
                $('#pnlAllowBackInStockSubscriptions').show();
            } else {
                //backorders are enabled
                $('#pnlAllowBackInStockSubscriptions').hide();
            }
            $('#pnlAllowAddingOnlyExistingAttributeCombinations').hide();
        } else {
            $('#pnlUseMultipleWarehouses').hide();
            $('#pnlWarehouse').show();
            $('#pnlMultipleWarehouses').hide();
            $('#pnlStockQuantity').hide();
            $('#pnlDisplayStockAvailability').show();
            if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
                $('#pnlDisplayStockQuantity').show();
            } else {
                $('#pnlDisplayStockQuantity').hide();
            }
            $('#pnlMinStockQuantity').hide();
            $('#pnlLowStockActivity').hide();
            $('#pnlNotifyForQuantityBelow').hide();
            $('#pnlAllowBackInStockSubscriptions').hide();
            $('#pnlBackorders').hide();
            $('#pnlAllowAddingOnlyExistingAttributeCombinations').show();
        }
    }

    function toggleMarkAsNew() {
        if ($('#@Html.FieldIdFor(model => model.MarkAsNew)').is(':checked')) {
            $('#pnlMarkAsNewStartDateTimeUtc').show();
            $('#pnlMarkAsNewEndDateTimeUtc').show();
        } else {
            $('#pnlMarkAsNewStartDateTimeUtc').hide();
            $('#pnlMarkAsNewEndDateTimeUtc').hide();
        }
    }

    @{
        //TODO move to Model
        var productTags = EngineContext.Current.Resolve<IProductTagService>().GetAllProductTags();
        var productTagsSb = new StringBuilder();
        productTagsSb.Append("var initialProductTags = [");
        for (int i = 0; i < productTags.Count; i++)
        {
            var tag = productTags[i];
            productTagsSb.Append("'");
            productTagsSb.Append(HttpUtility.JavaScriptStringEncode(tag.Name));
            productTagsSb.Append("'");
            if (i != productTags.Count - 1)
            {
                productTagsSb.Append(",");
            }
        }
        productTagsSb.Append("]");
    }
    //tags
    $(document).ready(function () {
        @Html.Raw(productTagsSb.ToString())
        $("#@Html.FieldIdFor(model => model.ProductTags)").tagEditor({
            autocomplete: {
                delay: 0,
                position: { collision: 'flip' },
                source: initialProductTags
            },
            delimiter: ',',
            placeholder: 'Enter tags ...'
        });
    });


    //required product friendly names
    $(document).ready(function () {
        loadRequiredProductFriendlyNames();
    });
    $(document).ready(function () {
        $('#@Html.FieldIdFor(model => model.RequiredProductIds)')
        .data('timeout', null)
        .keyup(function() {
            clearTimeout($(this).data('timeout'));
            //one second timeout
            $(this).data('timeout', setTimeout(loadRequiredProductFriendlyNames, 1000));
        });
    });
    function loadRequiredProductFriendlyNames() {
        var inputValue = $('#@Html.FieldIdFor(model => model.RequiredProductIds)').val();
        if (inputValue) {
            //load friendly names
            $('#required-products-check-progress').show();

            var postData = {
                productIds: inputValue
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: 'POST',
                url: '@Url.Action("LoadProductFriendlyNames", "Product")',
                data: postData,
                dataType: 'json',
                success: function(data) {
                    $('#required-products-check-progress').hide();
                    $('#required-product-names').text(data.Text);
                },
                failure: function () {
                    $('#required-products-check-progress').hide();
                    $('#required-product-names').text('');
                }
            });
        } else {
            $('#required-product-names').text('');
        }
    }

</script>
<div class="form-horizontal">
    <div class="form-body">      
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ProductTypeId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.ProductTypeId, ((ProductType)Model.ProductTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.ProductTypeId)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.VisibleIndividually)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.VisibleIndividually)
                @Html.ValidationMessageFor(model => model.VisibleIndividually)
            </div>
        </div>
        @if (!String.IsNullOrEmpty(Model.Id) && !String.IsNullOrEmpty(Model.AssociatedToProductId))
        {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.AssociatedToProductId)
                <div class="adminData">
                    @Html.ActionLink(Model.AssociatedToProductName, "Edit", "Product", new { id = Model.AssociatedToProductId }, new { })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ProductTemplateId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.ProductTemplateId, Model.AvailableProductTemplates)
                @Html.ValidationMessageFor(model => model.ProductTemplateId)
            </div>
        </div>
    </div>
</div>
@(Html.LocalizedEditor<ProductModel, ProductLocalizedModel>("product-info-localized",
    @<div class="form-horizontal portlet light bg-inverse form-fit">
         <div class="form-body">
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Locales[item].Name)
                     @Html.ValidationMessageFor(model => model.Locales[item].Name)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].ShortDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandTextAreaFor(model => model.Locales[item].ShortDescription, new { style = "Height: 100px;" })
                     @Html.ValidationMessageFor(model => model.Locales[item].ShortDescription)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Locales[item].FullDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(model => model.Locales[item].FullDescription, "RichEditor")
                     @Html.ValidationMessageFor(model => model.Locales[item].FullDescription)
                 </div>
             </div>
             @Html.HiddenFor(model => model.Locales[item].LanguageId)
         </div>
    </div>
                ,
    @<div class="form-horizontal portlet light bg-inverse form-fit">
         <div class="form-body">
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.Name)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandEditorFor(model => model.Name)
                     @Html.ValidationMessageFor(model => model.Name)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.ShortDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.GrandTextAreaFor(x => x.ShortDescription, new { style = "Height: 100px;" })
                     @Html.ValidationMessageFor(model => model.ShortDescription)
                 </div>
             </div>
             <div class="form-group">
                 @Html.GrandLabelFor(model => model.FullDescription)
                 <div class="col-md-9 col-sm-9">
                     @Html.EditorFor(x => x.FullDescription, "RichEditor")
                     @Html.ValidationMessageFor(model => model.FullDescription)
                 </div>
             </div>
         </div>
    </div>
            ))
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AdminComment)
            <div class="col-md-9 col-sm-9">
                @Html.GrandTextAreaFor(model => model.AdminComment)
                @Html.ValidationMessageFor(model => model.AdminComment)
            </div>
        </div>
        <div @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            @Html.GrandLabelFor(model => model.VendorId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                @Html.ValidationMessageFor(model => model.VendorId)
            </div>
        </div>
        <div class="form-group" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            @Html.GrandLabelFor(model => model.ShowOnHomePage)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.ShowOnHomePage)
                @Html.ValidationMessageFor(model => model.ShowOnHomePage)
            </div>
        </div>
        <div class="form-group" id="pnlDisplayOrder" @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            @Html.GrandLabelFor(model => model.DisplayOrder)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayOrderCategory)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.DisplayOrderCategory)
                @Html.ValidationMessageFor(model => model.DisplayOrderCategory)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayOrderManufacturer)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.DisplayOrderManufacturer)
                @Html.ValidationMessageFor(model => model.DisplayOrderManufacturer)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.OnSale)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.OnSale)
                @Html.ValidationMessageFor(model => model.OnSale)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowCustomerReviews)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AllowCustomerReviews)
                @Html.ValidationMessageFor(model => model.AllowCustomerReviews)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ProductTags)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.ProductTags, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductTags)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Sku)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Sku)
                @Html.ValidationMessageFor(model => model.Sku)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ManufacturerPartNumber)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.ManufacturerPartNumber)
                @Html.ValidationMessageFor(model => model.ManufacturerPartNumber)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Gtin)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Gtin)
                @Html.ValidationMessageFor(model => model.Gtin)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal portlet light bg-inverse form-fit" id="group-prices">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Price)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Price) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.Price)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.OldPrice)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.OldPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.OldPrice)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ProductCost)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.ProductCost) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.ProductCost)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.SpecialPrice)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.SpecialPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.SpecialPrice)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.SpecialPriceStartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.SpecialPriceStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.SpecialPriceStartDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.SpecialPriceEndDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.SpecialPriceEndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.SpecialPriceEndDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisableBuyButton)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisableBuyButton)
                @Html.ValidationMessageFor(model => model.DisableBuyButton)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisableWishlistButton)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisableWishlistButton)
                @Html.ValidationMessageFor(model => model.DisableWishlistButton)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AvailableForPreOrder)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AvailableForPreOrder)
                @Html.ValidationMessageFor(model => model.AvailableForPreOrder)
            </div>
        </div>
        <div class="form-group" id="pnlPreOrderAvailabilityStartDateTimeUtc">
            @Html.GrandLabelFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.PreOrderAvailabilityStartDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.CallForPrice)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.CallForPrice)
                @Html.ValidationMessageFor(model => model.CallForPrice)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.CustomerEntersPrice)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.CustomerEntersPrice)
                @Html.ValidationMessageFor(model => model.CustomerEntersPrice)
            </div>
        </div>
        <div class="form-group" id="pnlMinimumCustomerEnteredPrice">
            @Html.GrandLabelFor(model => model.MinimumCustomerEnteredPrice)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MinimumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.MinimumCustomerEnteredPrice)
            </div>
        </div>
        <div class="form-group" id="pnlMaximumCustomerEnteredPrice">
            @Html.GrandLabelFor(model => model.MaximumCustomerEnteredPrice)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MaximumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.MaximumCustomerEnteredPrice)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.BasepriceEnabled)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.BasepriceEnabled)
                @Html.ValidationMessageFor(model => model.BasepriceEnabled)
            </div>
        </div>
        <div class="form-group" id="pnlBasepriceAmount">
            @Html.GrandLabelFor(model => model.BasepriceAmount)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.BasepriceAmount)
                @Html.ValidationMessageFor(model => model.BasepriceAmount)
            </div>
        </div>
        <div class="form-group" id="pnlBasepriceUnit">
            @Html.GrandLabelFor(model => model.BasepriceUnitId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.BasepriceUnitId, Model.AvailableBasepriceUnits)
                @Html.ValidationMessageFor(model => model.BasepriceUnitId)
            </div>
        </div>
        <div class="form-group" id="pnlBasepriceBaseAmount">
            @Html.GrandLabelFor(model => model.BasepriceBaseAmount)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.BasepriceBaseAmount)
                @Html.ValidationMessageFor(model => model.BasepriceBaseAmount)
            </div>
        </div>
        <div class="form-group" id="pnlBasepriceBaseUnit">
            @Html.GrandLabelFor(model => model.BasepriceBaseUnitId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.BasepriceBaseUnitId, Model.AvailableBasepriceBaseUnits)
                @Html.ValidationMessageFor(model => model.BasepriceBaseUnitId)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal" id="group-required-other-products">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.RequireOtherProducts)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.RequireOtherProducts)
                @Html.ValidationMessageFor(model => model.RequireOtherProducts)
            </div>
        </div>
        <div class="form-group" id="pnlRequiredProductIds">
            @Html.GrandLabelFor(model => model.RequiredProductIds)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.RequiredProductIds)
                @Html.ValidationMessageFor(model => model.RequiredProductIds)
                <span id="required-products-check-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                <input type="submit" id="btnAddNewRequiredProduct" value="@T("Admin.Catalog.Products.Fields.RequiredProductIds.AddNew")" 
                       onclick="javascript:OpenWindow('@(Url.Action("RequiredProductAddPopup", "Product", 
                                                       new { btnId = "btnRefreshRequiredProducts", productIdsInput = "RequiredProductIds" }))', 800, 800, true); return false;" class="btn default" />
                <input type="submit" id="btnRefreshRequiredProducts" style="display: none" />
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#btnRefreshRequiredProducts').click(function () {
                            loadRequiredProductFriendlyNames();
                            return false;
                        });
                    });
                </script>
                <span id="required-product-names" class="required-product-names"></span>
            </div>         
        </div>
        <div class="form-group" id="pnlAutomaticallyAddRequiredProducts">
            @Html.GrandLabelFor(model => model.AutomaticallyAddRequiredProducts)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AutomaticallyAddRequiredProducts)
                @Html.ValidationMessageFor(model => model.AutomaticallyAddRequiredProducts)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal portlet light bg-inverse form-fit"  id="group-giftcard">
    <div class="form-body">       
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsGiftCard)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsGiftCard)
                @Html.ValidationMessageFor(model => model.IsGiftCard)
            </div>
        </div>
        <div class="form-group" id="pnlGiftCardType">
            @Html.GrandLabelFor(model => model.GiftCardTypeId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.GiftCardTypeId, ((GiftCardType)Model.GiftCardTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.GiftCardTypeId)
            </div>
        </div>
        <div class="form-group" id="pnlOverriddenGiftCardAmount">
            @Html.GrandLabelFor(model => model.OverriddenGiftCardAmount)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.OverriddenGiftCardAmount)
                @Html.ValidationMessageFor(model => model.OverriddenGiftCardAmount)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal" id="group-downloads">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsDownload)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsDownload)
                @Html.ValidationMessageFor(model => model.IsDownload)
            </div>
        </div>
        <div class="form-group" id="pnlDownloadFile">
            @Html.GrandLabelFor(model => model.DownloadId)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DownloadId)
                @Html.ValidationMessageFor(model => model.DownloadId)
            </div>
        </div>
        <div class="form-group" id="pnlUnlimitedDownloads">
            @Html.GrandLabelFor(model => model.UnlimitedDownloads)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.UnlimitedDownloads)
                @Html.ValidationMessageFor(model => model.UnlimitedDownloads)
            </div>
        </div>
        <div class="form-group" id="pnlMaxNumberOfDownloads">
            @Html.GrandLabelFor(model => model.MaxNumberOfDownloads)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MaxNumberOfDownloads)
                @Html.ValidationMessageFor(model => model.MaxNumberOfDownloads)
            </div>
        </div>
        <div class="form-group" id="pnlDownloadExpirationDays">
            @Html.GrandLabelFor(model => model.DownloadExpirationDays)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.DownloadExpirationDays)
                @Html.ValidationMessageFor(model => model.DownloadExpirationDays)
            </div>
        </div>
        <div class="form-group" id="pnlDownloadActivationType">
            @Html.GrandLabelFor(model => model.DownloadActivationTypeId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.DownloadActivationTypeId, ((DownloadActivationType)Model.DownloadActivationTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.DownloadActivationTypeId)
            </div>
        </div>
        <div class="form-group" id="pnlHasUserAgreement">
            @Html.GrandLabelFor(model => model.HasUserAgreement)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.HasUserAgreement)
                @Html.ValidationMessageFor(model => model.HasUserAgreement)
            </div>
        </div>
        <div class="form-group" id="pnlUserAgreementText">
            @Html.GrandLabelFor(model => model.UserAgreementText)
            <div class="col-md-9 col-sm-9">
                @Html.GrandTextAreaFor(model => model.UserAgreementText)
                @Html.ValidationMessageFor(model => model.UserAgreementText)
            </div>
        </div>
        <div class="form-group" id="pnlHasSampleDownload">
            @Html.GrandLabelFor(model => model.HasSampleDownload)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.HasSampleDownload)
                @Html.ValidationMessageFor(model => model.HasSampleDownload)
            </div>
        </div>
        <div class="form-group" id="pnlSampleDownloadFile">
            @Html.GrandLabelFor(model => model.SampleDownloadId)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.SampleDownloadId)
                @Html.ValidationMessageFor(model => model.SampleDownloadId)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal portlet light bg-inverse form-fit" id="group-recurring">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsRecurring)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsRecurring)
                @Html.ValidationMessageFor(model => model.IsRecurring)
            </div>
        </div>
        <div class="form-group" id="pnlCycleLength">
            @Html.GrandLabelFor(model => model.RecurringCycleLength)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.RecurringCycleLength)
                @Html.ValidationMessageFor(model => model.RecurringCycleLength)
            </div>
        </div>
        <div class="form-group" id="pnlCyclePeriod">
            @Html.GrandLabelFor(model => model.RecurringCyclePeriodId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.RecurringCyclePeriodId, ((RecurringProductCyclePeriod)Model.RecurringCyclePeriodId).ToSelectList())
                @Html.ValidationMessageFor(model => model.RecurringCyclePeriodId)
            </div>
        </div>
        <div class="form-group" id="pnlTotalCycles">
            @Html.GrandLabelFor(model => model.RecurringTotalCycles)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.RecurringTotalCycles)
                @Html.ValidationMessageFor(model => model.RecurringTotalCycles)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal" id="group-rental">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsRental)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsRental)
                @Html.ValidationMessageFor(model => model.IsRental)
            </div>
        </div>
        <div class="form-group" id="pnlRentalPriceLength">
            @Html.GrandLabelFor(model => model.RentalPriceLength)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.RentalPriceLength)
                @Html.ValidationMessageFor(model => model.RentalPriceLength)
            </div>
        </div>
        <div class="form-group" id="pnlRentalPricePeriod">
            @Html.GrandLabelFor(model => model.RentalPricePeriodId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.RentalPricePeriodId, ((RentalPricePeriod)Model.RentalPricePeriodId).ToSelectList())
                @Html.ValidationMessageFor(model => model.RentalPricePeriodId)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal portlet light bg-inverse form-fit" id="group-shipping">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsShipEnabled)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsShipEnabled)
                @Html.ValidationMessageFor(model => model.IsShipEnabled)
            </div>
        </div>
        <div class="form-group" id="pnlFreeShipping">
            @Html.GrandLabelFor(model => model.IsFreeShipping)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsFreeShipping)
                @Html.ValidationMessageFor(model => model.IsFreeShipping)
            </div>
        </div>
        <div class="form-group" id="pnlShipSeparately">
            @Html.GrandLabelFor(model => model.ShipSeparately)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.ShipSeparately)
                @Html.ValidationMessageFor(model => model.ShipSeparately)
            </div>
        </div>
        <div class="form-group" id="pnlAdditionalShippingCharge">
            @Html.GrandLabelFor(model => model.AdditionalShippingCharge)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.AdditionalShippingCharge) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.AdditionalShippingCharge)
            </div>
        </div>
        <div class="form-group" id="pnlWeight">
            @Html.GrandLabelFor(model => model.Weight)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Weight) [@Model.BaseWeightIn]
                @Html.ValidationMessageFor(model => model.Weight)
            </div>
        </div>
        <div class="form-group" id="pnlLength">
            @Html.GrandLabelFor(model => model.Length)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Length) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Length)
            </div>
        </div>
        <div class="form-group" id="pnlWidth">
            @Html.GrandLabelFor(model => model.Width)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Width) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Width)
            </div>
        </div>
        <div class="form-group" id="pnlHeight">
            @Html.GrandLabelFor(model => model.Height)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Height) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Height)
            </div>
        </div>
        <div class="form-group" id="pnlDeliveryDate">
            @Html.GrandLabelFor(model => model.DeliveryDateId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.DeliveryDateId, Model.AvailableDeliveryDates)
                @Html.ValidationMessageFor(model => model.DeliveryDateId)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal" id="group-tax">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsTaxExempt)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsTaxExempt)
                @Html.ValidationMessageFor(model => model.IsTaxExempt)
            </div>
        </div>
        <div class="form-group" id="pnlTaxCategory">
            @Html.GrandLabelFor(model => model.TaxCategoryId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories)
                @Html.ValidationMessageFor(model => model.TaxCategoryId)
            </div>
        </div>
        <div class="form-group" id="pnlIsTelecommunicationsOrBroadcastingOrElectronicServices">
            @Html.GrandLabelFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
                @Html.ValidationMessageFor(model => model.IsTelecommunicationsOrBroadcastingOrElectronicServices)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal portlet light bg-inverse form-fit" id="group-inventory">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.ManageInventoryMethodId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.ManageInventoryMethodId, ((ManageInventoryMethod)Model.ManageInventoryMethodId).ToSelectList())
                @Html.ValidationMessageFor(model => model.ManageInventoryMethodId)
            </div>
        </div>
        <div class="form-group" id="pnlUseMultipleWarehouses">
            @Html.GrandLabelFor(model => model.UseMultipleWarehouses)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.UseMultipleWarehouses)
                @Html.ValidationMessageFor(model => model.UseMultipleWarehouses)
            </div>
        </div>
        <div class="form-group" id="pnlWarehouse">
            @Html.GrandLabelFor(model => model.WarehouseId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.WarehouseId, Model.AvailableWarehouses)
                @Html.ValidationMessageFor(model => model.WarehouseId)
            </div>
        </div>
        <div class="form-group" id="pnlMultipleWarehouses">
            @Html.GrandLabelFor(model => model.ProductWarehouseInventoryModels)
            <div class="col-md-9 col-sm-9">
                    @if (Model.ProductWarehouseInventoryModels.Count > 0)
                    {
                        <table style="width: 600px; border-collapse: collapse;">
                            <thead>
                                <tr>
                                    <th>
                                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.Warehouse")
                                    </th>
                                    <th align="center">
                                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.WarehouseUsed")
                                    </th>
                                    <th align="center">
                                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.StockQuantity")
                                    </th>
                                    <th align="center">
                                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.ReservedQuantity")
                                    </th>
                                    <th align="center">
                                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.PlannedQuantity")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.ProductWarehouseInventoryModels)
                                {
                                    <tr>
                                        <td style="width: 40%;">
                                            <div style="padding-left: 10px; padding-right: 10px;">
                                                @item.WarehouseName
                                            </div>
                                        </td>
                                        <td align="center" style="width: 10%;">
                                            <input type="checkbox" id="warehouse_used_@(item.WarehouseId)" name="warehouse_used_@(item.WarehouseId)" value="@item.WarehouseId" checked="@item.WarehouseUsed" />
                                            <script type="text/javascript">
                                                $(document).ready(function() {
                                                    $("#warehouse_used_@(item.WarehouseId)").change(toggleWarehouseUsed_@(item.WarehouseId));
                                                    toggleWarehouseUsed_@(item.WarehouseId)();
                                                });

                                                function toggleWarehouseUsed_@(item.WarehouseId)() {
                                                    if ($('#warehouse_used_@(item.WarehouseId)').is(':checked')) {
                                                        $('#warehouse_qty_@(item.WarehouseId)').prop('disabled', false);
                                                        $('#warehouse_reserved_@(item.WarehouseId)').prop('disabled', false);
                                                    } else {
                                                        $('#warehouse_qty_@(item.WarehouseId)').prop('disabled', true);
                                                        $('#warehouse_reserved_@(item.WarehouseId)').prop('disabled', true);
                                                    }
                                                }
                                            </script>
                                        <td align="center" style="width: 20%;">
                                            <input id="warehouse_qty_@(item.WarehouseId)" name="warehouse_qty_@(item.WarehouseId)" type="text" value="@item.StockQuantity" class="adminInput" style="width: 70px;" />
                                        </td>
                                        <td align="center" style="width: 20%;">
                                            <input id="warehouse_reserved_@(item.WarehouseId)" name="warehouse_reserved_@(item.WarehouseId)" type="text" value="@item.ReservedQuantity" class="adminInput" style="width: 70px;" />
                                        </td>
                                        <td align="center" style="width: 10%;">
                                            @item.PlannedQuantity
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <p>
                            <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description1")</em>
                        </p>
                        <p>
                            <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description2")</em>
                        </p>
                        <p>
                            <em>@T("Admin.Catalog.Products.ProductWarehouseInventory.Description3")</em>
                        </p>
                    }
                    else
                    {
                        @T("Admin.Catalog.Products.ProductWarehouseInventory.Fields.Warehouse.NotDefined")
                    }
            </div>
        </div>
        <div class="form-inline" id="pnlStockQuantity">
            @Html.GrandLabelFor(model => model.StockQuantity)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.StockQuantity)
                @Html.ValidationMessageFor(model => model.StockQuantity)
                <span>
                    @Html.GrandDropDownListFor(model => model.UnitId, Model.AvailableUnits, new { @class = "form-control input-xsmall", style= "height: 30px;padding: 0px;"})
                </span>
            </div>
        </div>
        <div class="form-group" id="pnlDisplayStockAvailability">
            @Html.GrandLabelFor(model => model.DisplayStockAvailability)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisplayStockAvailability)
                @Html.ValidationMessageFor(model => model.DisplayStockAvailability)
            </div>
        </div>
        <div class="form-group" id="pnlDisplayStockQuantity">
            @Html.GrandLabelFor(model => model.DisplayStockQuantity)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisplayStockQuantity)
                @Html.ValidationMessageFor(model => model.DisplayStockQuantity)
            </div>
        </div>
        <div class="form-group" id="pnlMinStockQuantity">
            @Html.GrandLabelFor(model => model.MinStockQuantity)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MinStockQuantity)
                @Html.ValidationMessageFor(model => model.MinStockQuantity)
            </div>
        </div>
        <div class="form-group" id="pnlLowStockActivity">
            @Html.GrandLabelFor(model => model.LowStockActivityId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.LowStockActivityId, ((LowStockActivity)Model.LowStockActivityId).ToSelectList())
                @Html.ValidationMessageFor(model => model.LowStockActivityId)
            </div>
        </div>
        <div class="form-group" id="pnlNotifyForQuantityBelow">
            @Html.GrandLabelFor(model => model.NotifyAdminForQuantityBelow)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.NotifyAdminForQuantityBelow)
                @Html.ValidationMessageFor(model => model.NotifyAdminForQuantityBelow)
            </div>
        </div>
        <div class="form-group" id="pnlBackorders">
            @Html.GrandLabelFor(model => model.BackorderModeId)
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.BackorderModeId, ((BackorderMode)Model.BackorderModeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.BackorderModeId)
            </div>
        </div>
        <div class="form-group" id="pnlAllowBackInStockSubscriptions">
            @Html.GrandLabelFor(model => model.AllowBackInStockSubscriptions)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AllowBackInStockSubscriptions)
                @Html.ValidationMessageFor(model => model.AllowBackInStockSubscriptions)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.OrderMinimumQuantity)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.OrderMinimumQuantity)
                @Html.ValidationMessageFor(model => model.OrderMinimumQuantity)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.OrderMaximumQuantity)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.OrderMaximumQuantity)
                @Html.ValidationMessageFor(model => model.OrderMaximumQuantity)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AllowedQuantities)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.AllowedQuantities)
                @Html.ValidationMessageFor(model => model.AllowedQuantities)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.NotReturnable)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.NotReturnable)
                @Html.ValidationMessageFor(model => model.NotReturnable)
            </div>
        </div>
        <div class="form-group" id="pnlAllowAddingOnlyExistingAttributeCombinations">
            @Html.GrandLabelFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
                @Html.ValidationMessageFor(model => model.AllowAddingOnlyExistingAttributeCombinations)
            </div>
        </div>
    </div>
</div>
<div class="form-horizontal">    
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AvailableStartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.AvailableStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.AvailableStartDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AvailableEndDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.AvailableEndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.AvailableEndDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.MarkAsNew)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.MarkAsNew)
                @Html.ValidationMessageFor(model => model.MarkAsNew)
            </div>
        </div>
        <div class="form-group" id="pnlMarkAsNewStartDateTimeUtc">
            @Html.GrandLabelFor(model => model.MarkAsNewStartDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MarkAsNewStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.MarkAsNewStartDateTimeUtc)
            </div>
        </div>
        <div class="form-group" id="pnlMarkAsNewEndDateTimeUtc">
            @Html.GrandLabelFor(model => model.MarkAsNewEndDateTimeUtc)
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.MarkAsNewEndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.MarkAsNewEndDateTimeUtc)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.Published)
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </div>
        </div>
        @if (Model.CreatedOn.HasValue)
        {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.CreatedOn)
                <div class="col-md-9 col-sm-9">
                    <label class="control-label">@Model.CreatedOn.Value.ToString("F")</label>
                </div>
            </div>
        }
        @if (Model.UpdatedOn.HasValue)
        {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.UpdatedOn)
                <div class="col-md-9 col-sm-9">
                    <label class="control-label">@Model.UpdatedOn.Value.ToString("F")</label>
                </div>
            </div>
        }
    </div>
</div>
