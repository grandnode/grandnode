@using Grand.Services.Customers
@using Grand.Services.Stores
@model ProductModel

@if (!String.IsNullOrEmpty(Model.Id))
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="tierprices-grid"></div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            $("#tierprices-grid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("TierPriceList", "Product", new { productId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        create: {
                            url: "@Html.Raw(Url.Action("TierPriceInsert", "Product", new { productId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        update: {
                            url:"@Html.Raw(Url.Action("TierPriceUpdate", "Product"))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        },
                        destroy: {
                            url: "@Html.Raw(Url.Action("TierPriceDelete", "Product"))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id",
                            fields: {
                                Store: { editable: true, type: "string" },
                                StoreId: { editable: true, type: "string" },
                                CustomerRole: { editable: true, type: "string" },
                                CustomerRoleId: { editable: true, type: "string" },
                                Quantity: { editable: true, type: "number" },
                                Price: { editable: true, type: "number" },
                                Id: { editable: false, type: "string" }
                            }
                        }
                    },
                    requestEnd: function (e) {
                        if (e.type == "create" || e.type == "update") {
                            this.read();
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: true,
                    numeric: false,
                    previousNext: false,
                    info: false
                },
                toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "StoreId",
                    title: "@T("Admin.Catalog.Products.TierPrices.Fields.Store")",
                    width: 250,
                    editor: storeDropDownEditor,
                    template: "#:Store#"
                },
                {
                    field: "CustomerRoleId",
                    title: "@T("Admin.Catalog.Products.TierPrices.Fields.CustomerRole")",
                    width: 250,
                    editor: customerRoleDropDownEditor,
                    template: "#:CustomerRole#"
                },

                {
                    field: "Quantity",
                    title: "@T("Admin.Catalog.Products.TierPrices.Fields.Quantity")",
                    width: 150,
                    //integer format
                    format: "{0:0}"
                }, {
                    field: "Price",
                    title: "@T("Admin.Catalog.Products.TierPrices.Fields.Price")",
                    width: 150,
                    editor: function (container, options) {
                        $('<input name="' + options.field + '"/>')
                                .appendTo(container)
                                .kendoNumericTextBox({
                                    format: "{0:n4}",
                                    decimals: 4
                                });
                    }
                },{
                    command: [{
                        name: "edit",
                        text: {
                            edit: "@T("Admin.Common.Edit")",
                            update: "@T("Admin.Common.Update")",
                            cancel: "@T("Admin.Common.Cancel")"
                        }
                    }, {
                        name: "destroy",
                        text: "@T("Admin.Common.Delete")"
                    }],
                    width: 200
                }]
            });
        });

        //local datasource
        var allStores = [
            {
                Id : ' ',
                Name : "@T("Admin.Configuration.Settings.AllSettings.Fields.StoreName.AllStores")"
            }
            @{
                var storeService = EngineContext.Current.Resolve<IStoreService>();
                var allStores = storeService.GetAllStores();
            }
            @foreach (var store in allStores)
            {
                <text>
                        , {
                            Id: "@(store.Id)",
                            Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(store.Name)))"
                        }
                        </text>
            }

        ];

        var allCustomerRoles = [
            {
                Id : ' ',
                Name : "@T("Admin.Catalog.Products.TierPrices.Fields.CustomerRole.All")"
            }
            @{
                var customerService = EngineContext.Current.Resolve<ICustomerService>();
                var allCustomerRoles = customerService.GetAllCustomerRoles(true);
            }
            @foreach (var customerRole in allCustomerRoles)
            {
                <text>
                    , {
            Id: "@(customerRole.Id)",
            Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(customerRole.Name)))"
        }
        </text>
            }
        ];

        function storeDropDownEditor(container, options) {
            $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:StoreId"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: true,
                    dataSource: allStores,
                });
        }

        function customerRoleDropDownEditor(container, options) {
            $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:CustomerRoleId"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autoBind: true,
                    dataSource: allCustomerRoles,
                    
                });
        }
    </script>
    }
    else
    {
        <div class="note note-info">
            @T("Admin.Catalog.Products.TierPrices.SaveBeforeEdit")
        </div>
    }