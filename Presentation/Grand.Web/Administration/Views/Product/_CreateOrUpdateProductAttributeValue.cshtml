@using Grand.Core.Domain.Catalog
@model ProductModel.ProductAttributeValueModel
@{
    Html.AddScriptParts("~/Scripts/farbtastic.js");
    Html.AddCssFileParts("~/Content/farbtastic/farbtastic.css");
}
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.ProductAttributeMappingId)
@Html.HiddenFor(model => model.DisplayColorSquaresRgb)
@Html.HiddenFor(model => model.DisplayImageSquaresPicture)
@if (ViewBag.RefreshPage == true)
{
    <script type="text/javascript">
        try {window.opener.document.forms['@(ViewBag.formId)'].@(ViewBag.btnId).click();}
        catch (e){} 
        window.close();
    </script>
}
<script type="text/javascript">
    $(document).ready(function () {
        
        $("#@Html.FieldIdFor(model => model.AttributeValueTypeId)").change(toggleProductType);
        
        toggleProductType();
    });

    function toggleProductType() {
        var selectedProductTypeId = $("#@Html.FieldIdFor(model => model.AttributeValueTypeId)").val();
        if (selectedProductTypeId == @(((int)AttributeValueType.Simple).ToString())) {
            $('#group-associated-product').hide();
            $('#group-quantity').hide();
            $('#group-price-adjustment').show();
            $('#group-weight-adjustment').show();
            $('#group-cost').show();
        } else if (selectedProductTypeId == @(((int)AttributeValueType.AssociatedToProduct).ToString())) {
            $('#group-associated-product').show();
            $('#group-quantity').show();
            $('#group-price-adjustment').hide();
            $('#group-weight-adjustment').hide();
            $('#group-cost').hide();
        }
    }
</script>
<div class="form-horizontal">
    <div class="form-body">
        <div class="form-group">
            @Html.GrandLabelFor(model => model.AttributeValueTypeId, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.GrandDropDownListFor(model => model.AttributeValueTypeId, ((AttributeValueType)Model.AttributeValueTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.AttributeValueTypeId)
            </div>
        </div>
        <div class="form-group" id="group-associated-product">
            @Html.GrandLabelFor(model => model.AssociatedProductId, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.HiddenFor(model => model.AssociatedProductId)
                <span id="associate-product-name">@Model.AssociatedProductName</span>
                @Html.ValidationMessageFor(model => model.AssociatedProductId)
                <input type="submit" value=@T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.AssociatedProduct.AddNew") onclick="javascript:OpenWindow('@(Url.Action("AssociateProductToAttributeValuePopup", "Product", new { productIdInput = Html.FieldIdFor(model => model.AssociatedProductId), productNameInput = "associate-product-name" }))', 800, 800, true); return false;" class="k-button" />
            </div>
        </div>
        <div class="form-group" id="group-quantity">
            @Html.GrandLabelFor(model => model.Quantity, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Quantity)
                @Html.ValidationMessageFor(model => model.Quantity)
            </div>
        </div>
    </div>
</div>
@(Html.LocalizedEditor<ProductModel.ProductAttributeValueModel, ProductModel.ProductAttributeValueLocalizedModel>("productattributevalue-localized",
@<div class="form-horizontal">
     <div class="form-body">
         <div class="form-group">
             @Html.GrandLabelFor(model => model.Locales[item].Name, new Dictionary<string, object> { { "class", "col-sm-3" } })
             <div class="col-md-9 col-sm-9">
                 @Html.GrandEditorFor(model => model.Locales[item].Name)
                 @Html.ValidationMessageFor(model => model.Locales[item].Name)
             </div>
         </div>
         @Html.HiddenFor(model => model.Locales[item].LanguageId)
     </div>
</div>
,
@<div class="form-horizontal">
     <div class="form-body">
         <div class="form-group">
             @Html.GrandLabelFor(model => model.Name, new Dictionary<string, object> { { "class", "col-sm-3" } })
             <div class="col-md-9 col-sm-9">
                 @Html.GrandEditorFor(model => model.Name)
                 @Html.ValidationMessageFor(model => model.Name)
             </div>
         </div>
     </div>
</div>
))

<div class="form-horizontal">
    <div class="form-body">
        @if (Model.DisplayColorSquaresRgb)
        {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ColorSquaresRgb, new Dictionary<string, object> { { "class", "col-sm-3" } })
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ColorSquaresRgb)
                    <div id="color-picker"></div>
                    <script type="text/javascript">
                        $(document).ready(function(){
                            $('#color-picker').farbtastic('#@Html.FieldIdFor(model => model.ColorSquaresRgb)');
                        });
                    </script>
                    @Html.ValidationMessageFor(model => model.ColorSquaresRgb)
                </div>
            </div>
        }
        @if (Model.DisplayImageSquaresPicture)
        {
            <div class="form-group">
                @Html.GrandLabelFor(model => model.ImageSquaresPictureId, new Dictionary<string, object> { { "class", "col-sm-3" } })
                <div class="col-md-9 col-sm-9">
                    @Html.GrandEditorFor(model => model.ImageSquaresPictureId)
                    @Html.ValidationMessageFor(model => model.ImageSquaresPictureId)
                </div>
            </div>
        }
        <div class="form-group" id="group-price-adjustment">
            @Html.GrandLabelFor(model => model.PriceAdjustment, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.PriceAdjustment)
                @Html.ValidationMessageFor(model => model.PriceAdjustment)
            </div>
        </div>
        <div class="form-group" id="group-weight-adjustment">
            @Html.GrandLabelFor(model => model.WeightAdjustment, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.WeightAdjustment)
                @Html.ValidationMessageFor(model => model.WeightAdjustment)
            </div>
        </div>
        <div class="form-group" id="group-cost">
            @Html.GrandLabelFor(model => model.Cost, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.GrandEditorFor(model => model.Cost)
                @Html.ValidationMessageFor(model => model.Cost)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.IsPreSelected, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.IsPreSelected)
                @Html.ValidationMessageFor(model => model.IsPreSelected)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.DisplayOrder, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </div>
        </div>
        <div class="form-group">
            @Html.GrandLabelFor(model => model.PictureId, new Dictionary<string, object> { { "class", "col-sm-3" } })
            <div class="col-md-9 col-sm-9">
                <ul style="list-style: none;">
                    <li style="float: left; width: 110px;">
                        <p style="float: left; padding-top: 20px;">
                            <input type="radio" name="@Html.FieldNameFor(x => x.PictureId)" value="0" id="id_image_0"
                                   @if (!String.IsNullOrEmpty(Model.PictureId)) { <text> checked="checked" </text>  }>
                        </p>
                        <p style="float: left; padding-top: 20px;">
                            <label for="id_image_0">
                                @T("Admin.Catalog.Products.ProductAttributes.Attributes.Values.Fields.Picture.NoPicture")
                            </label>
                        </p>
                    </li>
                    @foreach (var picture in Model.ProductPictureModels)
                    {
                        <li style="float: left; width: 110px;">
                            <p style="float: left; padding-top: 20px;">
                                <input type="radio" name="@Html.FieldNameFor(x => x.PictureId)" value="@picture.PictureId" id="id_image_@picture.PictureId"
                                       @if (picture.PictureId == Model.PictureId) { <text> checked="checked" </text>  }>
                            </p>
                            <p style="float: left;">
                                <label for="id_image_@picture.PictureId">
                                    <img src="@picture.PictureUrl" alt="" title="" width="75">
                                </label>
                            </p>
                        </li>
                    }
                </ul>
                @Html.ValidationMessageFor(model => model.PictureId)
            </div>
        </div>
    </div>

</div>

